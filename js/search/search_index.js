var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.373,1,2.643]],["body/controllers/AppController.html",[0,2.167,1,4.172,2,1.636,3,0.225,4,0.2,5,0.175,6,4.058,7,0.421,8,1.714,9,5.902,10,1.421,11,0.018,12,0.582,13,4.714,14,1.357,15,0.458,16,2.487,17,2.831,18,2.648,19,0.847,20,1.992,21,2.648,22,3.141,23,2.831,24,4.714,25,2.216,26,4.058,27,3.92,28,4.058,29,0.225,30,0.167,31,2.831,32,2.269,33,4.714,34,4.058,35,4.714,36,1.636,37,4.058,38,3.141,39,4.058,40,5.954,41,2.648,42,3.626,43,4.058,44,0.011,45,0.014,46,0.011]],["title/modules/AppModule.html",[47,1.248,48,2.643]],["body/modules/AppModule.html",[1,3.789,2,1.61,3,0.156,4,0.138,5,0.12,11,0.018,15,0.482,19,0.585,27,3.891,28,2.802,29,0.156,30,0.115,44,0.008,45,0.011,46,0.008,47,1.79,48,5.271,49,1.449,50,1.375,51,1.619,52,1.619,53,1.449,54,2.689,55,1.619,56,2.802,57,2.802,58,2.802,59,4.186,60,3.891,61,3.891,62,4.186,63,4.186,64,4.186,65,3.891,66,2.307,67,1.619,68,1.619,69,2.503,70,2.448,71,3.254,72,3.254,73,2.802,74,1.717,75,3.994,76,1.185,77,2.802,78,3.254,79,0.645,80,1.375,81,1.129,82,1.619,83,0.854,84,1.449,85,2.281,86,3.254,87,3.254,88,3.254,89,3.254,90,2.802,91,4.64,92,0.709,93,2.802,94,1.375,95,4.793,96,2.802,97,2.503,98,3.254,99,3.254,100,3.254,101,3.254,102,0.402,103,2.802,104,2.503,105,6.816,106,6.667,107,2.476,108,2.802,109,3.254,110,3.254,111,3.254,112,1.955,113,3.254,114,1.955,115,3.254,116,1.828,117,3.254,118,3.254,119,3.254,120,3.254,121,3.254,122,3.252,123,3.254,124,1.619,125,3.254,126,3.254]],["title/injectables/AppService.html",[27,2.266,127,0.747]],["body/injectables/AppService.html",[3,0.262,4,0.232,5,0.203,7,0.49,8,1.881,9,6.219,11,0.018,12,0.677,14,1.579,15,0.356,19,0.985,27,3.924,29,0.262,30,0.194,32,1.815,44,0.013,45,0.015,46,0.013,127,1.295,128,2.096,129,4.721,130,5.484,131,1.638,132,5.484,133,5.484]],["title/controllers/AuthController.html",[0,1.373,134,2.437]],["body/controllers/AuthController.html",[0,1.825,2,0.99,3,0.24,4,0.121,5,0.106,7,0.255,8,1.214,10,1.512,11,0.018,12,0.619,14,1.781,15,0.426,16,3.848,17,4.16,18,1.602,19,0.512,20,1.205,22,2.224,23,2.532,25,2.357,29,0.136,30,0.101,31,1.713,32,1.66,34,3.629,36,2.329,37,2.455,38,3.541,39,2.455,44,0.007,45,0.01,46,0.007,92,0.622,102,0.352,112,3.328,114,3.012,134,2.724,135,2.455,136,1.713,137,2.455,138,2.225,139,2.742,140,3.243,141,3.629,142,2.696,143,3.243,144,2.852,145,4.769,146,3.883,147,2.852,148,2.852,149,4.769,150,4.247,151,4.247,152,4.215,153,4.317,154,1.74,155,1.66,156,0.994,157,2.885,158,3.999,159,3.243,160,3.243,161,2.117,162,3.629,163,1.781,164,2.852,165,2.852,166,2.852,167,3.629,168,2.724,169,2.224,170,2.852,171,4.215,172,4.215,173,4.215,174,3.629,175,2.532,176,4.215,177,5.54,178,5.54,179,3.468,180,3.717,181,2.368,182,4.215,183,4.215,184,4.215,185,2.852,186,2.852,187,2.852,188,3.243,189,3.629,190,4.215,191,1.535,192,2.532,193,2.194,194,2.194,195,1.843,196,1.341,197,1.999,198,2.852,199,2.852,200,2.852,201,2.455,202,2.852,203,2.117,204,2.852,205,2.852,206,2.852,207,2.852,208,2.852,209,1.145,210,2.852,211,2.852,212,2.852]],["title/modules/AuthModule.html",[47,1.248,59,2.437]],["body/modules/AuthModule.html",[2,1.868,3,0.193,4,0.171,5,0.149,11,0.018,15,0.483,19,0.725,25,3.505,29,0.193,30,0.143,44,0.009,45,0.012,46,0.009,47,2.005,49,1.798,50,1.706,51,2.008,52,2.008,53,1.798,54,3.013,55,3.013,59,4.894,65,4.159,66,2.678,67,2.008,68,2.008,70,2.841,73,3.476,74,2.13,76,1.47,134,3.914,142,1.622,194,3.106,196,1.898,213,3.476,214,3.476,215,4.037,216,3.476,217,4.474,218,4.474,219,4.159,220,4.037,221,5.384,222,4.037,223,4.037,224,3.106,225,2.425,226,2.829,227,4.037,228,4.037,229,4.037,230,2.268,231,4.037,232,4.037,233,3.476,234,3.476,235,4.037,236,3.476,237,4.037]],["title/injectables/AuthService.html",[25,1.773,127,0.747]],["body/injectables/AuthService.html",[3,0.107,4,0.094,5,0.083,7,0.199,8,1.006,11,0.018,12,0.654,14,1.692,15,0.406,16,2.575,19,0.401,25,1.643,29,0.107,30,0.079,32,1.754,36,2.3,44,0.012,45,0.008,46,0.005,76,0.812,79,0.693,80,0.942,83,0.918,92,0.486,94,2.705,102,0.602,112,2.931,114,4.038,127,0.693,128,0.852,131,1.473,134,3.153,138,1.96,139,2.913,141,3.009,142,2.788,145,4.84,150,3.632,153,4.201,154,1.839,155,1.754,156,1.05,157,2.376,161,2.025,162,1.92,163,2.062,167,3.009,169,3.101,174,3.009,175,2.931,179,2.966,180,3.377,181,1.963,189,3.009,191,1.569,201,3.009,203,2.025,209,1.96,219,2.1,224,1.716,225,1.34,226,1.563,230,1.253,233,1.92,236,1.92,238,1.92,239,3.009,240,3.009,241,3.009,242,3.009,243,2.45,244,3.495,245,1.477,246,2.23,247,3.026,248,5.877,249,3.316,250,2.931,251,2.23,252,3.495,253,2.23,254,3.495,255,3.495,256,3.495,257,2.23,258,3.009,259,3.754,260,3.158,261,3.153,262,2.45,263,2.45,264,3.495,265,3.495,266,3.495,267,2.23,268,3.495,269,4.88,270,2.23,271,2.259,272,3.009,273,3.009,274,4.88,275,3.495,276,3.021,277,3.495,278,3.495,279,3.495,280,1.92,281,1.34,282,2.45,283,2.144,284,1.716,285,2.062,286,2.23,287,3.495,288,2.23,289,2.23,290,2.689,291,3.495,292,3.495,293,2.23,294,4.88,295,3.495,296,3.495,297,3.754,298,2.23,299,3.495,300,2.689,301,4.311,302,1.716,303,2.23,304,1.92,305,2.689,306,4.311,307,3.495,308,1.716,309,2.23,310,3.495,311,2.23,312,2.23,313,3.009,314,1.92,315,3.009,316,2.23,317,2.23,318,2.23,319,1.563,320,2.23,321,2.23,322,2.23,323,2.23,324,2.1,325,2.23,326,2.23]],["title/classes/Comment.html",[30,0.133,327,1.594]],["body/classes/Comment.html",[3,0.156,4,0.138,5,0.121,7,0.415,10,2.169,11,0.018,12,0.888,15,0.432,29,0.156,30,0.115,44,0.008,45,0.011,46,0.008,79,1.284,92,0.711,102,0.908,107,2.383,131,1.165,156,1.351,191,2.359,327,2.287,328,0.938,329,2.806,330,1.337,331,5.412,332,2.41,333,2.41,334,4.659,335,3.793,336,3.497,337,3.251,338,3.793,339,1.709,340,4.659,341,2.366,342,2.41,343,1.165,344,2.609,345,3.26,346,1.452,347,2.886,348,3.26,349,1.452,350,3.26,351,2.692,352,2.285,353,3.26,354,2.508,355,3.26,356,2.287,357,3.26,358,2.635,359,2.856,360,3.26,361,3.101,362,3.26,363,3.26,364,2.504,365,3.26,366,3.26,367,1.452,368,3.26,369,1.309,370,2.773,371,2.41,372,1.621,373,2.069,374,1.963,375,1.963,376,3.112,377,1.532,378,1.72,379,2.106,380,2.285,381,1.958,382,2.285,383,1.378,384,3.26,385,3.26,386,3.26,387,3.26,388,3.26,389,2.806,390,3.26]],["title/classes/Company.html",[30,0.133,83,0.99]],["body/classes/Company.html",[3,0.171,4,0.152,5,0.132,7,0.32,8,1.427,10,2.137,11,0.018,12,0.875,14,1.03,15,0.398,29,0.171,30,0.127,36,1.975,44,0.008,45,0.011,46,0.008,79,1.323,81,1.975,83,1.494,92,0.78,94,1.512,102,0.895,107,1.895,131,1.243,139,1.437,155,1.884,156,1.323,191,2.431,285,1.512,297,2.752,328,1.03,330,1.427,332,2.534,333,2.534,339,1.427,342,2.534,343,1.243,346,1.593,347,2.974,349,1.593,352,2.507,356,2.405,359,3.003,367,1.593,369,1.437,371,2.208,373,2.208,374,2.095,375,2.095,376,1.887,377,1.681,378,1.887,383,1.512,391,3.079,392,2.675,393,3.677,394,3.003,395,5.29,396,3.419,397,3.577,398,3.577,399,3.577,400,3.577,401,3.577,402,3.577,403,3.577,404,3.577,405,4.378,406,3.577,407,2.752,408,2.507,409,4.899,410,2.752,411,3.577,412,2.752,413,3.577,414,3.577,415,1.779,416,3.577,417,2.785,418,3.577,419,3.577,420,3.079,421,3.577,422,3.577,423,3.079]],["title/controllers/CompanyController.html",[0,1.373,424,2.643]],["body/controllers/CompanyController.html",[0,0.978,2,0.933,3,0.276,4,0.114,5,0.1,7,0.24,8,1.161,10,1.738,11,0.018,12,0.712,14,1.937,15,0.419,16,3.042,17,1.614,18,1.51,19,0.483,20,2.046,21,1.51,22,1.418,29,0.128,30,0.095,32,1.908,36,2.402,38,2.554,41,3.527,44,0.006,45,0.009,46,0.006,83,1.969,84,1.197,92,0.586,102,0.332,104,4.139,116,3.239,136,1.614,138,2.161,139,2.594,150,2.606,151,2.606,154,1.867,155,1.781,156,1.066,157,2.73,158,3.912,159,4.139,161,1.541,163,2.559,179,2.128,180,2.423,188,3.103,192,1.614,203,2.203,209,2.161,245,1.136,260,3.401,271,3.477,283,1.337,285,2.274,394,2.839,410,4.139,424,2.827,425,2.314,426,3.472,427,3.239,428,4.632,429,3.472,430,4.033,431,2.314,432,3.103,433,2.688,434,2.423,435,4.033,436,4.168,437,3.103,438,2.314,439,2.314,440,2.688,441,4.033,442,3.728,443,5.56,444,2.688,445,2.688,446,3.103,447,3.472,448,2.314,449,2.688,450,2.688,451,2.688,452,2.067,453,2.688,454,3.103,455,4.033,456,3.472,457,2.606,458,4.033,459,2.006,460,2.719,461,2.314,462,1.197,463,1.51,464,3.022,465,1.737,466,1.51,467,1.737,468,2.688,469,4.033,470,2.314,471,2.688,472,4.033,473,3.472,474,3.472,475,2.688,476,2.688,477,2.688,478,2.688,479,2.688,480,2.314,481,2.688,482,2.688,483,1.883,484,2.067,485,2.314,486,2.688]],["title/modules/CompanyModule.html",[47,1.248,60,2.266]],["body/modules/CompanyModule.html",[2,2.013,3,0.216,4,0.192,5,0.168,11,0.018,15,0.482,19,0.813,29,0.216,30,0.16,44,0.01,45,0.013,46,0.01,47,2.119,49,2.015,50,1.912,51,2.25,52,2.25,53,2.015,54,3.184,55,3.184,60,4.463,66,2.885,67,2.25,68,2.25,70,2.387,74,2.387,76,1.647,79,0.897,80,1.912,81,2.013,82,2.25,83,1.523,84,2.015,142,2.33,230,2.541,424,4.487,460,4.235,461,3.895,487,3.895,488,3.895,489,3.895,490,3.684,491,4.524,492,4.524,493,3.895,494,3.895,495,4.524]],["title/injectables/CompanyService.html",[127,0.747,460,2.119]],["body/injectables/CompanyService.html",[3,0.136,4,0.12,5,0.105,7,0.254,8,1.21,11,0.018,12,0.728,14,1.84,15,0.442,19,0.51,29,0.136,30,0.1,32,1.655,36,2.4,44,0.007,45,0.01,46,0.007,76,1.033,79,0.833,80,1.2,81,0.985,82,1.412,83,1.95,84,1.264,92,0.619,94,2.114,102,0.682,107,1.085,116,3.47,127,0.833,128,1.085,138,2.009,142,1.688,154,1.918,155,1.83,156,1.095,157,2.336,158,2.715,159,4.539,161,1.912,163,2.702,203,1.912,209,1.688,230,1.595,245,2.336,249,3.848,250,4.249,258,3.617,260,2.36,261,2.715,271,3.572,276,1.99,281,1.705,282,2.945,283,2.935,284,2.184,285,2.494,343,1.386,392,1.975,393,1.835,394,2.639,410,3.232,415,1.412,426,3.617,428,4.759,429,3.617,431,3.617,434,1.705,436,3.617,442,3.537,448,2.444,457,2.715,459,1.412,460,2.36,462,1.264,463,1.595,480,2.444,490,3.373,493,2.444,496,2.444,497,4.202,498,2.839,499,3.848,500,3.848,501,2.839,502,3.232,503,3.505,504,2.839,505,2.839,506,2.839,507,2.839,508,1.99,509,2.839,510,2.715,511,3.617,512,2.839,513,3.232,514,1.99,515,2.184,516,2.184,517,2.839,518,2.839,519,2.839,520,2.839,521,2.839,522,2.839,523,2.839,524,2.839,525,2.839,526,2.839,527,2.839,528,2.839,529,2.839,530,2.839,531,2.184,532,2.184,533,2.839,534,5.002,535,2.839,536,2.839,537,2.839,538,2.839,539,2.839,540,2.839,541,2.839,542,2.839]],["title/classes/CreateRecDto.html",[30,0.133,543,2.643]],["body/classes/CreateRecDto.html",[3,0.233,4,0.206,5,0.18,7,0.435,11,0.017,12,0.881,29,0.233,30,0.172,44,0.011,45,0.014,46,0.011,83,1.739,102,0.881,131,1.523,328,1.402,330,1.749,335,4.642,336,4.28,343,1.871,394,3.495,543,4.259,544,6.267,545,4.192,546,7.739,547,5.095,548,4.87,549,4.87,550,4.87,551,4.87,552,4.87]],["title/classes/EditLoginDto.html",[30,0.133,146,2.643]],["body/classes/EditLoginDto.html",[3,0.252,4,0.223,5,0.195,7,0.471,11,0.018,12,0.847,15,0.342,29,0.252,30,0.186,44,0.012,45,0.015,46,0.012,102,0.847,112,4.121,114,4.121,131,1.787,142,2.756,146,4.472,328,1.518,330,1.837,553,6.138,554,4.539,555,6.861,556,5.272,557,5.272,558,5.272,559,5.272]],["title/injectables/JwtAuthGuard.html",[20,1.594,127,0.747]],["body/injectables/JwtAuthGuard.html",[3,0.271,4,0.24,5,0.21,11,0.018,15,0.432,19,1.017,20,2.814,29,0.271,30,0.2,44,0.013,45,0.015,46,0.013,127,1.319,128,2.164,195,3.659,196,2.662,560,4.356,561,4.356,562,3.401,563,4.875]],["title/injectables/JwtAuthRefreshGuard.html",[127,0.747,197,2.643]],["body/injectables/JwtAuthRefreshGuard.html",[3,0.27,4,0.239,5,0.209,11,0.018,15,0.431,19,1.014,29,0.27,30,0.2,44,0.013,45,0.015,46,0.013,127,1.317,128,2.158,143,4.343,195,3.648,196,2.654,197,4.658,560,4.343,562,3.391,563,4.86,564,4.86]],["title/injectables/JwtRefreshTokenStrategy.html",[127,0.747,217,2.437]],["body/injectables/JwtRefreshTokenStrategy.html",[3,0.228,4,0.202,5,0.176,7,0.425,8,1.725,11,0.018,12,0.739,14,1.371,15,0.46,19,0.855,29,0.228,30,0.168,32,1.576,36,2.275,44,0.011,45,0.014,46,0.011,102,0.588,122,3.336,127,1.187,128,1.819,143,3.662,154,1.652,155,1.576,156,0.943,169,2.512,179,3.161,192,2.86,196,2.238,217,3.871,225,2.86,226,3.336,245,2.77,247,2.368,280,4.098,290,3.662,304,4.098,562,2.86,565,4.098,566,4.609,567,4.761,568,5.158,569,4.761,570,3.662,571,3.662,572,4.098,573,3.336,574,3.076,575,3.662,576,3.662,577,4.098,578,4.098,579,4.098,580,4.098,581,4.098,582,4.098]],["title/injectables/JwtStrategy.html",[127,0.747,218,2.437]],["body/injectables/JwtStrategy.html",[3,0.285,4,0.166,5,0.145,7,0.35,8,1.52,11,0.018,12,0.652,14,1.838,15,0.414,19,0.705,20,2.699,29,0.187,30,0.211,32,1.976,36,2.071,44,0.009,45,0.012,46,0.009,102,0.484,122,2.748,127,1.046,128,1.499,138,2.121,139,2.121,154,1.361,155,1.298,156,0.777,157,2.699,169,3.15,175,3.172,179,3.764,180,4.004,181,3.587,196,1.843,203,1.499,209,2.121,218,3.412,225,2.356,226,2.748,234,3.376,245,2.523,259,4.913,261,3.412,290,4.913,392,2.482,457,4.127,462,2.351,562,3.586,566,4.913,568,4.545,570,4.592,571,5.127,572,3.376,573,4.183,575,3.017,576,3.017,577,3.376,578,3.376,579,3.376,580,3.376,581,3.376,582,3.376,583,3.376,584,4.545,585,3.921,586,3.921,587,5.28,588,3.921,589,3.7,590,4.062,591,3.412]],["title/injectables/LocalAuthGuard.html",[23,2.266,127,0.747]],["body/injectables/LocalAuthGuard.html",[3,0.271,4,0.24,5,0.21,11,0.018,15,0.432,19,1.017,23,3.999,29,0.271,30,0.2,44,0.013,45,0.015,46,0.013,127,1.319,128,2.164,195,3.659,196,2.662,561,4.356,562,3.401,592,4.875,593,5.662]],["title/injectables/LocalStrategy.html",[127,0.747,219,2.266]],["body/injectables/LocalStrategy.html",[3,0.282,4,0.162,5,0.142,7,0.342,8,1.495,11,0.018,12,0.641,14,1.495,15,0.41,19,0.688,23,3.798,25,3.204,29,0.183,30,0.209,31,2.299,32,1.267,36,2.046,44,0.009,45,0.012,46,0.009,94,1.617,102,0.641,112,3.798,114,4.368,127,1.029,128,1.463,131,1.657,138,2.086,139,2.989,154,1.802,155,1.719,156,1.029,157,2.195,161,1.463,163,2.195,168,3.356,169,3.336,175,3.798,181,3.552,193,2.944,194,2.944,196,1.799,203,1.985,209,2.086,219,3.12,245,1.617,261,3.356,285,1.617,392,2.442,457,3.356,562,3.541,566,4.864,570,4.535,571,5.085,573,2.682,574,3.356,575,2.944,576,2.944,584,4.471,594,3.295,595,3.827,596,3.827,597,5.194,598,3.827,599,5.194,600,4.471,601,5.194,602,3.827,603,3.827,604,3.295]],["title/classes/Login.html",[30,0.133,142,1.515]],["body/classes/Login.html",[3,0.203,4,0.18,5,0.157,7,0.38,10,2.118,11,0.018,12,0.867,15,0.361,29,0.203,30,0.15,44,0.01,45,0.013,46,0.01,79,1.357,92,0.927,102,0.906,114,3.733,131,1.653,142,2.496,156,1.392,169,3.279,191,2.557,324,3.733,328,1.224,330,1.604,332,2.768,333,2.768,342,2.768,346,1.894,347,3.128,349,1.894,352,2.98,356,2.626,367,1.894,369,1.708,371,2.481,373,2.481,374,2.355,375,2.355,377,1.999,383,1.797,396,3.733,605,3.661,606,4.253,607,4.253,608,4.253,609,3.661,610,4.253,611,4.253,612,4.253,613,4.797,614,4.253]],["title/controllers/NotificationsController.html",[0,1.373,615,2.643]],["body/controllers/NotificationsController.html",[0,1.59,2,1.516,3,0.209,4,0.185,5,0.162,7,0.39,8,1.633,10,1.71,11,0.018,12,0.7,14,1.988,15,0.448,16,2.305,18,2.454,19,0.785,20,1.846,21,2.454,22,2.305,29,0.209,30,0.155,31,2.625,32,1.877,38,2.992,41,3.186,44,0.01,45,0.013,46,0.01,83,1.489,92,0.952,116,3.186,136,2.625,154,1.968,155,1.877,156,1.124,160,4.363,163,2.816,203,1.67,209,1.755,337,2.625,339,1.095,358,1.846,393,3.665,427,3.537,438,3.761,442,2.992,446,4.363,459,2.173,470,3.761,484,3.361,485,3.761,510,3.665,511,3.761,615,3.975,616,3.761,617,5.671,618,4.369,619,4.369,620,4.369,621,4.369,622,4.369,623,4.363,624,3.062,625,3.407,626,3.761,627,4.369,628,4.369,629,4.369,630,4.369,631,3.361,632,4.369]],["title/modules/NotificationsModule.html",[47,1.248,61,2.266]],["body/modules/NotificationsModule.html",[2,2.109,3,0.233,4,0.206,5,0.18,11,0.018,15,0.463,19,0.875,29,0.233,30,0.172,44,0.011,45,0.014,46,0.011,47,2.192,49,2.169,50,2.058,51,2.422,52,2.422,53,2.169,54,3.294,55,3.294,61,4.435,66,3.022,67,2.422,68,2.422,70,2.569,74,2.569,76,1.773,358,2.058,615,4.642,624,3.413,625,4.6,626,4.192,633,4.192,634,4.192,635,4.192,636,4.87,637,4.87,638,4.87]],["title/injectables/NotificationsService.html",[127,0.747,625,2.266]],["body/injectables/NotificationsService.html",[3,0.202,4,0.179,5,0.156,7,0.377,8,1.597,11,0.018,12,0.765,14,1.597,15,0.443,19,0.759,29,0.202,30,0.149,32,1.836,36,2.433,44,0.01,45,0.013,46,0.01,76,1.538,79,1.099,80,1.785,92,0.921,94,1.785,102,0.765,127,1.099,128,1.615,154,2.15,155,2.05,156,1.228,161,1.615,163,2.78,245,2.345,250,3.951,281,2.538,283,2.101,285,2.345,327,1.785,339,1.059,341,1.466,343,1.839,358,1.785,361,2.101,364,1.697,392,3.092,442,2.229,459,2.101,547,4.268,624,2.961,625,3.333,639,3.637,640,5.548,641,5.548,642,4.225,643,4.225,644,5.548,645,5.548,646,4.225,647,5.548,648,4.225,649,4.268,650,4.225,651,4.776,652,4.225,653,3.637,654,4.225,655,3.637,656,4.225]],["title/classes/Reaction.html",[30,0.133,361,1.876]],["body/classes/Reaction.html",[3,0.172,4,0.152,5,0.133,7,0.445,10,2.14,11,0.018,12,0.876,15,0.434,29,0.172,30,0.127,44,0.008,45,0.012,46,0.008,79,1.221,92,0.784,102,0.903,107,2.354,156,1.326,191,2.435,327,2.954,328,1.036,330,1.433,332,2.542,333,2.542,335,4,337,3.429,339,1.752,341,2.425,342,2.542,343,1.248,344,2.796,346,1.602,347,2.979,349,1.602,351,3.064,356,1.52,358,2.733,359,1.898,361,2.839,367,1.602,369,1.445,370,3.04,371,1.602,372,1.789,373,2.217,374,2.104,375,2.104,376,2.626,377,1.691,378,1.898,379,2.324,381,2.161,383,1.52,657,3.097,658,5.708,659,3.597,660,3.597,661,3.597,662,3.597,663,3.597,664,3.597,665,3.597,666,3.597,667,3.597,668,2.161,669,3.597,670,3.597,671,3.597,672,3.597]],["title/classes/Recognition.html",[30,0.133,339,0.945]],["body/classes/Recognition.html",[3,0.138,4,0.122,5,0.107,7,0.38,10,2.175,11,0.018,12,0.89,15,0.437,29,0.138,30,0.102,44,0.007,45,0.01,46,0.007,79,1.334,81,1.752,83,1.687,92,0.629,102,0.906,107,2.375,124,2.115,131,1.066,156,1.469,191,2.262,327,2.511,328,0.831,330,1.224,332,2.481,333,2.249,334,4.348,336,3.263,337,3.033,338,3.539,339,1.266,340,4.348,341,2.157,342,2.249,343,1.066,346,1.285,347,2.768,349,1.285,351,2.955,352,3.539,356,2.134,358,2.511,359,2.94,361,2.955,364,2.386,367,1.285,369,1.159,370,2.619,371,2.481,372,2.512,373,1.894,374,1.797,375,1.797,376,3.135,377,1.357,379,1.865,380,2.023,381,1.734,382,2.023,383,1.22,389,2.485,394,2.665,408,2.023,668,1.734,673,2.485,674,4.348,675,4.348,676,5.572,677,5.05,678,2.886,679,2.886,680,2.886,681,2.886,682,2.886,683,2.886,684,2.886,685,2.886,686,2.886,687,2.886,688,2.886,689,2.886,690,4.253,691,2.886,692,2.485,693,2.886,694,2.886,695,2.886,696,3.661,697,2.22,698,2.22,699,2.886,700,2.886,701,2.886,702,2.886,703,2.886,704,2.886,705,2.886,706,2.886,707,2.886,708,2.886,709,2.886,710,2.886,711,2.886]],["title/modules/RecognitionModule.html",[47,1.248,62,2.437]],["body/modules/RecognitionModule.html",[2,1.959,3,0.207,4,0.184,5,0.161,11,0.018,15,0.493,19,0.78,29,0.207,30,0.153,44,0.01,45,0.013,46,0.01,47,2.077,49,1.932,50,1.834,51,2.158,52,2.158,53,1.932,54,3.121,55,3.121,61,2.607,62,4.648,66,2.808,67,2.158,68,2.158,70,2.29,74,2.29,76,1.58,79,1.119,80,1.834,81,1.959,82,2.158,83,1.482,84,1.932,85,5.282,93,3.736,327,2.386,339,1.415,358,2.386,361,2.808,364,2.268,624,3.041,712,3.736,713,3.736,714,3.736,715,4.34,716,5.403,717,4.34,718,4.34,719,2.607,720,2.514,721,2.804,722,3.041,723,4.34,724,4.34,725,3.736]],["title/classes/RecognitionPagination.html",[30,0.133,726,2.643]],["body/classes/RecognitionPagination.html",[3,0.22,4,0.195,5,0.17,7,0.411,11,0.018,12,0.796,15,0.38,29,0.28,30,0.207,44,0.011,45,0.014,46,0.011,79,1.162,102,0.866,131,1.85,328,1.324,330,1.688,339,1.618,343,1.883,726,4.109,727,3.539,728,5.849,729,5.227,730,5.849,731,4.6,732,5.047,733,4.6,734,4.6,735,3.96,736,3.539,737,3.224,738,4.51,739,5.047,740,5.047,741,5.047,742,5.047,743,5.047,744,5.047,745,5.047,746,5.047]],["title/classes/Report.html",[30,0.133,364,1.515]],["body/classes/Report.html",[3,0.174,4,0.154,5,0.135,7,0.449,10,2.146,11,0.018,12,0.878,15,0.421,29,0.174,30,0.129,44,0.008,45,0.012,46,0.008,79,1.228,92,0.795,102,0.905,107,2.197,124,1.813,131,1.259,156,1.331,191,2.445,327,2.963,328,1.049,330,1.446,332,2.56,333,2.56,335,4.028,336,3.714,337,3.453,339,1.758,342,2.56,343,1.259,344,2.822,346,1.623,347,2.991,349,1.623,351,2.498,354,2.804,356,2.429,358,2.746,359,1.923,364,2.309,367,1.623,369,1.464,370,2.912,371,2.237,372,1.813,373,2.237,374,2.123,375,2.123,376,2.651,377,1.713,378,1.923,379,2.355,383,1.54,668,2.19,747,3.138,748,5.748,749,3.645,750,3.645,751,3.645,752,3.645,753,3.645,754,3.645,755,3.645,756,3.645,757,3.645,758,3.645,759,2.355,760,3.645,761,3.645,762,3.645]],["title/classes/ReturnRockstarDto.html",[30,0.133,763,2.437]],["body/classes/ReturnRockstarDto.html",[3,0.252,4,0.223,5,0.195,7,0.471,11,0.018,12,0.787,15,0.445,29,0.252,30,0.186,44,0.012,45,0.015,46,0.012,79,1.045,102,0.787,328,1.518,330,1.837,341,2.575,736,4.056,763,4.123,764,5.907,765,4.539,766,4.168,767,5.272,768,5.272,769,5.272,770,5.272]],["title/classes/Rockstar.html",[30,0.133,341,1.309]],["body/classes/Rockstar.html",[3,0.168,4,0.149,5,0.13,7,0.438,10,2.157,11,0.018,12,0.883,15,0.442,29,0.168,30,0.125,44,0.008,45,0.011,46,0.008,79,1.21,92,0.768,102,0.883,107,2.453,124,1.753,156,0.972,327,2.713,328,1.015,330,1.413,337,3.392,338,3.957,339,1.609,341,2.306,343,1.744,344,2.757,351,1.753,356,2.882,358,2.713,359,3.387,361,3.193,369,1.415,370,2.307,371,1.569,372,1.753,374,1.489,375,1.489,376,3.507,377,1.657,378,1.859,379,2.277,382,2.47,383,1.489,393,3.648,668,2.117,674,4.861,697,2.711,759,2.277,766,3.606,771,3.034,772,4.343,773,4.279,774,4.861,775,3.957,776,3.945,777,3.524,778,3.524,779,3.524,780,3.524,781,3.524,782,3.524,783,3.524,784,3.524,785,3.524,786,3.524,787,3.524,788,3.524,789,3.524,790,3.524,791,3.524,792,3.524,793,3.524]],["title/controllers/RockstarController.html",[0,1.373,794,2.643]],["body/controllers/RockstarController.html",[0,1.427,2,1.361,3,0.187,4,0.166,5,0.145,7,0.35,8,1.52,10,1.182,11,0.018,12,0.484,14,1.838,15,0.481,16,2.069,17,2.356,18,2.203,19,0.705,20,1.657,21,2.203,22,2.069,29,0.187,30,0.139,31,2.356,32,1.298,36,2.071,38,3.15,41,2.203,44,0.009,45,0.012,46,0.009,79,0.777,80,1.657,92,0.855,136,2.356,139,1.575,154,1.361,155,1.298,156,0.777,157,2.699,161,1.499,191,2.325,192,2.356,203,2.018,209,1.575,243,2.748,262,2.748,285,1.657,339,0.983,341,2.382,343,0.983,364,1.575,369,2.121,415,2.626,417,3.353,427,2.203,452,3.017,459,1.95,462,1.746,463,2.203,464,2.203,465,2.534,466,2.203,467,2.534,719,2.356,722,2.748,763,2.534,776,3.857,794,3.7,795,3.376,796,4.545,797,3.921,798,3.921,799,3.586,800,3.376,801,3.017,802,3.376,803,3.376,804,3.921,805,3.921,806,3.921,807,5.498,808,4.545,809,4.545,810,2.748,811,3.921,812,3.376,813,5.28,814,5.28,815,5.28,816,3.921]],["title/modules/RockstarModule.html",[47,1.248,63,2.437]],["body/modules/RockstarModule.html",[2,1.989,3,0.212,4,0.188,5,0.164,11,0.018,15,0.49,19,0.798,29,0.212,30,0.157,44,0.01,45,0.013,46,0.01,47,2.1,49,1.977,50,1.876,51,2.208,52,2.208,53,1.977,54,3.156,55,3.156,63,4.673,66,2.85,67,2.208,68,2.208,70,2.343,74,2.343,76,1.616,79,1.136,80,1.876,81,1.989,82,2.208,83,1.504,84,1.977,339,1.437,341,1.989,364,2.302,719,2.667,720,2.552,721,2.869,722,3.112,725,3.823,766,3.219,794,4.447,799,4.542,800,3.823,801,3.416,817,3.823,818,3.823,819,3.823,820,4.44,821,4.44,822,3.823]],["title/injectables/RockstarService.html",[127,0.747,799,2.266]],["body/injectables/RockstarService.html",[3,0.173,4,0.099,5,0.086,7,0.208,8,1.04,11,0.018,12,0.446,14,1.438,15,0.445,19,0.418,29,0.111,30,0.082,36,1.537,44,0.005,45,0.008,46,0.005,76,0.847,79,0.99,80,0.984,81,1.537,82,1.158,83,1.311,84,1.037,92,0.507,102,0.446,127,0.716,128,0.89,131,0.584,138,0.935,139,1.452,151,2.335,154,1.254,155,1.196,156,0.716,157,1.527,161,1.381,163,1.527,203,1.693,209,1.452,245,1.527,250,4.416,262,2.533,281,1.398,283,3.07,285,2.418,324,1.398,338,1.631,339,1.252,341,2.142,343,1.679,364,0.935,392,2.902,393,3.494,394,2.338,412,1.791,415,2.203,417,3.037,442,1.228,446,2.78,459,1.158,499,2.78,500,3.408,503,3.105,514,1.631,515,1.791,516,1.791,532,1.791,543,1.631,574,1.504,591,2.335,649,3.408,675,2.004,719,1.398,720,1.037,721,1.504,722,1.631,738,1.791,763,2.335,766,2.489,772,3.842,773,4.812,775,2.533,776,4.186,796,3.814,799,2.171,801,1.791,802,2.004,803,2.004,810,2.533,812,2.004,822,2.004,823,2.004,824,2.004,825,3.814,826,3.814,827,4.43,828,4.43,829,4.43,830,2.328,831,2.328,832,2.328,833,4.994,834,3.111,835,2.004,836,2.328,837,2.328,838,2.328,839,2.328,840,2.328,841,2.328,842,2.004,843,2.004,844,2.328,845,2.328,846,2.328,847,1.791,848,2.004,849,2.004,850,2.328,851,3.614,852,3.614,853,4.43,854,3.614,855,2.328,856,2.328,857,2.328,858,2.328,859,3.614,860,2.328,861,3.614,862,2.328,863,2.328,864,2.328,865,2.328,866,2.328,867,2.328,868,2.328,869,2.328,870,4.994,871,3.814,872,2.328,873,2.004,874,2.328,875,2.328,876,2.328,877,2.328,878,2.328,879,2.328,880,2.328,881,2.328,882,2.328,883,2.328,884,2.328,885,2.328,886,2.328,887,2.328,888,2.328,889,2.328,890,2.328,891,2.328,892,3.614,893,2.328,894,2.328,895,2.328,896,2.328,897,2.328,898,2.328,899,2.328,900,2.328,901,2.328,902,2.328,903,2.004,904,2.328,905,2.328,906,2.328,907,2.328,908,2.328,909,2.328,910,2.328,911,2.328,912,3.614,913,2.328,914,2.328,915,3.614,916,4.43,917,3.614,918,3.614,919,3.614,920,3.614,921,3.614,922,3.614,923,3.614,924,3.614,925,3.614,926,3.614,927,3.614,928,3.614,929,2.328,930,2.328,931,2.328,932,2.328,933,2.328,934,2.328,935,2.328,936,2.328,937,2.328,938,2.328,939,2.328,940,1.791]],["title/classes/RockstarStats.html",[30,0.133,766,2.119]],["body/classes/RockstarStats.html",[3,0.177,4,0.157,5,0.137,7,0.454,10,2.179,11,0.018,12,0.892,15,0.405,29,0.177,30,0.131,44,0.009,45,0.012,46,0.009,79,0.735,81,2.399,92,0.808,102,0.914,124,1.844,156,1.338,191,2.458,328,1.068,330,1.463,332,2.583,333,2.583,341,2.399,342,2.583,343,1.812,344,2.855,346,1.651,347,3.007,349,1.651,351,2.528,356,2.922,367,1.651,369,1.49,370,2.727,371,1.651,372,1.844,373,2.264,374,2.148,375,2.148,377,1.743,381,2.228,383,1.567,396,2.228,408,2.599,415,2.528,759,2.396,766,3.258,773,4.065,774,4.993,776,3.748,941,3.193,942,4.993,943,4.993,944,3.911,945,3.709,946,3.709,947,3.709,948,3.709,949,3.709,950,3.709,951,3.709,952,3.709,953,3.709,954,3.709,955,3.709]],["title/guards/RolesGuard.html",[464,2.119,956,2.437]],["body/guards/RolesGuard.html",[3,0.151,4,0.134,5,0.117,7,0.283,8,1.31,11,0.018,12,0.562,14,1.31,15,0.472,19,0.569,20,1.923,21,2.557,22,2.401,29,0.255,30,0.188,32,1.927,38,2.401,41,2.557,42,3.501,44,0.007,45,0.011,46,0.007,94,1.923,102,0.562,122,3.19,124,2.649,127,0.902,138,1.828,139,2.656,151,2.941,154,1.579,155,1.506,156,0.902,168,2.941,175,2.734,203,1.211,209,1.272,245,2.461,247,3.193,263,3.19,272,3.918,273,3.918,283,2.649,443,3.918,457,2.941,462,3.115,463,1.78,464,3.606,465,2.941,466,3.271,467,2.941,483,3.19,502,3.501,590,3.501,600,3.918,631,3.501,956,2.941,957,3.168,958,2.727,959,4.551,960,4.551,961,4.551,962,4.551,963,3.501,964,4.551,965,3.918,966,2.734,967,3.918,968,4.551,969,3.918,970,5.822,971,3.168,972,6.42,973,3.168,974,4.551,975,5.822,976,3.168,977,4.551,978,3.501,979,4.551,980,3.918,981,4.551,982,4.551,983,2.727,984,2.437,985,3.168,986,3.168,987,4.551,988,3.168,989,3.168,990,3.168,991,3.168,992,3.168,993,2.727]],["title/classes/Tag.html",[30,0.133,81,1.309]],["body/classes/Tag.html",[3,0.182,4,0.161,5,0.141,7,0.525,10,2.135,11,0.018,12,0.874,15,0.409,29,0.182,30,0.134,44,0.009,45,0.012,46,0.009,81,2.037,83,1.827,92,0.828,102,0.904,107,2.244,131,1.295,156,1.463,191,2.475,328,1.093,330,1.487,332,2.615,333,2.615,339,1.58,342,2.615,343,1.295,346,1.691,347,3.028,349,1.691,356,2.481,359,2.003,367,1.691,369,1.525,370,2.428,372,2.92,373,2.3,374,2.183,375,2.183,376,2.726,378,2.003,383,1.605,396,2.281,405,2.921,692,3.269,696,3.269,697,3.974,698,2.921,720,3.098,775,2.661,994,3.269,995,6.302,996,5.055,997,3.527,998,3.797,999,3.797,1000,3.797,1001,3.797,1002,3.797,1003,3.797,1004,3.797,1005,3.797,1006,3.797,1007,3.269,1008,3.797,1009,3.797,1010,3.797]],["title/controllers/TagController.html",[0,1.373,1011,2.643]],["body/controllers/TagController.html",[0,1.097,2,1.046,3,0.144,4,0.128,5,0.112,7,0.269,8,1.264,10,1.561,11,0.018,12,0.639,14,1.817,15,0.433,16,1.59,17,1.81,18,1.693,19,0.541,20,1.273,21,1.693,22,1.59,29,0.144,30,0.107,31,1.81,32,1.714,38,3.592,41,3.396,44,0.007,45,0.01,46,0.007,81,1.974,82,1.499,83,1.816,92,0.657,102,0.372,131,1.1,136,1.81,137,3.779,138,2.08,139,2.681,154,1.797,155,1.714,156,1.026,157,1.855,163,2.667,179,3.33,180,3.791,192,2.637,203,2.412,209,1.763,260,3.545,262,3.076,276,3.076,343,1.298,394,3.833,427,3.396,432,2.318,434,3.417,439,2.594,442,3.437,447,3.779,452,2.318,456,5.433,459,2.575,462,1.342,463,1.693,464,2.908,465,1.947,466,1.693,467,1.947,473,3.779,474,3.779,483,3.076,484,2.318,490,2.316,508,3.629,510,2.836,574,1.947,590,4.855,623,4.376,847,3.377,997,3.417,1011,3.076,1012,2.594,1013,3.779,1014,3.013,1015,5.688,1016,3.013,1017,3.013,1018,4.376,1019,5.747,1020,6.311,1021,3.983,1022,3.013,1023,3.013,1024,3.779,1025,4.39,1026,3.013,1027,3.013,1028,2.594,1029,3.013,1030,3.013,1031,3.013,1032,3.013,1033,3.013,1034,3.013,1035,3.013,1036,3.013,1037,3.013]],["title/modules/TagModule.html",[47,1.248,64,2.437]],["body/modules/TagModule.html",[2,2.082,3,0.228,4,0.202,5,0.177,11,0.018,15,0.47,19,0.858,29,0.228,30,0.169,44,0.011,45,0.014,46,0.011,47,2.172,49,2.125,50,2.017,51,2.374,52,2.374,53,2.125,54,3.264,55,3.264,64,4.75,66,2.984,67,2.374,68,2.374,70,2.518,74,2.518,76,1.737,81,1.656,82,2.374,83,1.575,84,2.125,490,4.03,1011,4.6,1028,4.109,1038,4.109,1039,4.773,1040,4.109,1041,4.773,1042,4.773,1043,4.773]],["title/injectables/TagService.html",[127,0.747,490,1.99]],["body/injectables/TagService.html",[3,0.161,4,0.142,5,0.124,7,0.3,8,1.365,11,0.018,12,0.738,14,1.884,15,0.409,19,0.603,29,0.161,30,0.119,32,1.978,36,2.424,44,0.008,45,0.011,46,0.008,76,1.222,81,2.53,82,1.67,83,1.444,84,1.495,92,0.732,94,2.004,102,0.738,107,1.283,127,0.94,128,1.283,131,1.379,138,1.905,139,1.348,154,2.074,155,1.978,156,1.184,158,2.169,161,2.102,163,2.766,203,2.41,245,2.004,250,4.041,276,2.353,281,2.017,283,2.359,285,2.004,343,1.813,392,3.284,394,2.503,407,2.583,442,3.327,454,3.649,459,1.67,490,2.503,500,3.649,503,3.855,508,3.324,510,3.065,514,2.353,516,2.583,531,2.583,903,2.89,996,4.735,997,3.787,1013,4.083,1021,4.598,1044,2.89,1045,4.743,1046,4.743,1047,3.357,1048,3.357,1049,4.743,1050,3.357,1051,4.743,1052,3.357,1053,4.743,1054,3.357,1055,3.357,1056,3.357,1057,2.89,1058,3.357,1059,3.357,1060,3.357,1061,3.357,1062,3.357,1063,2.89,1064,3.357,1065,3.357,1066,3.357,1067,3.357,1068,3.357]],["title/classes/TagStats.html",[30,0.133,720,1.68]],["body/classes/TagStats.html",[3,0.187,4,0.165,5,0.145,7,0.47,10,2.149,11,0.018,12,0.88,15,0.386,29,0.187,30,0.138,44,0.009,45,0.012,46,0.009,79,1.263,81,2.473,92,0.851,102,0.909,107,1.493,124,1.942,156,1.359,191,2.496,324,3.578,328,1.124,330,1.516,332,2.653,333,2.653,342,2.653,343,1.719,344,2.958,346,1.739,347,3.054,349,1.739,351,2.619,356,1.65,367,1.739,369,1.569,370,2.8,371,1.739,372,1.942,373,2.345,374,2.225,375,2.225,377,1.836,383,1.65,396,2.346,408,2.737,415,3.171,720,2.653,759,2.524,942,5.128,943,5.128,944,4.904,1069,3.362,1070,5.957,1071,3.905,1072,3.905,1073,3.905,1074,3.905,1075,3.905,1076,3.905,1077,3.905,1078,3.905,1079,3.905,1080,3.905]],["title/classes/UserNotification.html",[30,0.133,358,1.594]],["body/classes/UserNotification.html",[3,0.149,4,0.132,5,0.115,7,0.278,10,2.17,11,0.018,12,0.888,15,0.437,29,0.149,30,0.11,44,0.007,45,0.01,46,0.007,79,1.145,92,0.679,102,0.912,107,2.44,131,1.449,156,1.265,191,2.324,327,2.847,328,0.897,330,1.295,332,2.35,333,2.35,336,3.41,339,1.689,341,2.338,342,2.35,343,1.128,344,2.527,346,1.388,347,2.843,349,1.388,351,3.047,354,2.397,356,2.698,358,1.901,361,3.351,364,2.706,367,1.388,369,1.252,370,3.094,371,2.003,372,1.55,373,2.003,374,1.901,375,1.901,377,1.465,378,1.644,380,2.184,381,1.872,382,2.184,383,1.317,547,4.06,668,1.872,978,4.445,1081,2.683,1082,5.278,1083,5.8,1084,5.278,1085,3.117,1086,3.117,1087,3.117,1088,3.117,1089,3.117,1090,3.117,1091,2.683,1092,3.152,1093,3.117,1094,3.117,1095,3.117,1096,3.117,1097,3.117,1098,3.117,1099,3.117,1100,3.117,1101,3.117,1102,3.117,1103,3.117,1104,3.117,1105,3.117,1106,3.117,1107,3.117,1108,3.117]],["title/classes/UserPagination.html",[30,0.133,737,2.643]],["body/classes/UserPagination.html",[3,0.22,4,0.195,5,0.17,7,0.411,11,0.018,12,0.796,15,0.38,29,0.28,30,0.207,44,0.011,45,0.014,46,0.011,79,1.279,102,0.866,131,1.85,328,1.324,330,1.688,339,1.47,343,1.883,726,3.224,727,3.539,728,5.849,729,5.227,730,5.849,732,5.047,735,3.96,736,3.539,737,4.109,738,4.51,739,5.047,740,5.047,741,5.047,742,5.047,743,5.047,744,5.047,745,5.047,746,5.047,1109,4.6,1110,4.6,1111,4.6]],["title/interfaces/UserStats.html",[1112,2.643,1113,2.643]],["body/interfaces/UserStats.html",[3,0.254,4,0.225,5,0.197,7,0.475,11,0.018,15,0.345,29,0.254,44,0.012,45,0.015,46,0.012,102,0.85,330,1.846,343,1.864,720,3.378,1112,3.726,1113,4.494,1114,5.316,1115,4.577,1116,5.5,1117,5.5,1118,5.316]],["title/classes/Users.html",[30,0.133,79,0.747]],["body/classes/Users.html",[3,0.105,4,0.093,5,0.081,7,0.308,8,0.992,10,2.19,11,0.018,12,0.897,14,0.63,15,0.403,29,0.105,30,0.077,36,1.478,44,0.005,45,0.008,46,0.005,79,1.105,83,1.464,92,0.477,94,0.925,102,0.91,107,2.377,124,2.402,131,1.398,142,2.428,156,1.504,191,2.201,285,0.925,297,1.684,327,1.8,328,0.63,330,0.992,332,1.897,333,1.897,339,1.463,341,2.025,342,1.897,343,1.596,346,0.975,347,2.484,349,0.975,351,1.089,356,2.69,359,3.079,364,2.344,367,0.975,369,0.879,370,1.029,371,1.534,373,1.534,374,1.456,375,1.456,376,2.549,378,1.155,380,1.534,381,1.315,383,0.925,392,2.842,395,4.158,396,3.155,405,3.277,407,1.684,409,1.885,412,1.684,415,2.774,417,1.23,420,3.667,427,1.23,434,1.315,462,2.692,591,3.121,609,1.885,613,2.966,668,1.315,698,1.684,720,2.692,759,1.415,848,1.885,940,1.684,944,3.716,967,1.885,978,3.716,980,2.966,1007,1.885,1063,1.885,1091,1.885,1092,2.414,1116,3.277,1117,3.277,1119,1.885,1120,4.259,1121,3.277,1122,4.259,1123,3.277,1124,3.277,1125,4.259,1126,4.259,1127,4.259,1128,4.259,1129,4.259,1130,2.189,1131,4.259,1132,2.189,1133,3.445,1134,2.189,1135,2.189,1136,2.189,1137,2.189,1138,2.189,1139,2.189,1140,2.189,1141,2.189,1142,2.189,1143,3.445,1144,2.189,1145,2.189,1146,2.189,1147,2.189,1148,2.189,1149,2.189,1150,2.189,1151,2.189,1152,2.189,1153,2.189,1154,2.189,1155,2.189,1156,2.189,1157,2.189,1158,2.189,1159,2.189,1160,2.189,1161,2.189,1162,2.189,1163,2.189,1164,2.189,1165,2.189,1166,2.189,1167,2.189,1168,2.189,1169,2.189,1170,3.445,1171,2.189,1172,4.259,1173,2.189,1174,2.189,1175,2.189,1176,2.189,1177,2.189,1178,2.189,1179,2.189,1180,2.189,1181,2.189,1182,1.885,1183,2.189,1184,2.189,1185,2.189,1186,1.885,1187,2.189,1188,2.189,1189,2.189,1190,2.189,1191,2.189,1192,2.189]],["title/controllers/UsersController.html",[0,1.373,966,2.266]],["body/controllers/UsersController.html",[0,1.27,2,0.567,3,0.078,4,0.069,5,0.129,7,0.363,8,0.783,10,1.793,11,0.018,12,0.734,14,1.997,15,0.409,16,3.137,17,2.713,18,0.918,19,0.294,20,0.691,21,0.918,22,0.862,25,0.768,26,1.407,29,0.078,30,0.058,32,2.117,36,2.421,38,3.719,41,3.34,42,1.257,43,1.407,44,0.004,45,0.006,46,0.004,79,1.383,80,0.691,83,0.714,92,0.356,94,1.149,102,0.602,108,1.407,116,2.285,131,1.491,136,0.981,138,1.634,139,2.603,140,2.091,142,2.442,149,1.407,151,4.073,154,2.063,155,1.968,156,1.178,157,2.374,161,0.624,163,1.909,169,1.434,179,1.841,180,2.096,181,0.918,192,2.713,195,1.056,196,0.768,203,2.324,209,2.661,230,0.918,245,0.691,247,1.736,260,2.285,263,1.905,271,1.056,283,0.813,285,2.06,319,1.145,343,1.692,392,1.912,417,1.527,427,1.96,432,2.091,434,2.443,462,0.728,463,0.918,464,2.537,465,1.056,466,0.918,467,1.056,483,2.851,513,2.685,532,1.257,591,4.005,631,3.975,849,3.502,956,1.056,963,1.257,965,1.407,966,1.633,969,1.407,997,0.981,1018,1.257,1092,1.145,1121,2.685,1123,2.685,1124,3.75,1193,1.407,1194,2.718,1195,2.718,1196,2.34,1197,2.34,1198,2.34,1199,2.34,1200,2.718,1201,2.718,1202,2.718,1203,2.718,1204,2.34,1205,2.718,1206,1.407,1207,1.634,1208,4.068,1209,4.068,1210,3.005,1211,2.718,1212,3.005,1213,4.068,1214,1.407,1215,1.634,1216,1.634,1217,4.068,1218,3.005,1219,1.634,1220,1.634,1221,1.634,1222,1.634,1223,1.634,1224,1.634,1225,4.068,1226,4.068,1227,3.502,1228,3.502,1229,2.34,1230,1.634,1231,1.634,1232,1.634,1233,4.068,1234,1.634,1235,1.634,1236,1.634,1237,2.718,1238,3.49,1239,1.634,1240,1.634,1241,1.634,1242,1.634,1243,1.634,1244,1.634,1245,3.49,1246,1.634,1247,5.411,1248,1.634,1249,1.634,1250,2.34,1251,2.718,1252,1.407,1253,1.634,1254,1.634,1255,1.634,1256,1.634,1257,1.634,1258,1.634,1259,1.634,1260,2.34,1261,1.634,1262,1.634,1263,1.407,1264,1.145,1265,1.257,1266,1.407,1267,1.257,1268,2.718,1269,1.634,1270,1.407,1271,1.407,1272,1.634,1273,1.634,1274,1.634,1275,1.634,1276,1.634,1277,1.634,1278,1.407,1279,1.634,1280,1.634,1281,1.634,1282,1.634,1283,1.634,1284,1.634,1285,1.634,1286,1.634,1287,1.634,1288,1.634,1289,1.634,1290,1.634,1291,1.634,1292,1.634,1293,1.634,1294,1.407,1295,1.634,1296,1.634,1297,1.634,1298,1.634,1299,1.634,1300,1.634,1301,1.634,1302,1.634,1303,1.634,1304,1.634,1305,1.634,1306,1.634,1307,1.634,1308,1.634,1309,1.634,1310,1.634,1311,1.634,1312,1.634,1313,1.634,1314,1.634,1315,1.634,1316,1.634,1317,2.34,1318,1.634]],["title/modules/UsersModule.html",[47,1.248,65,2.266]],["body/modules/UsersModule.html",[2,1.989,3,0.212,4,0.188,5,0.164,11,0.018,15,0.484,19,0.798,29,0.212,30,0.157,44,0.01,45,0.013,46,0.01,47,2.1,49,1.977,50,1.876,51,2.208,52,2.208,53,1.977,54,3.156,55,3.156,60,4.27,65,4.448,66,2.85,67,2.208,68,2.208,70,3.024,74,2.343,76,1.616,77,3.823,79,0.88,80,1.876,83,1.504,84,1.977,142,2.302,230,2.494,247,3.761,339,1.437,494,3.823,719,2.667,720,2.552,721,2.869,963,3.416,966,3.812,1319,3.823,1320,3.823,1321,3.823,1322,4.44,1323,4.44,1324,4.44]],["title/injectables/UsersService.html",[127,0.747,247,1.876]],["body/injectables/UsersService.html",[3,0.056,4,0.049,5,0.043,7,0.104,8,0.584,11,0.018,12,0.666,14,1.863,15,0.399,19,0.209,25,0.954,29,0.056,30,0.041,32,1.734,36,2.374,44,0.003,45,0.005,46,0.005,76,0.423,79,1.32,80,0.491,83,1.276,84,0.517,92,0.443,94,2.443,102,0.666,107,0.444,112,1.625,116,1.823,127,0.402,128,0.444,131,1.389,138,1.303,139,2.815,142,2.276,154,1.873,155,1.787,156,1.07,157,2.599,158,1.312,161,2.166,163,2.528,168,1.312,169,1.945,175,3.041,181,1.14,188,1.562,191,0.985,203,2.117,209,2.322,230,0.652,239,1.748,240,1.748,241,1.748,242,1.748,243,1.423,245,0.858,247,1.01,249,2.081,250,3.536,259,1.562,260,2.451,261,1.312,271,1.312,281,0.697,282,1.423,283,2.016,284,0.893,285,2.686,313,2.794,314,1.748,315,3.173,319,2.274,324,1.625,339,0.291,341,1.126,343,1.731,392,3.016,415,0.577,417,1.52,423,1.748,427,1.14,434,2.214,437,0.893,442,2.671,459,0.577,460,2.451,462,1.445,463,0.652,499,1.562,503,1.896,508,1.423,510,3.271,513,3.739,514,0.814,515,0.893,531,0.893,574,1.312,589,1.423,591,3.58,604,2.329,623,2.496,649,2.081,651,0.999,653,0.999,655,2.794,719,0.697,720,1.205,721,0.75,772,1.562,773,1.423,775,2.841,776,1.312,807,2.329,808,1.748,809,1.748,810,0.814,824,0.999,825,2.329,826,2.329,835,1.748,842,0.999,843,0.999,847,1.562,871,0.999,873,2.329,966,1.22,993,1.748,1019,0.999,1021,0.893,1057,0.999,1113,3.058,1116,0.893,1117,0.893,1121,3.562,1123,3.562,1124,1.562,1182,3.757,1186,1.748,1196,1.748,1197,1.748,1198,1.748,1199,1.748,1204,1.748,1206,1.748,1210,1.748,1212,2.794,1214,1.748,1218,1.748,1227,0.999,1229,2.794,1252,1.748,1260,0.999,1263,0.999,1264,0.814,1265,2.496,1266,0.999,1267,1.562,1278,1.748,1325,0.999,1326,2.03,1327,2.03,1328,2.03,1329,2.03,1330,1.161,1331,3.686,1332,2.705,1333,1.161,1334,2.03,1335,3.686,1336,1.161,1337,2.705,1338,2.03,1339,3.245,1340,1.161,1341,1.161,1342,2.03,1343,2.03,1344,1.161,1345,4.364,1346,2.03,1347,1.161,1348,2.03,1349,1.161,1350,2.03,1351,1.161,1352,2.705,1353,2.03,1354,4.053,1355,1.161,1356,3.245,1357,1.161,1358,2.705,1359,1.161,1360,1.161,1361,2.03,1362,2.03,1363,2.03,1364,2.03,1365,2.03,1366,1.161,1367,1.161,1368,1.161,1369,2.03,1370,3.686,1371,2.705,1372,1.161,1373,1.161,1374,1.161,1375,1.161,1376,1.161,1377,1.161,1378,1.161,1379,1.161,1380,1.161,1381,1.161,1382,2.03,1383,1.161,1384,1.161,1385,1.161,1386,1.161,1387,1.161,1388,1.161,1389,1.161,1390,1.161,1391,1.161,1392,1.161,1393,1.161,1394,2.03,1395,1.161,1396,1.161,1397,1.161,1398,1.161,1399,1.161,1400,2.03,1401,2.03,1402,1.161,1403,2.03,1404,2.705,1405,1.161,1406,2.705,1407,1.161,1408,2.705,1409,1.161,1410,1.161,1411,2.03,1412,2.03,1413,1.161,1414,1.161,1415,1.161,1416,1.161,1417,1.161,1418,2.705,1419,1.161,1420,2.705,1421,1.161,1422,2.03,1423,1.161,1424,2.03,1425,1.161,1426,1.161,1427,2.03,1428,2.705,1429,2.03,1430,2.03,1431,1.161,1432,1.161,1433,1.161,1434,1.161,1435,1.161,1436,2.03,1437,1.161,1438,1.161,1439,1.161,1440,1.161,1441,1.161,1442,1.161,1443,1.161,1444,1.161,1445,1.161,1446,1.161,1447,1.161,1448,1.161,1449,1.161,1450,1.161,1451,1.161,1452,0.999,1453,1.161,1454,1.161,1455,1.161,1456,1.161,1457,1.161,1458,1.161,1459,1.161,1460,1.161,1461,2.03,1462,1.161,1463,1.161,1464,1.161,1465,1.161,1466,1.161,1467,1.161,1468,1.161,1469,2.03,1470,1.161,1471,1.161,1472,2.705,1473,1.161,1474,1.161,1475,1.161,1476,1.161,1477,1.161,1478,1.161,1479,1.161,1480,1.161,1481,1.161,1482,1.161,1483,1.161,1484,1.161,1485,1.161,1486,1.161,1487,1.161,1488,1.161,1489,2.03,1490,2.03,1491,1.161,1492,1.161,1493,1.161,1494,1.161,1495,1.161,1496,1.161,1497,1.161]],["title/classes/authDto.html",[30,0.133,1498,2.643]],["body/classes/authDto.html",[3,0.255,4,0.226,5,0.197,7,0.476,11,0.018,12,0.793,29,0.307,30,0.227,44,0.012,45,0.015,46,0.012,102,0.793,131,1.903,300,5.505,302,4.101,305,5.505,308,4.101,328,1.535,330,1.849,1498,4.502,1499,4.101,1500,5.331,1501,5.331,1502,3.736]],["title/classes/authDtoFull.html",[30,0.133,1502,2.643]],["body/classes/authDtoFull.html",[3,0.245,4,0.217,5,0.19,7,0.458,11,0.018,12,0.872,29,0.3,30,0.222,44,0.012,45,0.015,46,0.012,102,0.872,131,1.915,300,5.434,302,5.216,305,5.434,308,5.216,328,1.477,330,1.807,1498,3.596,1499,3.947,1502,4.398,1503,5.131,1504,5.131,1505,5.131,1506,5.131]],["title/coverage.html",[1507,3.956]],["body/coverage.html",[0,2.437,1,2.132,5,0.113,6,2.619,11,0.018,20,1.286,23,1.827,25,1.43,27,1.827,30,0.263,44,0.007,45,0.01,46,0.007,53,1.355,69,3.4,79,0.603,81,1.056,83,0.799,85,2.132,95,2.34,97,2.34,102,0.375,127,1.432,129,2.619,134,1.966,135,2.619,142,1.222,146,2.132,161,1.163,197,2.132,217,1.966,218,1.966,219,1.827,225,1.827,238,2.619,247,1.513,327,1.286,329,2.619,339,0.763,341,1.056,358,1.286,361,1.513,364,1.222,391,2.619,415,3.836,424,2.132,425,2.619,460,1.709,464,1.709,466,1.709,490,1.605,496,2.619,543,2.132,544,2.619,545,2.619,553,2.619,554,2.619,560,3.4,561,3.4,564,2.619,565,2.619,583,2.619,589,2.132,592,2.619,594,2.619,605,2.619,615,2.132,616,2.619,625,1.827,639,2.619,657,2.619,673,2.619,716,2.619,720,1.355,726,2.132,727,3.4,737,2.132,747,2.619,763,1.966,764,2.619,765,2.619,766,1.709,771,2.619,794,2.132,795,2.619,799,1.827,823,2.619,940,2.34,941,2.619,956,1.966,958,2.619,966,1.827,984,2.34,994,2.619,1011,2.132,1012,2.619,1044,2.619,1069,2.619,1081,2.619,1112,2.132,1113,2.132,1115,2.619,1119,2.619,1193,2.619,1317,2.619,1325,2.619,1498,2.132,1499,3.4,1502,2.132,1507,2.34,1508,2.619,1509,3.042,1510,3.042,1511,4.42,1512,6.332,1513,6.931,1514,3.042,1515,6.533,1516,3.042,1517,2.619,1518,5.206,1519,5.206,1520,4.42,1521,3.042,1522,6.069,1523,3.042,1524,5.206,1525,3.042,1526,3.042,1527,3.042,1528,4.42,1529,4.42,1530,3.042,1531,4.42,1532,4.42,1533,3.4,1534,2.619,1535,4.42,1536,4.42,1537,3.042,1538,3.042,1539,3.042,1540,3.042,1541,3.042,1542,3.042,1543,3.805,1544,3.042,1545,3.042,1546,3.042,1547,3.042,1548,3.042,1549,3.042]],["title/dependencies.html",[50,1.916,1550,3.152]],["body/dependencies.html",[11,0.018,19,0.905,44,0.012,45,0.014,46,0.012,50,2.128,76,1.833,90,4.336,92,1.352,179,2.657,193,3.874,196,2.368,224,3.874,282,3.53,573,4.713,983,4.336,1264,3.53,1265,3.874,1267,3.874,1270,4.336,1271,5.342,1551,6.725,1552,5.036,1553,5.036,1554,6.205,1555,5.036,1556,5.036,1557,5.036,1558,5.036,1559,5.036,1560,5.036,1561,5.036,1562,5.036,1563,5.036,1564,5.036,1565,5.036,1566,5.036,1567,5.036,1568,5.036,1569,5.036,1570,3.53,1571,4.336,1572,5.036,1573,5.036]],["title/miscellaneous/enumerations.html",[1574,1.893,1575,3.904]],["body/miscellaneous/enumerations.html",[7,0.475,11,0.018,44,0.012,45,0.015,46,0.012,324,3.852,327,2.71,339,1.608,341,2.225,364,2.576,462,2.856,997,4.557,1018,5.297,1083,5.521,1574,3.193,1575,4.577,1576,5.316,1577,6.413,1578,5.316,1579,5.316,1580,6.413,1581,5.316,1582,5.316,1583,4.577]],["title/miscellaneous/functions.html",[1574,1.893,1584,3.904]],["body/miscellaneous/functions.html",[7,0.531,11,0.016,44,0.014,45,0.016,46,0.014,53,3.213,1533,4.572,1574,3.57,1584,5.117,1585,5.117]],["title/index.html",[7,0.282,1586,3.152,1587,3.152]],["body/index.html",[4,0.147,5,0.128,11,0.018,44,0.008,45,0.011,46,0.008,50,2.05,103,2.984,116,3.405,138,1.392,140,2.667,160,2.667,161,1.325,168,3.135,181,1.947,243,3.922,260,3.144,263,2.43,319,2.43,339,1.403,437,2.667,454,2.667,502,4.305,729,2.667,810,2.43,834,2.984,1024,4.818,1228,2.984,1264,3.922,1294,2.984,1452,2.984,1507,2.667,1508,4.818,1570,4.757,1583,2.984,1588,3.467,1589,3.467,1590,4.852,1591,3.467,1592,3.467,1593,3.467,1594,3.467,1595,3.467,1596,3.467,1597,3.467,1598,4.177,1599,3.467,1600,3.467,1601,3.467,1602,3.467,1603,4.852,1604,3.467,1605,3.467,1606,3.467,1607,3.467,1608,3.467,1609,3.467,1610,4.852,1611,6.788,1612,3.467,1613,3.467,1614,4.852,1615,3.467,1616,4.852,1617,3.467,1618,3.467,1619,3.467,1620,3.467,1621,3.467,1622,4.852,1623,3.467,1624,3.467,1625,3.467,1626,6.788,1627,3.467,1628,3.467,1629,3.467,1630,3.467,1631,3.467,1632,3.467,1633,3.467,1634,3.467,1635,6.612,1636,3.467,1637,3.467,1638,4.852,1639,3.467,1640,3.467,1641,3.467,1642,3.467,1643,4.852,1644,4.852,1645,3.467,1646,3.467,1647,3.467,1648,3.467,1649,5.693,1650,3.467,1651,3.467,1652,3.467,1653,3.467,1654,3.467,1655,3.467,1656,3.467,1657,3.467,1658,5.597,1659,4.852,1660,3.467,1661,4.852,1662,3.467,1663,3.467,1664,3.467,1665,3.467,1666,3.467,1667,3.467,1668,3.467,1669,3.467,1670,3.467,1671,3.467,1672,3.467,1673,3.467,1674,3.467,1675,3.467,1676,3.467,1677,3.467,1678,3.467,1679,3.467,1680,3.467,1681,3.467,1682,5.597,1683,3.467,1684,3.467,1685,4.852,1686,3.467,1687,3.467,1688,3.467,1689,4.818,1690,3.467,1691,3.467,1692,3.467,1693,3.467,1694,4.852,1695,4.852,1696,2.984,1697,3.467,1698,3.467,1699,3.467,1700,3.467,1701,3.467,1702,3.467,1703,3.467,1704,3.467,1705,3.467,1706,3.467]],["title/modules.html",[49,2.29]],["body/modules.html",[11,0.015,44,0.012,45,0.015,46,0.012,48,3.778,49,2.401,59,3.484,60,3.238,61,3.238,62,3.484,63,3.484,64,3.484,65,3.238,1689,6.547,1707,7.605,1708,7.605,1709,7.605]],["title/overview.html",[1710,4.427]],["body/overview.html",[2,1.265,11,0.018,25,3.235,27,3.453,44,0.008,45,0.012,46,0.008,47,1.206,48,5.303,49,1.623,50,1.54,51,1.813,52,1.813,53,1.623,54,1.813,55,1.813,56,3.138,57,3.138,58,3.138,59,4.803,60,4.275,61,4.035,62,4.34,63,4.34,64,4.34,65,4.275,66,2.498,67,1.813,68,1.813,85,4.823,128,1.393,213,3.138,214,3.138,216,3.138,217,3.714,218,3.714,219,3.453,247,3.423,328,1.049,417,2.822,460,3.866,487,3.138,488,3.138,489,3.138,490,3.7,625,4.134,633,3.138,634,3.138,635,3.138,712,3.138,713,3.138,714,3.138,799,4.134,817,3.138,818,3.138,819,3.138,956,2.355,1038,3.138,1040,3.138,1112,2.555,1319,3.138,1320,3.138,1321,3.138,1710,3.138,1711,5.023,1712,3.645,1713,3.645]],["title/miscellaneous/variables.html",[1574,1.893,1714,3.904]],["body/miscellaneous/variables.html",[7,0.448,11,0.018,44,0.012,45,0.014,46,0.012,69,3.854,75,4.313,95,4.758,96,4.313,97,4.758,102,0.828,131,1.256,157,2.117,225,3.715,462,2.231,466,4.043,984,4.758,997,4.403,1092,5.137,1517,4.313,1533,3.854,1534,5.324,1543,4.313,1574,3.009,1585,4.313,1714,4.313,1715,6.185,1716,5.01,1717,6.185,1718,5.01,1719,5.01,1720,5.01,1721,5.01,1722,5.01,1723,5.01]],["title/additional-documentation/swagger-api-docs.html",[150,1.533,1250,2.043,1570,1.663,1649,2.043,1724,2.373]],["body/additional-documentation/swagger-api-docs.html",[11,0.018,44,0.012,45,0.015,46,0.012,94,2.253,104,4.101,124,2.651,150,4.151,161,2.037,589,3.736,1570,4.832,1571,6.161,1598,4.59,1696,4.59,1725,5.331,1726,5.331,1727,5.331,1728,5.331,1729,5.331,1730,5.331,1731,5.331,1732,5.331,1733,5.331,1734,5.331,1735,5.331,1736,5.331,1737,5.331,1738,5.331,1739,5.331,1740,5.331,1741,5.331]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["0",{"_index":415,"title":{},"body":{"classes/Company.html":{},"injectables/CompanyService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"classes/TagStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1511,"title":{},"body":{"coverage.html":{}}}],["0/25",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1520,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":417,"title":{},"body":{"classes/Company.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1251,"title":{},"body":{"controllers/UsersController.html":{}}}],["100",{"_index":1317,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["12",{"_index":810,"title":{},"body":{"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["12/18",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1712,"title":{},"body":{"overview.html":{}}}],["14/21",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["19",{"_index":1713,"title":{},"body":{"overview.html":{}}}],["2.3.2",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":834,"title":{},"body":{"injectables/RockstarService.html":{},"index.html":{}}}],["3",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["3.0.2",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"classes/Company.html":{},"classes/Users.html":{}}}],["5.0.1",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["5m",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["6.6.3",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["69",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.1.5",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1544,"title":{},"body":{"coverage.html":{}}}],["7d",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":1711,"title":{},"body":{"overview.html":{}}}],["8.5.1",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["9/13",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["9650594ab728",{"_index":1680,"title":{},"body":{"index.html":{}}}],["access",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["access_key",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access_secret",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access_token",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}}}],["accesstokenexpire",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}}}],["accesstokenexpiredate",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenexpiredate.setminutes(accesstokenexpiredate.getminutes",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["act",{"_index":1171,"title":{},"body":{"classes/Users.html":{}}}],["add",{"_index":437,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["added",{"_index":1021,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["adding",{"_index":1213,"title":{},"body":{"controllers/UsersController.html":{}}}],["additional",{"_index":1724,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{}}],["admin",{"_index":1018,"title":{},"body":{"controllers/TagController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["affect",{"_index":1362,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowed",{"_index":961,"title":{},"body":{"guards/RolesGuard.html":{}}}],["along",{"_index":472,"title":{},"body":{"controllers/CompanyController.html":{}}}],["already",{"_index":915,"title":{},"body":{"injectables/RockstarService.html":{}}}],["amazing",{"_index":1700,"title":{},"body":{"index.html":{}}}],["andwhere(\"employeeemployeeid",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["andwhere(\"extract(month",{"_index":891,"title":{},"body":{"injectables/RockstarService.html":{}}}],["another",{"_index":435,"title":{},"body":{"controllers/CompanyController.html":{}}}],["api",{"_index":150,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["app",{"_index":1633,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appended",{"_index":458,"title":{},"body":{"controllers/CompanyController.html":{}}}],["applications",{"_index":1595,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":48,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":27,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":510,"title":{},"body":{"injectables/CompanyService.html":{},"controllers/NotificationsController.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["asc",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["assembles",{"_index":930,"title":{},"body":{"injectables/RockstarService.html":{}}}],["assets",{"_index":1668,"title":{},"body":{"index.html":{}}}],["assets/swagger",{"_index":1730,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["associated",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["async",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["atag.tagid",{"_index":902,"title":{},"body":{"injectables/RockstarService.html":{}}}],["attaches",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TagController.html":{}}}],["auth.controller",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":561,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.refresh.guard",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.refresh.guard.ts",{"_index":564,"title":{},"body":{"injectables/JwtAuthRefreshGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["auth/local",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/login",{"_index":1195,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":134,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdto",{"_index":1498,"title":{"classes/authDto.html":{}},"body":{"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{}}}],["authdtofull",{"_index":1502,"title":{"classes/authDtoFull.html":{}},"body":{"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{}}}],["authenticate",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authentication",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["authguard",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/LocalAuthGuard.html":{},"controllers/UsersController.html":{}}}],["authguard('jwt",{"_index":563,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{}}}],["authguard('local",{"_index":593,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":59,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorize",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["authservice",{"_index":25,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1672,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":457,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{}}}],["await",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["back",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["backend",{"_index":1294,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["backend_database",{"_index":1623,"title":{},"body":{"index.html":{}}}],["backendthe",{"_index":1652,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1701,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1367,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception({error",{"_index":1400,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":813,"title":{},"body":{"controllers/RockstarController.html":{}}}],["bcrypt",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":1426,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(edits.password",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(emp.password",{"_index":1449,"title":{},"body":{"injectables/UsersService.html":{}}}],["before",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["beforeinsert",{"_index":405,"title":{},"body":{"classes/Company.html":{},"classes/Tag.html":{},"classes/Users.html":{}}}],["begin",{"_index":1726,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["being",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["belong",{"_index":1025,"title":{},"body":{"controllers/TagController.html":{}}}],["belongs",{"_index":1062,"title":{},"body":{"injectables/TagService.html":{}}}],["between",{"_index":1683,"title":{},"body":{"index.html":{}}}],["body",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":980,"title":{},"body":{"guards/RolesGuard.html":{},"classes/Users.html":{}}}],["boolean(createuserdto.ismanager",{"_index":1409,"title":{},"body":{"injectables/UsersService.html":{}}}],["boolean(emp.ismanager",{"_index":1443,"title":{},"body":{"injectables/UsersService.html":{}}}],["bootstrap",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["bracket",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["bracket.andwhere(\"user.firstname",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["bracket.andwhere(\"user.lastname",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["brackets",{"_index":1371,"title":{},"body":{"injectables/UsersService.html":{}}}],["branch",{"_index":1657,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1709,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1707,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1591,"title":{},"body":{"index.html":{}}}],["c1",{"_index":1621,"title":{},"body":{"index.html":{}}}],["call",{"_index":1727,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["called",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["calls",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":970,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":974,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch(error",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{}}}],["change",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["changes",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changes['email",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["changes['password",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["check",{"_index":1061,"title":{},"body":{"injectables/TagService.html":{}}}],["checks",{"_index":913,"title":{},"body":{"injectables/RockstarService.html":{}}}],["cid",{"_index":1335,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":30,"title":{"classes/Comment.html":{},"classes/Company.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"classes/Users.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{}}}],["classes",{"_index":328,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"classes/Users.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_companymodule",{"_index":487,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_companymodule_exports",{"_index":488,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_companymodule_providers",{"_index":489,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":633,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_exports",{"_index":634,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_providers",{"_index":635,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_recognitionmodule",{"_index":712,"title":{},"body":{"modules/RecognitionModule.html":{},"overview.html":{}}}],["cluster_recognitionmodule_exports",{"_index":713,"title":{},"body":{"modules/RecognitionModule.html":{},"overview.html":{}}}],["cluster_recognitionmodule_providers",{"_index":714,"title":{},"body":{"modules/RecognitionModule.html":{},"overview.html":{}}}],["cluster_rockstarmodule",{"_index":817,"title":{},"body":{"modules/RockstarModule.html":{},"overview.html":{}}}],["cluster_rockstarmodule_exports",{"_index":819,"title":{},"body":{"modules/RockstarModule.html":{},"overview.html":{}}}],["cluster_rockstarmodule_providers",{"_index":818,"title":{},"body":{"modules/RockstarModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":1038,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_tagmodule_exports",{"_index":1040,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_tagmodule_providers",{"_index":1039,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_usersmodule",{"_index":1319,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1320,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1322,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1321,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1601,"title":{},"body":{"index.html":{}}}],["collected",{"_index":455,"title":{},"body":{"controllers/CompanyController.html":{}}}],["column",{"_index":356,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["column(\"timestamp",{"_index":1178,"title":{},"body":{"classes/Users.html":{}}}],["column('timestamp",{"_index":1155,"title":{},"body":{"classes/Users.html":{}}}],["column({default",{"_index":944,"title":{},"body":{"classes/RockstarStats.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["column({nullable",{"_index":1143,"title":{},"body":{"classes/Users.html":{}}}],["column({type",{"_index":1091,"title":{},"body":{"classes/UserNotification.html":{},"classes/Users.html":{}}}],["comany",{"_index":441,"title":{},"body":{"controllers/CompanyController.html":{}}}],["comment",{"_index":327,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/UserNotification.html":{},"classes/Users.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["comment.entity",{"_index":668,"title":{},"body":{"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["comment.notifications",{"_index":1107,"title":{},"body":{"classes/UserNotification.html":{}}}],["comment.reactions",{"_index":671,"title":{},"body":{"classes/Reaction.html":{}}}],["comment.recognition",{"_index":706,"title":{},"body":{"classes/Recognition.html":{}}}],["comment.reports",{"_index":761,"title":{},"body":{"classes/Report.html":{}}}],["comment.rockstar",{"_index":790,"title":{},"body":{"classes/Rockstar.html":{}}}],["comment=>comment.deletedby",{"_index":1190,"title":{},"body":{"classes/Users.html":{}}}],["commentfrom",{"_index":884,"title":{},"body":{"injectables/RockstarService.html":{}}}],["commentid",{"_index":331,"title":{},"body":{"classes/Comment.html":{}}}],["commentreactions').leftjoinandselect('commentreactions.employeefrom",{"_index":886,"title":{},"body":{"injectables/RockstarService.html":{}}}],["commentreactionsfrom",{"_index":887,"title":{},"body":{"injectables/RockstarService.html":{}}}],["comments",{"_index":674,"title":{},"body":{"classes/Recognition.html":{},"classes/Rockstar.html":{}}}],["comments').leftjoinandselect('reactions.employeefrom",{"_index":881,"title":{},"body":{"injectables/RockstarService.html":{}}}],["commentsdeleted",{"_index":1120,"title":{},"body":{"classes/Users.html":{}}}],["common/dto/create",{"_index":838,"title":{},"body":{"injectables/RockstarService.html":{}}}],["common/dto/edit",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["common/dto/rockstar",{"_index":802,"title":{},"body":{"controllers/RockstarController.html":{},"injectables/RockstarService.html":{}}}],["common/entity/comment.entity",{"_index":723,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["common/entity/company.entity",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["common/entity/login.entity",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["common/entity/notification.entity",{"_index":624,"title":{},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/RecognitionModule.html":{}}}],["common/entity/reaction.entity",{"_index":724,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["common/entity/recognition.entity",{"_index":719,"title":{},"body":{"modules/RecognitionModule.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["common/entity/report.entity",{"_index":722,"title":{},"body":{"modules/RecognitionModule.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{}}}],["common/entity/rockstar.entity",{"_index":801,"title":{},"body":{"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{}}}],["common/entity/rockstarstats.entity",{"_index":822,"title":{},"body":{"modules/RockstarModule.html":{},"injectables/RockstarService.html":{}}}],["common/entity/tag.entity",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{}}}],["common/entity/tagstats.entity",{"_index":721,"title":{},"body":{"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["common/entity/users.entity",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/NotificationsService.html":{},"modules/RecognitionModule.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["common/enum/role.enum",{"_index":463,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["common/interface/userstats.interface",{"_index":1374,"title":{},"body":{"injectables/UsersService.html":{}}}],["comp",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["comp.orwhere(\"user.firstname",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["comp.orwhere(new",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["comp_id",{"_index":1358,"title":{},"body":{"injectables/UsersService.html":{}}}],["companies",{"_index":410,"title":{},"body":{"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["companies.length",{"_index":414,"title":{},"body":{"classes/Company.html":{}}}],["companies[0].companyid",{"_index":416,"title":{},"body":{"classes/Company.html":{}}}],["company",{"_index":83,"title":{"classes/Company.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"controllers/NotificationsController.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["company's",{"_index":473,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/TagController.html":{}}}],["company.companyid",{"_index":521,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company.controller",{"_index":492,"title":{},"body":{"modules/CompanyModule.html":{}}}],["company.entity",{"_index":698,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{},"classes/Users.html":{}}}],["company.name",{"_index":523,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company.recognitions",{"_index":527,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company.service",{"_index":461,"title":{},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{}}}],["company.tags",{"_index":533,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company.users",{"_index":525,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company/company.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["company/company.service",{"_index":1368,"title":{},"body":{"injectables/UsersService.html":{}}}],["company=>company.recognitions",{"_index":700,"title":{},"body":{"classes/Recognition.html":{}}}],["company=>company.tags",{"_index":1008,"title":{},"body":{"classes/Tag.html":{}}}],["company_id",{"_index":1245,"title":{},"body":{"controllers/UsersController.html":{}}}],["companycontroller",{"_index":424,"title":{"controllers/CompanyController.html":{}},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"coverage.html":{}}}],["companyid",{"_index":392,"title":{},"body":{"classes/Company.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["companyid:'desc",{"_index":413,"title":{},"body":{"classes/Company.html":{}}}],["companymodule",{"_index":60,"title":{"modules/CompanyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["companyname",{"_index":1212,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["companynames",{"_index":1209,"title":{},"body":{"controllers/UsersController.html":{}}}],["companyrepository",{"_index":503,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["companyservice",{"_index":460,"title":{"injectables/CompanyService.html":{}},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["companyservice,tagservice",{"_index":495,"title":{},"body":{"modules/CompanyModule.html":{}}}],["compid",{"_index":772,"title":{},"body":{"classes/Rockstar.html":{},"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["compodoc",{"_index":1658,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":1663,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1614,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["connecting",{"_index":1692,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1452,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["connection.createqueryrunner",{"_index":1454,"title":{},"body":{"injectables/UsersService.html":{}}}],["console",{"_index":1378,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(profilearray",{"_index":1396,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"injectables/CompanyService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["constants",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":595,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(companyrepository",{"_index":498,"title":{},"body":{"injectables/CompanyService.html":{}}}],["constructor(notificationrepository",{"_index":642,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["constructor(private",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{}}}],["constructor(reflector",{"_index":971,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(tagrepository",{"_index":1047,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(usersrepository",{"_index":824,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["contained",{"_index":1654,"title":{},"body":{"index.html":{}}}],["containing",{"_index":847,"title":{},"body":{"injectables/RockstarService.html":{},"controllers/TagController.html":{},"injectables/UsersService.html":{}}}],["contains",{"_index":456,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/TagController.html":{}}}],["context",{"_index":979,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":990,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":989,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":991,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('company",{"_index":468,"title":{},"body":{"controllers/CompanyController.html":{}}}],["controller('notifications",{"_index":627,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["controller('rockstar",{"_index":804,"title":{},"body":{"controllers/RockstarController.html":{}}}],["controller('tag",{"_index":1029,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('users",{"_index":965,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["core",{"_index":1020,"title":{},"body":{"controllers/TagController.html":{}}}],["correct",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["count(recognition.\"emptoemployeeid",{"_index":855,"title":{},"body":{"injectables/RockstarService.html":{}}}],["countreceived",{"_index":942,"title":{},"body":{"classes/RockstarStats.html":{},"classes/TagStats.html":{}}}],["countsent",{"_index":1070,"title":{},"body":{"classes/TagStats.html":{}}}],["coverage",{"_index":1507,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":434,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"controllers/TagController.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@request",{"_index":1035,"title":{},"body":{"controllers/TagController.html":{}}}],["create(req",{"_index":1014,"title":{},"body":{"controllers/TagController.html":{}}}],["createcompany",{"_index":426,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["createcompany(@body",{"_index":481,"title":{},"body":{"controllers/CompanyController.html":{}}}],["createcompany(createcompanydto",{"_index":431,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["createcompanydto",{"_index":436,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["createcompanydto.companyid",{"_index":522,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createcompanydto.name",{"_index":524,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createcompanydto.recognitions",{"_index":528,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createcompanydto.tags",{"_index":534,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createcompanydto.users",{"_index":526,"title":{},"body":{"injectables/CompanyService.html":{}}}],["created",{"_index":480,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["createdat",{"_index":332,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["createdatecolumn",{"_index":373,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["createdatecolumn({type",{"_index":346,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["createrecdto",{"_index":543,"title":{"classes/CreateRecDto.html":{}},"body":{"classes/CreateRecDto.html":{},"injectables/RockstarService.html":{},"coverage.html":{}}}],["creates",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{}}}],["createtag",{"_index":1045,"title":{},"body":{"injectables/TagService.html":{}}}],["createtag(companyid",{"_index":1049,"title":{},"body":{"injectables/TagService.html":{}}}],["createuser",{"_index":1196,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":1283,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":1206,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":1210,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto.email",{"_index":1425,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.employeeid",{"_index":1402,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.firstname",{"_index":1405,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.lastname",{"_index":1407,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.managerid",{"_index":1423,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.positiontitle",{"_index":1419,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.role",{"_index":1412,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusermultiple",{"_index":1197,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createusermultiple(@body",{"_index":1290,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusermultiple(employeemultiple",{"_index":1214,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuuserdto",{"_index":1208,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":1415,"title":{},"body":{"injectables/UsersService.html":{}}}],["creator_role",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["cs320",{"_index":1602,"title":{},"body":{"index.html":{}}}],["current",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotificationsController.html":{},"index.html":{}}}],["currently",{"_index":1685,"title":{},"body":{"index.html":{}}}],["currentpage",{"_index":742,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["currstat",{"_index":906,"title":{},"body":{"injectables/RockstarService.html":{}}}],["currstat.countreceived",{"_index":907,"title":{},"body":{"injectables/RockstarService.html":{}}}],["currstat.month",{"_index":909,"title":{},"body":{"injectables/RockstarService.html":{}}}],["currstat.tag",{"_index":908,"title":{},"body":{"injectables/RockstarService.html":{}}}],["currstat.year",{"_index":910,"title":{},"body":{"injectables/RockstarService.html":{}}}],["custom",{"_index":584,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["cut",{"_index":1620,"title":{},"body":{"index.html":{}}}],["d",{"_index":1666,"title":{},"body":{"index.html":{}}}],["data",{"_index":1301,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"controllers/NotificationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databuild",{"_index":1624,"title":{},"body":{"index.html":{}}}],["date",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"controllers/RockstarController.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["date(createuserdto.startdate",{"_index":1421,"title":{},"body":{"injectables/UsersService.html":{}}}],["date(emp.startdate",{"_index":1446,"title":{},"body":{"injectables/UsersService.html":{}}}],["date.getfullyear",{"_index":808,"title":{},"body":{"controllers/RockstarController.html":{},"injectables/UsersService.html":{}}}],["date.getmonth",{"_index":809,"title":{},"body":{"controllers/RockstarController.html":{},"injectables/UsersService.html":{}}}],["days",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["db",{"_index":532,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RockstarService.html":{},"controllers/UsersController.html":{}}}],["declarations",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{},"controllers/UsersController.html":{}}}],["deeplinking",{"_index":1735,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["default",{"_index":1092,"title":{},"body":{"classes/UserNotification.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}}}],["delete",{"_index":427,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':employeeid",{"_index":1279,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":484,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/TagController.html":{}}}],["delete(@param('id",{"_index":485,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{}}}],["delete(@request",{"_index":1032,"title":{},"body":{"controllers/TagController.html":{}}}],["delete(id",{"_index":438,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{}}}],["delete(req",{"_index":1022,"title":{},"body":{"controllers/TagController.html":{}}}],["deletecomp",{"_index":497,"title":{},"body":{"injectables/CompanyService.html":{}}}],["deletecomp(id",{"_index":505,"title":{},"body":{"injectables/CompanyService.html":{}}}],["deleted",{"_index":508,"title":{},"body":{"injectables/CompanyService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["deletedat",{"_index":333,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["deletedatecolumn",{"_index":375,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["deletedatecolumn({type",{"_index":349,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["deletedby",{"_index":334,"title":{},"body":{"classes/Comment.html":{},"classes/Recognition.html":{}}}],["deletenotification",{"_index":640,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["deletenotification(id",{"_index":645,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["deleteresult",{"_index":459,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["deletes",{"_index":507,"title":{},"body":{"injectables/CompanyService.html":{}}}],["deletetag",{"_index":1046,"title":{},"body":{"injectables/TagService.html":{}}}],["deletetag(companyid",{"_index":1051,"title":{},"body":{"injectables/TagService.html":{}}}],["dependencies",{"_index":50,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["desc",{"_index":863,"title":{},"body":{"injectables/RockstarService.html":{}}}],["description",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["detailed",{"_index":1660,"title":{},"body":{"index.html":{}}}],["details",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dev",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["development",{"_index":1634,"title":{},"body":{"index.html":{}}}],["direct",{"_index":1688,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1609,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1611,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1649,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{"index.html":{}}}],["documentation",{"_index":1508,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dom_id",{"_index":1734,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["don't",{"_index":1167,"title":{},"body":{"classes/Users.html":{}}}],["done",{"_index":977,"title":{},"body":{"guards/RolesGuard.html":{}}}],["down",{"_index":1615,"title":{},"body":{"index.html":{}}}],["duplicated",{"_index":1166,"title":{},"body":{"classes/Users.html":{}}}],["e2e",{"_index":1645,"title":{},"body":{"index.html":{}}}],["each",{"_index":900,"title":{},"body":{"injectables/RockstarService.html":{}}}],["editlogin",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["editlogin(@request",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["editlogin(req",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["editlogin(user",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["editlogindto",{"_index":146,"title":{"classes/EditLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/EditLoginDto.html":{},"coverage.html":{}}}],["edits",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["edits.email",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["edits.newdetails",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["edits.password",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["edituserdetails",{"_index":1198,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["edituserdetails(employeeid",{"_index":1219,"title":{},"body":{"controllers/UsersController.html":{}}}],["edituserdetails(requester",{"_index":1338,"title":{},"body":{"injectables/UsersService.html":{}}}],["efficient",{"_index":1592,"title":{},"body":{"index.html":{}}}],["email",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email:string",{"_index":1381,"title":{},"body":{"injectables/UsersService.html":{}}}],["emloyee",{"_index":896,"title":{},"body":{"injectables/RockstarService.html":{}}}],["emp",{"_index":651,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["emp.companyid",{"_index":652,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["emp.email",{"_index":1448,"title":{},"body":{"injectables/UsersService.html":{}}}],["emp.employeeid",{"_index":653,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["emp.firstname",{"_index":1441,"title":{},"body":{"injectables/UsersService.html":{}}}],["emp.lastname",{"_index":1442,"title":{},"body":{"injectables/UsersService.html":{}}}],["emp.managerid",{"_index":1447,"title":{},"body":{"injectables/UsersService.html":{}}}],["emp.positiontitle",{"_index":1445,"title":{},"body":{"injectables/UsersService.html":{}}}],["emp.role",{"_index":1444,"title":{},"body":{"injectables/UsersService.html":{}}}],["empfrom",{"_index":675,"title":{},"body":{"classes/Recognition.html":{},"injectables/RockstarService.html":{}}}],["empid",{"_index":649,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["employee",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"classes/Login.html":{},"injectables/RockstarService.html":{},"classes/TagStats.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["employee_id",{"_index":1238,"title":{},"body":{"controllers/UsersController.html":{}}}],["employeefrom",{"_index":335,"title":{},"body":{"classes/Comment.html":{},"classes/CreateRecDto.html":{},"classes/Reaction.html":{},"classes/Report.html":{}}}],["employeeid",{"_index":591,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RockstarService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["employeeid:'desc",{"_index":1175,"title":{},"body":{"classes/Users.html":{}}}],["employeemultiple",{"_index":1218,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["employeeto",{"_index":547,"title":{},"body":{"classes/CreateRecDto.html":{},"injectables/NotificationsService.html":{},"classes/UserNotification.html":{}}}],["empto",{"_index":676,"title":{},"body":{"classes/Recognition.html":{}}}],["empto').leftjoinandselect('rec.empfrom",{"_index":877,"title":{},"body":{"injectables/RockstarService.html":{}}}],["endpoint",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["endpoints",{"_index":805,"title":{},"body":{"controllers/RockstarController.html":{}}}],["entities",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":369,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["entity({name",{"_index":383,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["entity/login.entity",{"_index":559,"title":{},"body":{"classes/EditLoginDto.html":{}}}],["entity/recognition.entity",{"_index":735,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["entity/rockstar.entity",{"_index":769,"title":{},"body":{"classes/ReturnRockstarDto.html":{}}}],["entity/rockstarstats.entity",{"_index":770,"title":{},"body":{"classes/ReturnRockstarDto.html":{}}}],["entity/tagstats.entity",{"_index":1118,"title":{},"body":{"interfaces/UserStats.html":{}}}],["entity/users.entity",{"_index":736,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/ReturnRockstarDto.html":{},"classes/UserPagination.html":{}}}],["enum",{"_index":978,"title":{},"body":{"guards/RolesGuard.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["enum/notification",{"_index":1100,"title":{},"body":{"classes/UserNotification.html":{}}}],["enum/role.enum",{"_index":1161,"title":{},"body":{"classes/Users.html":{}}}],["enumerations",{"_index":1575,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.startswith('prod",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["environmental",{"_index":1687,"title":{},"body":{"index.html":{}}}],["example",{"_index":962,"title":{},"body":{"guards/RolesGuard.html":{}}}],["execute",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["executioncontext",{"_index":975,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":531,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["expiration",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["expire",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["explorer",{"_index":1678,"title":{},"body":{"index.html":{}}}],["export",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}}}],["exports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1271,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":562,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extract(month",{"_index":858,"title":{},"body":{"injectables/RockstarService.html":{}}}],["extract(year",{"_index":860,"title":{},"body":{"injectables/RockstarService.html":{}}}],["extractjwt",{"_index":572,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":578,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["failure",{"_index":1068,"title":{},"body":{"injectables/TagService.html":{}}}],["false",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{},"index.html":{}}}],["fileinterceptor",{"_index":1269,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall",{"_index":617,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["findall(@request",{"_index":629,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["findall(req",{"_index":620,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["findnotifications",{"_index":641,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["findnotifications(empid",{"_index":647,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["finds",{"_index":869,"title":{},"body":{"injectables/RockstarService.html":{}}}],["first",{"_index":738,"title":{},"body":{"classes/RecognitionPagination.html":{},"injectables/RockstarService.html":{},"classes/UserPagination.html":{}}}],["firstname",{"_index":1121,"title":{},"body":{"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["foreign",{"_index":1169,"title":{},"body":{"classes/Users.html":{}}}],["form",{"_index":1686,"title":{},"body":{"index.html":{}}}],["found",{"_index":1024,"title":{},"body":{"controllers/TagController.html":{},"index.html":{}}}],["fr",{"_index":1617,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1590,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1534,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":589,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["functional",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["functions",{"_index":1584,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["generate",{"_index":1661,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1670,"title":{},"body":{"index.html":{}}}],["generic",{"_index":1580,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["get(':id",{"_index":477,"title":{},"body":{"controllers/CompanyController.html":{}}}],["get('all",{"_index":470,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{}}}],["get('company/:comp_id",{"_index":1275,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('employeeid/:employ_id",{"_index":1272,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["get('search",{"_index":1304,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('stats/:employeeid",{"_index":1286,"title":{},"body":{"controllers/UsersController.html":{}}}],["getarrayofusers",{"_index":1326,"title":{},"body":{"injectables/UsersService.html":{}}}],["getarrayofusers(companyid",{"_index":1343,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcompany",{"_index":428,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["getcompanytags",{"_index":1013,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getcompanytags(@request",{"_index":1030,"title":{},"body":{"controllers/TagController.html":{}}}],["getcompanytags(companyid",{"_index":1053,"title":{},"body":{"injectables/TagService.html":{}}}],["getcompanytags(req",{"_index":1026,"title":{},"body":{"controllers/TagController.html":{}}}],["getconnection",{"_index":835,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmanager",{"_index":837,"title":{},"body":{"injectables/RockstarService.html":{}}}],["getmany",{"_index":895,"title":{},"body":{"injectables/RockstarService.html":{}}}],["getone",{"_index":541,"title":{},"body":{"injectables/CompanyService.html":{}}}],["getonecompany",{"_index":429,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["getonecompany(@param('id",{"_index":478,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getonecompany(id",{"_index":448,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["getonecompany(id:number",{"_index":518,"title":{},"body":{"injectables/CompanyService.html":{}}}],["getprofile",{"_index":1199,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getprofile(@request",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":1222,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":1346,"title":{},"body":{"injectables/UsersService.html":{}}}],["getprofile(＠request",{"_index":968,"title":{},"body":{"guards/RolesGuard.html":{}}}],["getrepository",{"_index":407,"title":{},"body":{"classes/Company.html":{},"injectables/TagService.html":{},"classes/Users.html":{}}}],["getrepository(company).find({take",{"_index":411,"title":{},"body":{"classes/Company.html":{}}}],["getrepository(users).find({where",{"_index":1173,"title":{},"body":{"classes/Users.html":{}}}],["getrockstar",{"_index":796,"title":{},"body":{"controllers/RockstarController.html":{},"injectables/RockstarService.html":{}}}],["getrockstar(@request",{"_index":806,"title":{},"body":{"controllers/RockstarController.html":{}}}],["getrockstar(companyid",{"_index":831,"title":{},"body":{"injectables/RockstarService.html":{}}}],["getrockstar(req",{"_index":797,"title":{},"body":{"controllers/RockstarController.html":{}}}],["getrockstarstats",{"_index":1327,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrockstarstats(rockstar",{"_index":1348,"title":{},"body":{"injectables/UsersService.html":{}}}],["gets",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"controllers/TagController.html":{}}}],["getstats",{"_index":1200,"title":{},"body":{"controllers/UsersController.html":{}}}],["getstats(@param('employeeid",{"_index":1287,"title":{},"body":{"controllers/UsersController.html":{}}}],["getstats(employeeid",{"_index":1230,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":1586,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":1201,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@param(\"employ_id",{"_index":1273,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(employee_id",{"_index":1234,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusercompany",{"_index":430,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getusercompany(@request",{"_index":475,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getusercompany(req",{"_index":451,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getuseremail",{"_index":1202,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuseremail(req",{"_index":1239,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbycompany",{"_index":1203,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbycompany(@param(\"comp_id",{"_index":1276,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbycompany(company_id",{"_index":1242,"title":{},"body":{"controllers/UsersController.html":{}}}],["gh",{"_index":1655,"title":{},"body":{"index.html":{}}}],["git",{"_index":1629,"title":{},"body":{"index.html":{}}}],["given",{"_index":849,"title":{},"body":{"injectables/RockstarService.html":{},"controllers/UsersController.html":{}}}],["grab",{"_index":1387,"title":{},"body":{"injectables/UsersService.html":{}}}],["grep",{"_index":1619,"title":{},"body":{"index.html":{}}}],["group",{"_index":861,"title":{},"body":{"injectables/RockstarService.html":{}}}],["grow",{"_index":1697,"title":{},"body":{"index.html":{}}}],["guard",{"_index":956,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":1282,"title":{},"body":{"controllers/UsersController.html":{}}}],["guards",{"_index":957,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hash",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["hello",{"_index":132,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"controllers/RockstarController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["higher",{"_index":1416,"title":{},"body":{"injectables/UsersService.html":{}}}],["highest",{"_index":867,"title":{},"body":{"injectables/RockstarService.html":{}}}],["hit",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["holding",{"_index":1691,"title":{},"body":{"index.html":{}}}],["host",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{}}}],["http://localhost:4200/api",{"_index":1673,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":1671,"title":{},"body":{"index.html":{}}}],["https://benedict",{"_index":1650,"title":{},"body":{"index.html":{}}}],["https://codeburst.io/integrating",{"_index":1679,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/54802832/is",{"_index":1676,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1391,"title":{},"body":{"injectables/UsersService.html":{}}}],["i.e",{"_index":1363,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":442,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1509,"title":{},"body":{"coverage.html":{}}}],["if(requester.employeeid",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(search",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(tag",{"_index":1064,"title":{},"body":{"injectables/TagService.html":{}}}],["ignore",{"_index":1438,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":579,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["ilike",{"_index":1370,"title":{},"body":{"injectables/UsersService.html":{}}}],["implements",{"_index":986,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["impossible",{"_index":1184,"title":{},"body":{"classes/Users.html":{}}}],["include",{"_index":1211,"title":{},"body":{"controllers/UsersController.html":{}}}],["includes",{"_index":1667,"title":{},"body":{"index.html":{}}}],["including",{"_index":447,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/TagController.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index()@manytoone(undefined",{"_index":998,"title":{},"body":{"classes/Tag.html":{}}}],["index([\"compid",{"_index":788,"title":{},"body":{"classes/Rockstar.html":{}}}],["index([\"empfrom",{"_index":699,"title":{},"body":{"classes/Recognition.html":{}}}],["index([\"employee",{"_index":1079,"title":{},"body":{"classes/TagStats.html":{}}}],["index([\"employeefrom\",\"recognition\",\"createdat",{"_index":758,"title":{},"body":{"classes/Report.html":{}}}],["index([\"month\",\"year\",\"rockstarid\",\"tag",{"_index":955,"title":{},"body":{"classes/RockstarStats.html":{}}}],["index(['companyid",{"_index":1162,"title":{},"body":{"classes/Users.html":{}}}],["index(page",{"_index":1246,"title":{},"body":{"controllers/UsersController.html":{}}}],["indicates",{"_index":1067,"title":{},"body":{"injectables/TagService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}}}],["information",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["init",{"_index":1631,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":127,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":128,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(company",{"_index":514,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(login",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(recognition",{"_index":842,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(report",{"_index":844,"title":{},"body":{"injectables/RockstarService.html":{}}}],["injectrepository(rockstar",{"_index":845,"title":{},"body":{"injectables/RockstarService.html":{}}}],["injectrepository(rockstarstats",{"_index":846,"title":{},"body":{"injectables/RockstarService.html":{}}}],["injectrepository(tag",{"_index":516,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{}}}],["injectrepository(tagstats",{"_index":843,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(usernotification",{"_index":650,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["injectrepository(users",{"_index":515,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":1337,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1607,"title":{},"body":{"index.html":{}}}],["installinitialize",{"_index":1627,"title":{},"body":{"index.html":{}}}],["instead",{"_index":1690,"title":{},"body":{"index.html":{}}}],["int",{"_index":1144,"title":{},"body":{"classes/Users.html":{}}}],["intercepts",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["interface",{"_index":1112,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/UserStats.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":1114,"title":{},"body":{"interfaces/UserStats.html":{}}}],["ipaginationoptions",{"_index":1354,"title":{},"body":{"injectables/UsersService.html":{}}}],["ismanager",{"_index":1122,"title":{},"body":{"classes/Users.html":{}}}],["itemcount",{"_index":743,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["items",{"_index":728,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["itemsperpage",{"_index":744,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["join",{"_index":1703,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":371,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["joincolumn({name",{"_index":1164,"title":{},"body":{"classes/Users.html":{}}}],["jointable",{"_index":696,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{}}}],["json",{"_index":1293,"title":{},"body":{"controllers/UsersController.html":{}}}],["json.parse(file.buffer",{"_index":1302,"title":{},"body":{"controllers/UsersController.html":{}}}],["jwt",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["jwt.refreshtoken.strategy",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.strategy",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":20,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtauthrefreshguard",{"_index":197,"title":{"injectables/JwtAuthRefreshGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthRefreshGuard.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.access_secret",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtconstants.refresh_secret",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["jwtfromrequest",{"_index":577,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshtokenstrategy",{"_index":217,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":218,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kept",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["key",{"_index":1170,"title":{},"body":{"classes/Users.html":{}}}],["last",{"_index":739,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["lastname",{"_index":1123,"title":{},"body":{"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('comments.employeefrom",{"_index":883,"title":{},"body":{"injectables/RockstarService.html":{}}}],["leftjoinandselect('comments.reactions",{"_index":885,"title":{},"body":{"injectables/RockstarService.html":{}}}],["leftjoinandselect('company.recognitions",{"_index":539,"title":{},"body":{"injectables/CompanyService.html":{}}}],["leftjoinandselect('company.tags",{"_index":540,"title":{},"body":{"injectables/CompanyService.html":{}}}],["leftjoinandselect('company.users",{"_index":537,"title":{},"body":{"injectables/CompanyService.html":{}}}],["leftjoinandselect('rec.comments",{"_index":880,"title":{},"body":{"injectables/RockstarService.html":{}}}],["leftjoinandselect('rec.empto",{"_index":876,"title":{},"body":{"injectables/RockstarService.html":{}}}],["leftjoinandselect('rec.tags",{"_index":878,"title":{},"body":{"injectables/RockstarService.html":{}}}],["leftjoinandselect('users.login",{"_index":538,"title":{},"body":{"injectables/CompanyService.html":{}}}],["legend",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1706,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1695,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1247,"title":{},"body":{"controllers/UsersController.html":{}}}],["link",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["links",{"_index":729,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{},"index.html":{}}}],["list",{"_index":446,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"injectables/RockstarService.html":{}}}],["literal",{"_index":732,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["live",{"_index":1648,"title":{},"body":{"index.html":{}}}],["local",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":23,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["localhost",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:5432",{"_index":1693,"title":{},"body":{"index.html":{}}}],["localstrategy",{"_index":219,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":1732,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["logged",{"_index":1019,"title":{},"body":{"controllers/TagController.html":{},"injectables/UsersService.html":{}}}],["loggeroptions",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["login",{"_index":142,"title":{"classes/Login.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/EditLoginDto.html":{},"classes/Login.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["login(@request",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["login(req",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.dto",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["login.dto.ts",{"_index":554,"title":{},"body":{"classes/EditLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:4",{"_index":558,"title":{},"body":{"classes/EditLoginDto.html":{}}}],["login.dto.ts:5",{"_index":557,"title":{},"body":{"classes/EditLoginDto.html":{}}}],["login.dto.ts:6",{"_index":556,"title":{},"body":{"classes/EditLoginDto.html":{}}}],["login.email",{"_index":1424,"title":{},"body":{"injectables/UsersService.html":{}}}],["login.employee",{"_index":1186,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{}}}],["login.entity",{"_index":1160,"title":{},"body":{"classes/Users.html":{}}}],["login.password",{"_index":1427,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginrepo",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/UsersService.html":{}}}],["logins",{"_index":1436,"title":{},"body":{"injectables/UsersService.html":{}}}],["logins.push(login",{"_index":1450,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginuser",{"_index":1328,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginuser(username",{"_index":1350,"title":{},"body":{"injectables/UsersService.html":{}}}],["look",{"_index":1225,"title":{},"body":{"controllers/UsersController.html":{}}}],["looks",{"_index":1165,"title":{},"body":{"classes/Users.html":{}}}],["loops",{"_index":898,"title":{},"body":{"injectables/RockstarService.html":{}}}],["lower",{"_index":1410,"title":{},"body":{"injectables/UsersService.html":{}}}],["make",{"_index":1168,"title":{},"body":{"classes/Users.html":{}}}],["making",{"_index":1183,"title":{},"body":{"classes/Users.html":{}}}],["manager",{"_index":1345,"title":{},"body":{"injectables/UsersService.html":{}}}],["managerid",{"_index":1124,"title":{},"body":{"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["manytomany",{"_index":697,"title":{},"body":{"classes/Recognition.html":{},"classes/Rockstar.html":{},"classes/Tag.html":{}}}],["manytomany(()=>tag",{"_index":703,"title":{},"body":{"classes/Recognition.html":{}}}],["manytomany(undefined",{"_index":692,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{}}}],["manytoone",{"_index":370,"title":{},"body":{"classes/Comment.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["manytoone(()=>company",{"_index":1163,"title":{},"body":{"classes/Users.html":{}}}],["manytoone(()=>rockstar",{"_index":710,"title":{},"body":{"classes/Recognition.html":{}}}],["manytoone(()=>users",{"_index":389,"title":{},"body":{"classes/Comment.html":{},"classes/Recognition.html":{}}}],["manytoone(undefined",{"_index":351,"title":{},"body":{"classes/Comment.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["manytoone(undefined)@joincolumn",{"_index":354,"title":{},"body":{"classes/Comment.html":{},"classes/Report.html":{},"classes/UserNotification.html":{}}}],["map",{"_index":1375,"title":{},"body":{"injectables/UsersService.html":{}}}],["matchcase",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["matches",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["matching",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["meta",{"_index":730,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["metadata",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minutes",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["miscellaneous",{"_index":1574,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1694,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1638,"title":{},"body":{"index.html":{}}}],["modification",{"_index":1600,"title":{},"body":{"index.html":{}}}],["modify",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["module",{"_index":47,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":49,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":773,"title":{},"body":{"classes/Rockstar.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"injectables/UsersService.html":{}}}],["months",{"_index":814,"title":{},"body":{"controllers/RockstarController.html":{}}}],["more",{"_index":1659,"title":{},"body":{"index.html":{}}}],["msg",{"_index":336,"title":{},"body":{"classes/Comment.html":{},"classes/CreateRecDto.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/UserNotification.html":{}}}],["multer",{"_index":1268,"title":{},"body":{"controllers/UsersController.html":{}}}],["multer.memorystorage",{"_index":1299,"title":{},"body":{"controllers/UsersController.html":{}}}],["multiple",{"_index":1217,"title":{},"body":{"controllers/UsersController.html":{}}}],["name",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["necessary",{"_index":848,"title":{},"body":{"injectables/RockstarService.html":{},"classes/Users.html":{}}}],["nest",{"_index":502,"title":{},"body":{"injectables/CompanyService.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs",{"_index":1264,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/RecognitionModule.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":983,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1270,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["newdetails",{"_index":555,"title":{},"body":{"classes/EditLoginDto.html":{}}}],["newuser",{"_index":1339,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.firstname",{"_index":1493,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.ismanager",{"_index":1497,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.lastname",{"_index":1494,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.positiontitle",{"_index":1495,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.startdate",{"_index":1496,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":740,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["node.js",{"_index":1589,"title":{},"body":{"index.html":{}}}],["node:console",{"_index":1379,"title":{},"body":{"injectables/UsersService.html":{}}}],["node:dns",{"_index":841,"title":{},"body":{"injectables/RockstarService.html":{}}}],["node:domain",{"_index":1377,"title":{},"body":{"injectables/UsersService.html":{}}}],["notes",{"_index":1681,"title":{},"body":{"index.html":{}}}],["notification",{"_index":1102,"title":{},"body":{"classes/UserNotification.html":{}}}],["notification.entity",{"_index":379,"title":{},"body":{"classes/Comment.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{}}}],["notificationid",{"_index":1082,"title":{},"body":{"classes/UserNotification.html":{}}}],["notificationrepository",{"_index":644,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notifications",{"_index":337,"title":{},"body":{"classes/Comment.html":{},"controllers/NotificationsController.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{}}}],["notifications.controller",{"_index":637,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications.service",{"_index":626,"title":{},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{}}}],["notifications/notifications.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/RecognitionModule.html":{}}}],["notificationscontroller",{"_index":615,"title":{"controllers/NotificationsController.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notificationservice",{"_index":628,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["notificationsmodule",{"_index":61,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationsservice",{"_index":625,"title":{"injectables/NotificationsService.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationtype",{"_index":1083,"title":{},"body":{"classes/UserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["notificationtype.generic",{"_index":1103,"title":{},"body":{"classes/UserNotification.html":{}}}],["npm",{"_index":1626,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1662,"title":{},"body":{"index.html":{}}}],["null",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["nullable",{"_index":690,"title":{},"body":{"classes/Recognition.html":{}}}],["number",{"_index":343,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numerical",{"_index":833,"title":{},"body":{"injectables/RockstarService.html":{}}}],["numrecog",{"_index":856,"title":{},"body":{"injectables/RockstarService.html":{}}}],["numrecsreceived",{"_index":1116,"title":{},"body":{"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["numrecssent",{"_index":1117,"title":{},"body":{"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["objecct",{"_index":587,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["object",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":511,"title":{},"body":{"injectables/CompanyService.html":{},"controllers/NotificationsController.html":{}}}],["observable",{"_index":1266,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["old",{"_index":1342,"title":{},"body":{"injectables/UsersService.html":{}}}],["onetomany",{"_index":376,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/Tag.html":{},"classes/Users.html":{}}}],["onetomany(()=>comment",{"_index":1189,"title":{},"body":{"classes/Users.html":{}}}],["onetomany(()=>recognition",{"_index":420,"title":{},"body":{"classes/Company.html":{},"classes/Users.html":{}}}],["onetomany(()=>tag",{"_index":418,"title":{},"body":{"classes/Company.html":{}}}],["onetomany(()=>users",{"_index":422,"title":{},"body":{"classes/Company.html":{}}}],["onetomany(undefined",{"_index":359,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/Tag.html":{},"classes/Users.html":{}}}],["onetoone",{"_index":613,"title":{},"body":{"classes/Login.html":{},"classes/Users.html":{}}}],["onetoone(undefined",{"_index":609,"title":{},"body":{"classes/Login.html":{},"classes/Users.html":{}}}],["open",{"_index":1696,"title":{},"body":{"index.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["optional",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":1356,"title":{},"body":{"injectables/UsersService.html":{}}}],["order",{"_index":412,"title":{},"body":{"classes/Company.html":{},"injectables/RockstarService.html":{},"classes/Users.html":{}}}],["orwhere(\"user.lastname",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["otherwise",{"_index":982,"title":{},"body":{"guards/RolesGuard.html":{}}}],["out",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["override",{"_index":1439,"title":{},"body":{"injectables/UsersService.html":{}}}],["overview",{"_index":1710,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1664,"title":{},"body":{"index.html":{}}}],["package",{"_index":1550,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":1250,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{"controllers/UsersController.html":{}}}],["pages",{"_index":1656,"title":{},"body":{"index.html":{}}}],["paginate",{"_index":1265,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["paginate(options",{"_index":1353,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginate(querybuilder",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginate(this.usersrepository",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginate_username",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginate_username(options",{"_index":1357,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagination",{"_index":1263,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":1033,"title":{},"body":{"controllers/TagController.html":{}}}],["parameter",{"_index":443,"title":{},"body":{"controllers/CompanyController.html":{},"guards/RolesGuard.html":{}}}],["parameters",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":1313,"title":{},"body":{"controllers/UsersController.html":{}}}],["params.delete('limit",{"_index":1316,"title":{},"body":{"controllers/UsersController.html":{}}}],["params.delete('page",{"_index":1315,"title":{},"body":{"controllers/UsersController.html":{}}}],["pass",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["passed",{"_index":590,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{}}}],["passes",{"_index":938,"title":{},"body":{"injectables/RockstarService.html":{}}}],["passmatch",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":573,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":570,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":575,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EditLoginDto.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{}}}],["password.localauthguard",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["password:string",{"_index":602,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwords",{"_index":1385,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":1310,"title":{},"body":{"controllers/UsersController.html":{}}}],["path.split",{"_index":1312,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":581,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":582,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["peer",{"_index":1603,"title":{},"body":{"index.html":{}}}],["performs",{"_index":1361,"title":{},"body":{"injectables/UsersService.html":{}}}],["permitted",{"_index":1417,"title":{},"body":{"injectables/UsersService.html":{}}}],["persistence",{"_index":1682,"title":{},"body":{"index.html":{}}}],["pg",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":1704,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1739,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["port",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["positiontitle",{"_index":1125,"title":{},"body":{"classes/Users.html":{}}}],["possible",{"_index":1677,"title":{},"body":{"index.html":{}}}],["post",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["post('auth/login",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["post('create",{"_index":432,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["post('create_multiple",{"_index":1289,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refreshtoken",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('uploadjson",{"_index":1296,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('uploadjson')@useguards(jwtauthguard",{"_index":1257,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["posts",{"_index":1292,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["presets",{"_index":1736,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["previous",{"_index":741,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["prevmonth",{"_index":807,"title":{},"body":{"controllers/RockstarController.html":{},"injectables/UsersService.html":{}}}],["primary",{"_index":1131,"title":{},"body":{"classes/Users.html":{}}}],["primarycolumn",{"_index":396,"title":{},"body":{"classes/Company.html":{},"classes/Login.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["primarygeneratedcolumn",{"_index":372,"title":{},"body":{"classes/Comment.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{}}}],["primarygeneratedcolumn('increment",{"_index":344,"title":{},"body":{"classes/Comment.html":{},"classes/Reaction.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{}}}],["prior",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["private",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":601,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["process.env.database_url",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_entities",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_logging",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_name",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_pass",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_username",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.node_env",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1640,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1227,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profilearray",{"_index":1394,"title":{},"body":{"injectables/UsersService.html":{}}}],["profiles",{"_index":1390,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1588,"title":{},"body":{"index.html":{}}}],["project",{"_index":1610,"title":{},"body":{"index.html":{}}}],["promise",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all(employeemultiple.map(async",{"_index":1437,"title":{},"body":{"injectables/UsersService.html":{}}}],["properties",{"_index":330,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}}}],["prototype",{"_index":1605,"title":{},"body":{"index.html":{}}}],["providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["prvmonth\",{prvmonth:month}).andwhere(\"extract(year",{"_index":893,"title":{},"body":{"injectables/RockstarService.html":{}}}],["prvmonth\",{prvmonth:prevmonth}).andwhere(\"extract(year",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["ps",{"_index":1618,"title":{},"body":{"index.html":{}}}],["query",{"_index":1260,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query('firstname",{"_index":1307,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('lastname",{"_index":1308,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1306,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1305,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('search",{"_index":1309,"title":{},"body":{"controllers/UsersController.html":{}}}],["querybuilder",{"_index":1369,"title":{},"body":{"injectables/UsersService.html":{}}}],["querybuilder.andwhere(new",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["querybuilder.orderby('user.firstname",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner",{"_index":1453,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":1460,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.connect",{"_index":1455,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.insert(login",{"_index":1459,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.insert(users",{"_index":1458,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.release",{"_index":1461,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.starttransaction",{"_index":1456,"title":{},"body":{"injectables/UsersService.html":{}}}],["querystring",{"_index":850,"title":{},"body":{"injectables/RockstarService.html":{}}}],["range",{"_index":1389,"title":{},"body":{"injectables/UsersService.html":{}}}],["ranking",{"_index":1411,"title":{},"body":{"injectables/UsersService.html":{}}}],["reactfrom",{"_index":882,"title":{},"body":{"injectables/RockstarService.html":{}}}],["reaction",{"_index":361,"title":{"classes/Reaction.html":{}},"body":{"classes/Comment.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/Rockstar.html":{},"classes/UserNotification.html":{},"coverage.html":{}}}],["reaction.comment",{"_index":386,"title":{},"body":{"classes/Comment.html":{}}}],["reaction.entity",{"_index":382,"title":{},"body":{"classes/Comment.html":{},"classes/Recognition.html":{},"classes/Rockstar.html":{},"classes/UserNotification.html":{}}}],["reaction.notifications",{"_index":1108,"title":{},"body":{"classes/UserNotification.html":{}}}],["reaction.recognition",{"_index":708,"title":{},"body":{"classes/Recognition.html":{}}}],["reaction.rockstar",{"_index":791,"title":{},"body":{"classes/Rockstar.html":{}}}],["reactionid",{"_index":658,"title":{},"body":{"classes/Reaction.html":{}}}],["reactions",{"_index":338,"title":{},"body":{"classes/Comment.html":{},"classes/Recognition.html":{},"classes/Rockstar.html":{},"injectables/RockstarService.html":{}}}],["read",{"_index":1705,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":546,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["reality",{"_index":1386,"title":{},"body":{"injectables/UsersService.html":{}}}],["rec",{"_index":995,"title":{},"body":{"classes/Tag.html":{}}}],["rec.createdat",{"_index":892,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rec.dto",{"_index":839,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rec.dto.ts",{"_index":545,"title":{},"body":{"classes/CreateRecDto.html":{},"coverage.html":{}}}],["rec.dto.ts:2",{"_index":548,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.dto.ts:3",{"_index":549,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.dto.ts:4",{"_index":550,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.dto.ts:5",{"_index":551,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.dto.ts:6",{"_index":552,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.tags",{"_index":1009,"title":{},"body":{"classes/Tag.html":{}}}],["rec=>rec.company",{"_index":421,"title":{},"body":{"classes/Company.html":{}}}],["rec=>rec.deletedby",{"_index":1188,"title":{},"body":{"classes/Users.html":{}}}],["rec=>rec.empfrom",{"_index":1180,"title":{},"body":{"classes/Users.html":{}}}],["rec=>rec.empto",{"_index":1181,"title":{},"body":{"classes/Users.html":{}}}],["recid",{"_index":677,"title":{},"body":{"classes/Recognition.html":{}}}],["recognition",{"_index":339,"title":{"classes/Recognition.html":{}},"body":{"classes/Comment.html":{},"classes/Company.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/Tag.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"classes/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["recognition.\"createdat",{"_index":859,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognition.\"emptocompanyid",{"_index":857,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognition.\"emptoemployeeid",{"_index":854,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognition.comments",{"_index":387,"title":{},"body":{"classes/Comment.html":{}}}],["recognition.controller",{"_index":717,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["recognition.entity",{"_index":378,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Reaction.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/Tag.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["recognition.notifications",{"_index":1104,"title":{},"body":{"classes/UserNotification.html":{}}}],["recognition.postdate",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{}}}],["recognition.reactions",{"_index":669,"title":{},"body":{"classes/Reaction.html":{}}}],["recognition.recid\").where(\"recognition.emptocompanyid",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["recognition.reports",{"_index":760,"title":{},"body":{"classes/Report.html":{}}}],["recognition.rockstar",{"_index":793,"title":{},"body":{"classes/Rockstar.html":{}}}],["recognition.service",{"_index":718,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["recognition/recognition.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["recognition/recognition.service",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["recognitioncontroller",{"_index":716,"title":{},"body":{"modules/RecognitionModule.html":{},"coverage.html":{}}}],["recognitionmodule",{"_index":62,"title":{"modules/RecognitionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecognitionModule.html":{},"modules.html":{},"overview.html":{}}}],["recognitionpagination",{"_index":726,"title":{"classes/RecognitionPagination.html":{}},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{},"coverage.html":{}}}],["recognitionrepository",{"_index":825,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["recognitions",{"_index":393,"title":{},"body":{"classes/Company.html":{},"injectables/CompanyService.html":{},"controllers/NotificationsController.html":{},"classes/Rockstar.html":{},"injectables/RockstarService.html":{}}}],["recognitions.comments",{"_index":923,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitions.comments.employeefrom",{"_index":924,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitions.comments.reactions",{"_index":927,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitions.comments.reactions.employeefrom",{"_index":928,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitions.empfrom",{"_index":920,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitions.empto",{"_index":921,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitions.reactions",{"_index":925,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitions.reactions.employeefrom",{"_index":926,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitions.tags",{"_index":922,"title":{},"body":{"injectables/RockstarService.html":{}}}],["recognitionservice",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/RecognitionModule.html":{},"coverage.html":{},"overview.html":{}}}],["recogs",{"_index":871,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["recs",{"_index":1364,"title":{},"body":{"injectables/UsersService.html":{}}}],["recsdeleted",{"_index":1126,"title":{},"body":{"classes/Users.html":{}}}],["recsreceived",{"_index":1127,"title":{},"body":{"classes/Users.html":{}}}],["recssent",{"_index":1128,"title":{},"body":{"classes/Users.html":{}}}],["recursiverunning",{"_index":1632,"title":{},"body":{"index.html":{}}}],["referencedcolumnname",{"_index":1133,"title":{},"body":{"classes/Users.html":{}}}],["reflect",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":972,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresh",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refresh(user",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_key",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh_secret",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh_token",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}}}],["refreshtoken",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshtoken(@request",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(req",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken:refreshtoken",{"_index":1384,"title":{},"body":{"injectables/UsersService.html":{}}}],["refreshtokenexpire",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{}}}],["refreshtokenexpiredate",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenexpiredate.setdate(refreshtokenexpiredate.getdate",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenexpires",{"_index":1382,"title":{},"body":{"injectables/UsersService.html":{}}}],["region",{"_index":1728,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["rejectunauthorized",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["related",{"_index":1675,"title":{},"body":{"index.html":{}}}],["relation",{"_index":1182,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":655,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["relations:['rockstar",{"_index":919,"title":{},"body":{"injectables/RockstarService.html":{}}}],["removeuser",{"_index":1204,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removeuser(@param('employeeid",{"_index":1280,"title":{},"body":{"controllers/UsersController.html":{}}}],["removeuser(employeeid",{"_index":1252,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repo",{"_index":1598,"title":{},"body":{"index.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["report",{"_index":364,"title":{"classes/Report.html":{}},"body":{"classes/Comment.html":{},"injectables/NotificationsService.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/Report.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/UserNotification.html":{},"classes/Users.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["report.comment",{"_index":385,"title":{},"body":{"classes/Comment.html":{}}}],["report.entity",{"_index":380,"title":{},"body":{"classes/Comment.html":{},"classes/Recognition.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["report.notifications",{"_index":1105,"title":{},"body":{"classes/UserNotification.html":{}}}],["report.recognition",{"_index":705,"title":{},"body":{"classes/Recognition.html":{}}}],["report=>report.employeefrom",{"_index":1191,"title":{},"body":{"classes/Users.html":{}}}],["reportid",{"_index":748,"title":{},"body":{"classes/Report.html":{}}}],["reportrepo",{"_index":827,"title":{},"body":{"injectables/RockstarService.html":{}}}],["reports",{"_index":340,"title":{},"body":{"classes/Comment.html":{},"classes/Recognition.html":{}}}],["repository",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/NotificationsService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["req.url",{"_index":1311,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user.companyid",{"_index":631,"title":{},"body":{"controllers/NotificationsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["req.user.email",{"_index":1318,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user.role",{"_index":1285,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["requester",{"_index":1341,"title":{},"body":{"injectables/UsersService.html":{}}}],["requester.companyid",{"_index":1492,"title":{},"body":{"injectables/UsersService.html":{}}}],["requester.role",{"_index":1489,"title":{},"body":{"injectables/UsersService.html":{}}}],["requestid",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["requests",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["require",{"_index":1194,"title":{},"body":{"controllers/UsersController.html":{}}}],["require('fs",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1334,"title":{},"body":{"injectables/UsersService.html":{}}}],["requiredroles",{"_index":987,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":992,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responsible",{"_index":959,"title":{},"body":{"guards/RolesGuard.html":{}}}],["restricted",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["restriction",{"_index":981,"title":{},"body":{"guards/RolesGuard.html":{}}}],["result",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["results",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["retquery",{"_index":864,"title":{},"body":{"injectables/RockstarService.html":{}}}],["retquery.length",{"_index":872,"title":{},"body":{"injectables/RockstarService.html":{}}}],["retquery[0].empid",{"_index":874,"title":{},"body":{"injectables/RockstarService.html":{}}}],["retrieve",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"injectables/UsersService.html":{}}}],["retrieves",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["returnrockstardto",{"_index":763,"title":{"classes/ReturnRockstarDto.html":{}},"body":{"classes/ReturnRockstarDto.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"coverage.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returnval",{"_index":815,"title":{},"body":{"controllers/RockstarController.html":{}}}],["reverse",{"_index":840,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rimraf",{"_index":1567,"title":{},"body":{"dependencies.html":{}}}],["rm",{"_index":1616,"title":{},"body":{"index.html":{}}}],["rockstar",{"_index":341,"title":{"classes/Rockstar.html":{}},"body":{"classes/Comment.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["rockstar's",{"_index":939,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstar.comments",{"_index":388,"title":{},"body":{"classes/Comment.html":{}}}],["rockstar.company}).andwhere(\"recognition.emptoemployeeid",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["rockstar.compid",{"_index":935,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstar.controller",{"_index":821,"title":{},"body":{"modules/RockstarModule.html":{}}}],["rockstar.employeeid}).andwhere(\"extract(month",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["rockstar.entity",{"_index":381,"title":{},"body":{"classes/Comment.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/RockstarStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["rockstar.month",{"_index":931,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstar.notifications",{"_index":1106,"title":{},"body":{"classes/UserNotification.html":{}}}],["rockstar.reactions",{"_index":670,"title":{},"body":{"classes/Reaction.html":{}}}],["rockstar.recognitions",{"_index":933,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstar.rockstar",{"_index":934,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstar.service",{"_index":800,"title":{},"body":{"controllers/RockstarController.html":{},"modules/RockstarModule.html":{}}}],["rockstar.year",{"_index":932,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstar/rockstar.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["rockstar=>rockstar.recognitions",{"_index":711,"title":{},"body":{"classes/Recognition.html":{}}}],["rockstar=>rockstar.rockstar",{"_index":1192,"title":{},"body":{"classes/Users.html":{}}}],["rockstarcontroller",{"_index":794,"title":{"controllers/RockstarController.html":{}},"body":{"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"coverage.html":{}}}],["rockstarid",{"_index":774,"title":{},"body":{"classes/Rockstar.html":{},"classes/RockstarStats.html":{}}}],["rockstarmodule",{"_index":63,"title":{"modules/RockstarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RockstarModule.html":{},"modules.html":{},"overview.html":{}}}],["rockstarrepo",{"_index":828,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstarservice",{"_index":799,"title":{"injectables/RockstarService.html":{}},"body":{"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"coverage.html":{},"overview.html":{}}}],["rockstarstats",{"_index":766,"title":{"classes/RockstarStats.html":{}},"body":{"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"coverage.html":{}}}],["rockstarstats.entity",{"_index":787,"title":{},"body":{"classes/Rockstar.html":{}}}],["rockstarstats.rockstar",{"_index":792,"title":{},"body":{"classes/Rockstar.html":{}}}],["rockstarstatsrepo",{"_index":829,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstaruser",{"_index":870,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstaruser.companyid",{"_index":936,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstaruser.companyid}).andwhere(\"rec.emptoemployeeid",{"_index":889,"title":{},"body":{"injectables/RockstarService.html":{}}}],["rockstaruser.employeeid",{"_index":890,"title":{},"body":{"injectables/RockstarService.html":{}}}],["role",{"_index":462,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":1490,"title":{},"body":{"injectables/UsersService.html":{}}}],["role.employee",{"_index":967,"title":{},"body":{"guards/RolesGuard.html":{},"classes/Users.html":{}}}],["role[createuserdto.role",{"_index":1414,"title":{},"body":{"injectables/UsersService.html":{}}}],["role[creator_role",{"_index":1413,"title":{},"body":{"injectables/UsersService.html":{}}}],["roles",{"_index":466,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":483,"title":{},"body":{"controllers/CompanyController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["roles(role.serveradmin",{"_index":469,"title":{},"body":{"controllers/CompanyController.html":{}}}],["roles.decorator",{"_index":985,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/role.enum",{"_index":964,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/roles.decorator",{"_index":467,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["roles/roles.guard",{"_index":465,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["roles_key",{"_index":984,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":464,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/CompanyController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles(role.admin)@delete(':employeeid",{"_index":1254,"title":{},"body":{"controllers/UsersController.html":{}}}],["rolesguard)@roles(role.admin)@delete(':id",{"_index":439,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/TagController.html":{}}}],["rolesguard)@roles(role.admin)@post('create",{"_index":1016,"title":{},"body":{"controllers/TagController.html":{}}}],["rolesguard)@roles(role.admin)@post('create_multiple",{"_index":1215,"title":{},"body":{"controllers/UsersController.html":{}}}],["rolesguard)@roles(role.admin)@useguards(jwtauthguard",{"_index":1253,"title":{},"body":{"controllers/UsersController.html":{}}}],["rolesguard)@roles(role.admin)@useinterceptors(undefined",{"_index":1258,"title":{},"body":{"controllers/UsersController.html":{}}}],["rolesguard)@roles(role.serveradmin)@get(':id",{"_index":449,"title":{},"body":{"controllers/CompanyController.html":{}}}],["rolesguard)@roles(role.serveradmin)@get('all",{"_index":444,"title":{},"body":{"controllers/CompanyController.html":{}}}],["root",{"_index":1608,"title":{},"body":{"index.html":{}}}],["rows",{"_index":1185,"title":{},"body":{"classes/Users.html":{}}}],["run",{"_index":1635,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1267,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1376,"title":{},"body":{"injectables/UsersService.html":{}}}],["saltorrounds",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["same",{"_index":1063,"title":{},"body":{"injectables/TagService.html":{},"classes/Users.html":{}}}],["saved",{"_index":914,"title":{},"body":{"injectables/RockstarService.html":{}}}],["savedcompany",{"_index":529,"title":{},"body":{"injectables/CompanyService.html":{}}}],["savedrockstar",{"_index":916,"title":{},"body":{"injectables/RockstarService.html":{}}}],["saveduser",{"_index":1428,"title":{},"body":{"injectables/UsersService.html":{}}}],["saves",{"_index":929,"title":{},"body":{"injectables/RockstarService.html":{}}}],["scalable",{"_index":1593,"title":{},"body":{"index.html":{}}}],["scrumberbatch.github.io/peer",{"_index":1651,"title":{},"body":{"index.html":{}}}],["sdocumentation",{"_index":1669,"title":{},"body":{"index.html":{}}}],["search",{"_index":513,"title":{},"body":{"injectables/CompanyService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":580,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["select",{"_index":851,"title":{},"body":{"injectables/RockstarService.html":{}}}],["sends",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["sent",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":1583,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["serveradmin",{"_index":1582,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["service",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["sessions",{"_index":1684,"title":{},"body":{"index.html":{}}}],["set(changes",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["setid",{"_index":395,"title":{},"body":{"classes/Company.html":{},"classes/Users.html":{}}}],["setmetadata(roles_key",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1612,"title":{},"body":{"index.html":{}}}],["severe",{"_index":1596,"title":{},"body":{"index.html":{}}}],["showing",{"_index":1237,"title":{},"body":{"controllers/UsersController.html":{}}}],["side",{"_index":1594,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["soft",{"_index":1278,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["software",{"_index":1604,"title":{},"body":{"index.html":{}}}],["sorted",{"_index":866,"title":{},"body":{"injectables/RockstarService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"index.html":{}}}],["sources",{"_index":1653,"title":{},"body":{"index.html":{}}}],["spec",{"_index":1733,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["spec.json",{"_index":1731,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["specific",{"_index":454,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/TagService.html":{},"index.html":{}}}],["specified",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["specifies",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["specify",{"_index":1352,"title":{},"body":{"injectables/UsersService.html":{}}}],["sponsors",{"_index":1699,"title":{},"body":{"index.html":{}}}],["spring",{"_index":1606,"title":{},"body":{"index.html":{}}}],["sql",{"_index":811,"title":{},"body":{"controllers/RockstarController.html":{}}}],["src/.../app.module.ts",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1585,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../notification",{"_index":1576,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.enum.ts",{"_index":1578,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":129,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":130,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:49",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:62",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:78",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":1517,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":560,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthRefreshGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.refreshtoken.strategy.ts",{"_index":565,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.refreshtoken.strategy.ts:17",{"_index":569,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["src/auth/jwt.refreshtoken.strategy.ts:8",{"_index":567,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":583,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:11",{"_index":585,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:26",{"_index":586,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":592,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":594,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:11",{"_index":596,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:23",{"_index":598,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/dto/auth.dto.ts",{"_index":1499,"title":{},"body":{"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{}}}],["src/common/dto/auth.dto.ts:10",{"_index":1500,"title":{},"body":{"classes/authDto.html":{}}}],["src/common/dto/auth.dto.ts:11",{"_index":1501,"title":{},"body":{"classes/authDto.html":{}}}],["src/common/dto/auth.dto.ts:3",{"_index":1503,"title":{},"body":{"classes/authDtoFull.html":{}}}],["src/common/dto/auth.dto.ts:4",{"_index":1505,"title":{},"body":{"classes/authDtoFull.html":{}}}],["src/common/dto/auth.dto.ts:5",{"_index":1504,"title":{},"body":{"classes/authDtoFull.html":{}}}],["src/common/dto/auth.dto.ts:6",{"_index":1506,"title":{},"body":{"classes/authDtoFull.html":{}}}],["src/common/dto/create",{"_index":544,"title":{},"body":{"classes/CreateRecDto.html":{},"coverage.html":{}}}],["src/common/dto/edit",{"_index":553,"title":{},"body":{"classes/EditLoginDto.html":{},"coverage.html":{}}}],["src/common/dto/pagination.dto.ts",{"_index":727,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{},"coverage.html":{}}}],["src/common/dto/pagination.dto.ts:13",{"_index":1111,"title":{},"body":{"classes/UserPagination.html":{}}}],["src/common/dto/pagination.dto.ts:23",{"_index":731,"title":{},"body":{"classes/RecognitionPagination.html":{}}}],["src/common/dto/pagination.dto.ts:24",{"_index":733,"title":{},"body":{"classes/RecognitionPagination.html":{}}}],["src/common/dto/pagination.dto.ts:30",{"_index":734,"title":{},"body":{"classes/RecognitionPagination.html":{}}}],["src/common/dto/pagination.dto.ts:6",{"_index":1109,"title":{},"body":{"classes/UserPagination.html":{}}}],["src/common/dto/pagination.dto.ts:7",{"_index":1110,"title":{},"body":{"classes/UserPagination.html":{}}}],["src/common/dto/rockstar",{"_index":764,"title":{},"body":{"classes/ReturnRockstarDto.html":{},"coverage.html":{}}}],["src/common/entity/comment.entity.ts",{"_index":329,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{}}}],["src/common/entity/comment.entity.ts:13",{"_index":345,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:16",{"_index":357,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:19",{"_index":360,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:22",{"_index":365,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:26",{"_index":362,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:30",{"_index":355,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:33",{"_index":363,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:36",{"_index":366,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:39",{"_index":348,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:42",{"_index":368,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:45",{"_index":350,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/comment.entity.ts:49",{"_index":353,"title":{},"body":{"classes/Comment.html":{}}}],["src/common/entity/company.entity.ts",{"_index":391,"title":{},"body":{"classes/Company.html":{},"coverage.html":{}}}],["src/common/entity/company.entity.ts:12",{"_index":406,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/company.entity.ts:24",{"_index":400,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/company.entity.ts:28",{"_index":402,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/company.entity.ts:31",{"_index":401,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/company.entity.ts:34",{"_index":404,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/company.entity.ts:37",{"_index":398,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/company.entity.ts:40",{"_index":403,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/company.entity.ts:43",{"_index":399,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/company.entity.ts:9",{"_index":397,"title":{},"body":{"classes/Company.html":{}}}],["src/common/entity/login.entity.ts",{"_index":605,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/common/entity/login.entity.ts:10",{"_index":611,"title":{},"body":{"classes/Login.html":{}}}],["src/common/entity/login.entity.ts:14",{"_index":610,"title":{},"body":{"classes/Login.html":{}}}],["src/common/entity/login.entity.ts:17",{"_index":606,"title":{},"body":{"classes/Login.html":{}}}],["src/common/entity/login.entity.ts:20",{"_index":612,"title":{},"body":{"classes/Login.html":{}}}],["src/common/entity/login.entity.ts:23",{"_index":607,"title":{},"body":{"classes/Login.html":{}}}],["src/common/entity/login.entity.ts:7",{"_index":608,"title":{},"body":{"classes/Login.html":{}}}],["src/common/entity/notification.entity.ts",{"_index":1081,"title":{},"body":{"classes/UserNotification.html":{},"coverage.html":{}}}],["src/common/entity/notification.entity.ts:13",{"_index":1090,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:17",{"_index":1088,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:23",{"_index":1093,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:26",{"_index":1095,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:29",{"_index":1096,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:32",{"_index":1097,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:35",{"_index":1085,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:38",{"_index":1094,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:41",{"_index":1098,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:44",{"_index":1089,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:47",{"_index":1086,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:50",{"_index":1099,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/notification.entity.ts:53",{"_index":1087,"title":{},"body":{"classes/UserNotification.html":{}}}],["src/common/entity/reaction.entity.ts",{"_index":657,"title":{},"body":{"classes/Reaction.html":{},"coverage.html":{}}}],["src/common/entity/reaction.entity.ts:12",{"_index":664,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/reaction.entity.ts:15",{"_index":662,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/reaction.entity.ts:18",{"_index":665,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/reaction.entity.ts:21",{"_index":666,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/reaction.entity.ts:24",{"_index":659,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/reaction.entity.ts:27",{"_index":660,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/reaction.entity.ts:30",{"_index":667,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/reaction.entity.ts:33",{"_index":661,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/reaction.entity.ts:36",{"_index":663,"title":{},"body":{"classes/Reaction.html":{}}}],["src/common/entity/recognition.entity.ts",{"_index":673,"title":{},"body":{"classes/Recognition.html":{},"coverage.html":{}}}],["src/common/entity/recognition.entity.ts:15",{"_index":688,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:18",{"_index":679,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:22",{"_index":683,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:26",{"_index":684,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:30",{"_index":694,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:33",{"_index":685,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:36",{"_index":689,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:39",{"_index":678,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:42",{"_index":686,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:45",{"_index":687,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:48",{"_index":680,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:51",{"_index":695,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:54",{"_index":681,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:58",{"_index":682,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/recognition.entity.ts:61",{"_index":691,"title":{},"body":{"classes/Recognition.html":{}}}],["src/common/entity/report.entity.ts",{"_index":747,"title":{},"body":{"classes/Report.html":{},"coverage.html":{}}}],["src/common/entity/report.entity.ts:11",{"_index":756,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/report.entity.ts:15",{"_index":752,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/report.entity.ts:18",{"_index":755,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/report.entity.ts:21",{"_index":749,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/report.entity.ts:24",{"_index":753,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/report.entity.ts:27",{"_index":754,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/report.entity.ts:30",{"_index":750,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/report.entity.ts:33",{"_index":757,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/report.entity.ts:36",{"_index":751,"title":{},"body":{"classes/Report.html":{}}}],["src/common/entity/rockstar.entity.ts",{"_index":771,"title":{},"body":{"classes/Rockstar.html":{},"coverage.html":{}}}],["src/common/entity/rockstar.entity.ts:13",{"_index":784,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:16",{"_index":779,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:19",{"_index":786,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:22",{"_index":780,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:25",{"_index":777,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:28",{"_index":781,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:31",{"_index":778,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:34",{"_index":785,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:37",{"_index":782,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstar.entity.ts:40",{"_index":783,"title":{},"body":{"classes/Rockstar.html":{}}}],["src/common/entity/rockstarstats.entity.ts",{"_index":941,"title":{},"body":{"classes/RockstarStats.html":{},"coverage.html":{}}}],["src/common/entity/rockstarstats.entity.ts:10",{"_index":952,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:13",{"_index":949,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:16",{"_index":951,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:20",{"_index":945,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:23",{"_index":948,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:26",{"_index":954,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:29",{"_index":950,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:32",{"_index":946,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:35",{"_index":953,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/rockstarstats.entity.ts:38",{"_index":947,"title":{},"body":{"classes/RockstarStats.html":{}}}],["src/common/entity/tag.entity.ts",{"_index":994,"title":{},"body":{"classes/Tag.html":{},"coverage.html":{}}}],["src/common/entity/tag.entity.ts:12",{"_index":1006,"title":{},"body":{"classes/Tag.html":{}}}],["src/common/entity/tag.entity.ts:16",{"_index":999,"title":{},"body":{"classes/Tag.html":{}}}],["src/common/entity/tag.entity.ts:20",{"_index":1002,"title":{},"body":{"classes/Tag.html":{}}}],["src/common/entity/tag.entity.ts:23",{"_index":1004,"title":{},"body":{"classes/Tag.html":{}}}],["src/common/entity/tag.entity.ts:26",{"_index":1000,"title":{},"body":{"classes/Tag.html":{}}}],["src/common/entity/tag.entity.ts:29",{"_index":1005,"title":{},"body":{"classes/Tag.html":{}}}],["src/common/entity/tag.entity.ts:32",{"_index":1001,"title":{},"body":{"classes/Tag.html":{}}}],["src/common/entity/tag.entity.ts:9",{"_index":1003,"title":{},"body":{"classes/Tag.html":{}}}],["src/common/entity/tagstats.entity.ts",{"_index":1069,"title":{},"body":{"classes/TagStats.html":{},"coverage.html":{}}}],["src/common/entity/tagstats.entity.ts:12",{"_index":1075,"title":{},"body":{"classes/TagStats.html":{}}}],["src/common/entity/tagstats.entity.ts:15",{"_index":1076,"title":{},"body":{"classes/TagStats.html":{}}}],["src/common/entity/tagstats.entity.ts:18",{"_index":1071,"title":{},"body":{"classes/TagStats.html":{}}}],["src/common/entity/tagstats.entity.ts:21",{"_index":1072,"title":{},"body":{"classes/TagStats.html":{}}}],["src/common/entity/tagstats.entity.ts:24",{"_index":1073,"title":{},"body":{"classes/TagStats.html":{}}}],["src/common/entity/tagstats.entity.ts:27",{"_index":1078,"title":{},"body":{"classes/TagStats.html":{}}}],["src/common/entity/tagstats.entity.ts:30",{"_index":1074,"title":{},"body":{"classes/TagStats.html":{}}}],["src/common/entity/tagstats.entity.ts:9",{"_index":1077,"title":{},"body":{"classes/TagStats.html":{}}}],["src/common/entity/users.entity.ts",{"_index":1119,"title":{},"body":{"classes/Users.html":{},"coverage.html":{}}}],["src/common/entity/users.entity.ts:17",{"_index":1134,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:22",{"_index":1135,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:25",{"_index":1138,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:28",{"_index":1159,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:38",{"_index":1139,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:41",{"_index":1141,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:44",{"_index":1148,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:47",{"_index":1140,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:53",{"_index":1154,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:56",{"_index":1156,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:59",{"_index":1145,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:62",{"_index":1151,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:65",{"_index":1150,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:68",{"_index":1146,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:71",{"_index":1147,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:75",{"_index":1142,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:78",{"_index":1157,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:81",{"_index":1149,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:84",{"_index":1130,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:87",{"_index":1152,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:90",{"_index":1153,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:93",{"_index":1136,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:96",{"_index":1158,"title":{},"body":{"classes/Users.html":{}}}],["src/common/entity/users.entity.ts:99",{"_index":1137,"title":{},"body":{"classes/Users.html":{}}}],["src/common/enum/notification",{"_index":1579,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enum/role.enum.ts",{"_index":1581,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/interface/userstats.interface.ts",{"_index":1115,"title":{},"body":{"interfaces/UserStats.html":{},"coverage.html":{}}}],["src/company/company.controller.ts",{"_index":425,"title":{},"body":{"controllers/CompanyController.html":{},"coverage.html":{}}}],["src/company/company.controller.ts:21",{"_index":445,"title":{},"body":{"controllers/CompanyController.html":{}}}],["src/company/company.controller.ts:32",{"_index":453,"title":{},"body":{"controllers/CompanyController.html":{}}}],["src/company/company.controller.ts:44",{"_index":450,"title":{},"body":{"controllers/CompanyController.html":{}}}],["src/company/company.controller.ts:54",{"_index":433,"title":{},"body":{"controllers/CompanyController.html":{}}}],["src/company/company.controller.ts:66",{"_index":440,"title":{},"body":{"controllers/CompanyController.html":{}}}],["src/company/company.module.ts",{"_index":491,"title":{},"body":{"modules/CompanyModule.html":{}}}],["src/company/company.service.ts",{"_index":496,"title":{},"body":{"injectables/CompanyService.html":{},"coverage.html":{}}}],["src/company/company.service.ts:109",{"_index":506,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/company/company.service.ts:14",{"_index":501,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/company/company.service.ts:36",{"_index":509,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/company/company.service.ts:45",{"_index":512,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/company/company.service.ts:54",{"_index":504,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/main.ts",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/notifications/notifications.controller.ts",{"_index":616,"title":{},"body":{"controllers/NotificationsController.html":{},"coverage.html":{}}}],["src/notifications/notifications.controller.ts:16",{"_index":622,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.controller.ts:22",{"_index":619,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.module.ts",{"_index":636,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/notifications/notifications.service.ts",{"_index":639,"title":{},"body":{"injectables/NotificationsService.html":{},"coverage.html":{}}}],["src/notifications/notifications.service.ts:14",{"_index":648,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:21",{"_index":646,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:8",{"_index":643,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/recognition/recognition.controller.ts",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["src/recognition/recognition.module.ts",{"_index":715,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["src/recognition/recognition.service.ts",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["src/rockstar/rockstar.controller.ts",{"_index":795,"title":{},"body":{"controllers/RockstarController.html":{},"coverage.html":{}}}],["src/rockstar/rockstar.controller.ts:26",{"_index":798,"title":{},"body":{"controllers/RockstarController.html":{}}}],["src/rockstar/rockstar.module.ts",{"_index":820,"title":{},"body":{"modules/RockstarModule.html":{}}}],["src/rockstar/rockstar.service.ts",{"_index":823,"title":{},"body":{"injectables/RockstarService.html":{},"coverage.html":{}}}],["src/rockstar/rockstar.service.ts:20",{"_index":830,"title":{},"body":{"injectables/RockstarService.html":{}}}],["src/rockstar/rockstar.service.ts:50",{"_index":832,"title":{},"body":{"injectables/RockstarService.html":{}}}],["src/roles/roles.decorator.ts",{"_index":1543,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/roles.guard.ts",{"_index":958,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/roles/roles.guard.ts:29",{"_index":973,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles/roles.guard.ts:37",{"_index":976,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/tag/tag.controller.ts",{"_index":1012,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["src/tag/tag.controller.ts:22",{"_index":1027,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.controller.ts:35",{"_index":1023,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.controller.ts:48",{"_index":1017,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.module.ts",{"_index":1041,"title":{},"body":{"modules/TagModule.html":{}}}],["src/tag/tag.service.ts",{"_index":1044,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["src/tag/tag.service.ts:21",{"_index":1054,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:31",{"_index":1050,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:45",{"_index":1052,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:8",{"_index":1048,"title":{},"body":{"injectables/TagService.html":{}}}],["src/users/users.controller.ts",{"_index":1193,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:100",{"_index":1232,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:115",{"_index":1216,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:127",{"_index":1259,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:135",{"_index":1249,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:164",{"_index":1221,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:175",{"_index":1241,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:32",{"_index":1224,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":1236,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":1244,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":1255,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:87",{"_index":1207,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1323,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1325,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:102",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:152",{"_index":1366,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:172",{"_index":1336,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:221",{"_index":1355,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:231",{"_index":1349,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:261",{"_index":1359,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:297",{"_index":1340,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":1351,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":1347,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:76",{"_index":1344,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:89",{"_index":1360,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":1636,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1639,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1641,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":1129,"title":{},"body":{"classes/Users.html":{}}}],["started",{"_index":1587,"title":{"index.html":{}},"body":{}}],["starts",{"_index":599,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["stat",{"_index":1233,"title":{},"body":{"controllers/UsersController.html":{}}}],["statements",{"_index":1510,"title":{},"body":{"coverage.html":{}}}],["stats",{"_index":775,"title":{},"body":{"classes/Rockstar.html":{},"injectables/RockstarService.html":{},"classes/Tag.html":{},"injectables/UsersService.html":{}}}],["stats.dto",{"_index":803,"title":{},"body":{"controllers/RockstarController.html":{},"injectables/RockstarService.html":{}}}],["stats.dto.ts",{"_index":765,"title":{},"body":{"classes/ReturnRockstarDto.html":{},"coverage.html":{}}}],["stats.dto.ts:6",{"_index":767,"title":{},"body":{"classes/ReturnRockstarDto.html":{}}}],["stats.dto.ts:7",{"_index":768,"title":{},"body":{"classes/ReturnRockstarDto.html":{}}}],["stats.tag",{"_index":1010,"title":{},"body":{"classes/Tag.html":{}}}],["stop",{"_index":1613,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1298,"title":{},"body":{"controllers/UsersController.html":{}}}],["storerefreshtoken(refreshtoken:string",{"_index":1380,"title":{},"body":{"injectables/UsersService.html":{}}}],["strategy",{"_index":571,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":131,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"injectables/RockstarService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"miscellaneous/variables.html":{}}}],["stripped",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["sub",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["submodule",{"_index":1630,"title":{},"body":{"index.html":{}}}],["submodules",{"_index":1628,"title":{},"body":{"index.html":{}}}],["super",{"_index":576,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1689,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":1392,"title":{},"body":{"injectables/UsersService.html":{}}}],["svg",{"_index":1708,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1570,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{"dependencies.html":{},"index.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["swaggeruibundle",{"_index":1729,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["swaggeruibundle.plugins.downloadurl",{"_index":1740,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["swaggeruibundle.presets.apis",{"_index":1737,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["swaggeruibundle.swaggeruistandalonepreset",{"_index":1738,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["synchronize",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["t1",{"_index":862,"title":{},"body":{"injectables/RockstarService.html":{}}}],["t1.empid",{"_index":852,"title":{},"body":{"injectables/RockstarService.html":{}}}],["t1.numrecog",{"_index":853,"title":{},"body":{"injectables/RockstarService.html":{}}}],["table",{"_index":940,"title":{},"body":{"injectables/RockstarService.html":{},"classes/Users.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":81,"title":{"classes/Tag.html":{}},"body":{"modules/AppModule.html":{},"classes/Company.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"coverage.html":{}}}],["tag.company",{"_index":1056,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.company.companyid",{"_index":1065,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.controller",{"_index":1042,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.entity",{"_index":408,"title":{},"body":{"classes/Company.html":{},"classes/Recognition.html":{},"classes/RockstarStats.html":{},"classes/TagStats.html":{}}}],["tag.service",{"_index":1028,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag.tagid",{"_index":903,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/TagService.html":{}}}],["tag.value",{"_index":1058,"title":{},"body":{"injectables/TagService.html":{}}}],["tag/tag.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["tag/tag.service",{"_index":493,"title":{},"body":{"modules/CompanyModule.html":{},"injectables/CompanyService.html":{}}}],["tag=>tag.company",{"_index":419,"title":{},"body":{"classes/Company.html":{}}}],["tag=>tag.rec",{"_index":704,"title":{},"body":{"classes/Recognition.html":{}}}],["tagcontroller",{"_index":1011,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagdata",{"_index":1015,"title":{},"body":{"controllers/TagController.html":{}}}],["tagdata.value",{"_index":1037,"title":{},"body":{"controllers/TagController.html":{}}}],["tagid",{"_index":996,"title":{},"body":{"classes/Tag.html":{},"injectables/TagService.html":{}}}],["tagmodule",{"_index":64,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":500,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RockstarService.html":{},"injectables/TagService.html":{}}}],["tags",{"_index":394,"title":{},"body":{"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/Recognition.html":{},"injectables/RockstarService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tags').leftjoinandselect('rec.reactions",{"_index":879,"title":{},"body":{"injectables/RockstarService.html":{}}}],["tags.push(tag",{"_index":905,"title":{},"body":{"injectables/RockstarService.html":{}}}],["tagservice",{"_index":490,"title":{"injectables/TagService.html":{}},"body":{"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["tagset",{"_index":904,"title":{},"body":{"injectables/RockstarService.html":{}}}],["tagstatid",{"_index":943,"title":{},"body":{"classes/RockstarStats.html":{},"classes/TagStats.html":{}}}],["tagstats",{"_index":720,"title":{"classes/TagStats.html":{}},"body":{"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tagstats.employee",{"_index":1187,"title":{},"body":{"classes/Users.html":{}}}],["tagstats.entity",{"_index":1007,"title":{},"body":{"classes/Tag.html":{},"classes/Users.html":{}}}],["tagstats.tag",{"_index":1432,"title":{},"body":{"injectables/UsersService.html":{}}}],["tagstatslist",{"_index":897,"title":{},"body":{"injectables/RockstarService.html":{}}}],["tagstatslist.push(currstat",{"_index":911,"title":{},"body":{"injectables/RockstarService.html":{}}}],["tagstatslist[tagset].countreceived",{"_index":912,"title":{},"body":{"injectables/RockstarService.html":{}}}],["tagstatsrepo",{"_index":826,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["take",{"_index":1174,"title":{},"body":{"classes/Users.html":{}}}],["takes",{"_index":812,"title":{},"body":{"controllers/RockstarController.html":{},"injectables/RockstarService.html":{}}}],["tallying",{"_index":901,"title":{},"body":{"injectables/RockstarService.html":{}}}],["test",{"_index":1644,"title":{},"body":{"index.html":{}}}],["test:covautomated",{"_index":1647,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1646,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1643,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1698,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.editlogin(req.user",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.user",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["this.authservice.refresh(req.user",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":603,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.companyid",{"_index":409,"title":{},"body":{"classes/Company.html":{},"classes/Users.html":{}}}],["this.companyrepository.createquerybuilder('company",{"_index":535,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companyrepository.find({relations:[\"tags",{"_index":517,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companyrepository.findone({companyid",{"_index":1399,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.companyrepository.findone({relations:[\"tags",{"_index":519,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companyrepository.findone({where:{companyid",{"_index":1057,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["this.companyrepository.save(company",{"_index":530,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companyrepository.softremove([company",{"_index":542,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companyservice.createcompany(createcompanydto",{"_index":482,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.companyservice.deletecomp(id",{"_index":486,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.companyservice.getcompany",{"_index":471,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.companyservice.getonecompany(id",{"_index":479,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.companyservice.getonecompany(req.user.companyid",{"_index":476,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.employeeid",{"_index":1172,"title":{},"body":{"classes/Users.html":{}}}],["this.jwtservice.sign(payload",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loginrepo.createquerybuilder",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loginrepo.findone",{"_index":1388,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.loginrepo.save(login",{"_index":1430,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.loginrepo.softdelete({employee",{"_index":1397,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.loginrepo.update(email",{"_index":1383,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.notificationrepository.find({where",{"_index":654,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.softdelete({notificationid:id",{"_index":656,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationservice.deletenotification(id",{"_index":632,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationservice.findnotifications(req.user.employeeid",{"_index":630,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.recognitionrepository.createquerybuilder('rec",{"_index":875,"title":{},"body":{"injectables/RockstarService.html":{}}}],["this.recognitionrepository.createquerybuilder().select(\"*\").innerjoin(\"recognition_tags_tag\",\"test\",\"test.recognitionrecid",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.recognitionrepository.query(querystring",{"_index":865,"title":{},"body":{"injectables/RockstarService.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":988,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rockstarrepo.findone({where",{"_index":917,"title":{},"body":{"injectables/RockstarService.html":{}}}],["this.rockstarrepo.save(rockstar",{"_index":937,"title":{},"body":{"injectables/RockstarService.html":{}}}],["this.rockstarservice.getrockstar(req.user.companyid",{"_index":816,"title":{},"body":{"controllers/RockstarController.html":{}}}],["this.tagrepository.delete({tagid",{"_index":1066,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.find({where:{company",{"_index":1055,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.findoneorfail({relations",{"_index":1060,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(tag",{"_index":1059,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tags.createtag(req.user.companyid",{"_index":1036,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tags.deletetag(req.user.companyid",{"_index":1034,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tags.getcompanytags(req.user.companyid",{"_index":1031,"title":{},"body":{"controllers/TagController.html":{}}}],["this.usersrepository.createquerybuilder('user",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find({companyid",{"_index":1395,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":873,"title":{},"body":{"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone({employeeid",{"_index":1491,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1429,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.softremove([user",{"_index":1398,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1284,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createusermultiple(data",{"_index":1303,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createusermultiple(employeemultiple",{"_index":1291,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getarrayofusers(company_id",{"_index":1277,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getprofile(employee_id",{"_index":1274,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getprofile(req.user.employeeid",{"_index":969,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.loginuser(username",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.removeuser(employeeid",{"_index":1281,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.userstats(employeeid",{"_index":1288,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":899,"title":{},"body":{"injectables/RockstarService.html":{}}}],["throw",{"_index":604,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["throwerror",{"_index":1373,"title":{},"body":{"injectables/UsersService.html":{}}}],["timestamp",{"_index":347,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["title",{"_index":1084,"title":{},"body":{"classes/UserNotification.html":{}}}],["token",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/JwtStrategy.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["token.this",{"_index":588,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["top",{"_index":868,"title":{},"body":{"injectables/RockstarService.html":{}}}],["totalitems",{"_index":745,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["totalpages",{"_index":746,"title":{},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{}}}],["transaction",{"_index":836,"title":{},"body":{"injectables/RockstarService.html":{}}}],["true",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/TagStats.html":{},"classes/Users.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["true})@joincolumn({name",{"_index":1132,"title":{},"body":{"classes/Users.html":{}}}],["try",{"_index":1457,"title":{},"body":{"injectables/UsersService.html":{}}}],["tsconfig.json",{"_index":1665,"title":{},"body":{"index.html":{}}}],["type",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/EditLoginDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/authDto.html":{},"classes/authDtoFull.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type:'int",{"_index":1179,"title":{},"body":{"classes/Users.html":{}}}],["typeorm",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/Login.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeorm/driver/query",{"_index":1372,"title":{},"body":{"injectables/UsersService.html":{}}}],["typeormconfig",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":725,"title":{},"body":{"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{}}}],["typeormmodule.forfeature([login",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1043,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([usernotification",{"_index":638,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":494,"title":{},"body":{"modules/CompanyModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1101,"title":{},"body":{"classes/UserNotification.html":{}}}],["types.ts",{"_index":1577,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ui",{"_index":1571,"title":{},"body":{"dependencies.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["unauthorizedexception",{"_index":574,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RockstarService.html":{},"controllers/TagController.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"classes/Company.html":{},"injectables/CompanyService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/Tag.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["undefined)@joincolumn",{"_index":352,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Recognition.html":{}}}],["undefined)@jointable",{"_index":693,"title":{},"body":{"classes/Recognition.html":{}}}],["unique",{"_index":759,"title":{},"body":{"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["unit",{"_index":1642,"title":{},"body":{"index.html":{}}}],["up",{"_index":1226,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["updatedat",{"_index":342,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["updatedatecolumn",{"_index":374,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["updatedatecolumn({type",{"_index":367,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/RockstarStats.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/Users.html":{}}}],["updateresult",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["upinstall",{"_index":1625,"title":{},"body":{"index.html":{}}}],["uploaded",{"_index":1295,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":1262,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadsinglefilewithpost",{"_index":1205,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadsinglefilewithpost(@uploadedfile",{"_index":1300,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadsinglefilewithpost(file",{"_index":1256,"title":{},"body":{"controllers/UsersController.html":{}}}],["url",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/CompanyController.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["urlsearchparams(query",{"_index":1314,"title":{},"body":{"controllers/UsersController.html":{}}}],["use",{"_index":1599,"title":{},"body":{"index.html":{}}}],["used",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["useful",{"_index":1674,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/CompanyController.html":{},"controllers/NotificationsController.html":{},"controllers/RockstarController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@delete(':id",{"_index":618,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":452,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/RockstarController.html":{},"controllers/TagController.html":{}}}],["useguards(jwtauthguard)@get('all",{"_index":621,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["useguards(jwtauthguard)@get('company/:comp_id",{"_index":1243,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('email",{"_index":1240,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('employeeid/:employ_id",{"_index":1235,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":1223,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('search",{"_index":1248,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('stats/:employeeid",{"_index":1231,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@patch(':employeeid/edit",{"_index":1220,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthrefreshguard",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthrefreshguard)@post('refreshtoken",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["useguards(localauthguard)@patch",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":1261,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1297,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user's",{"_index":623,"title":{},"body":{"controllers/NotificationsController.html":{},"controllers/TagController.html":{},"injectables/UsersService.html":{}}}],["user.company",{"_index":423,"title":{},"body":{"classes/Company.html":{},"injectables/UsersService.html":{}}}],["user.companyid",{"_index":1403,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.email",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.employee",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.employee.companyid",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.employee.employeeid",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.employeeid",{"_index":1401,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1404,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.ismanager",{"_index":1408,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.lastname",{"_index":1406,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.login",{"_index":1431,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.managerid",{"_index":1422,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.numrecsreceived",{"_index":1434,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.numrecssent",{"_index":1433,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.positiontitle",{"_index":1418,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.role",{"_index":993,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["user.startdate",{"_index":1420,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.tagstats",{"_index":1435,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":1229,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EditLoginDto.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["usernotification",{"_index":358,"title":{"classes/UserNotification.html":{}},"body":{"classes/Comment.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/UserNotification.html":{},"coverage.html":{}}}],["usernotification.comment",{"_index":384,"title":{},"body":{"classes/Comment.html":{}}}],["usernotification.reaction",{"_index":672,"title":{},"body":{"classes/Reaction.html":{}}}],["usernotification.recognition",{"_index":707,"title":{},"body":{"classes/Recognition.html":{}}}],["usernotification.report",{"_index":762,"title":{},"body":{"classes/Report.html":{}}}],["usernotification.rockstar",{"_index":789,"title":{},"body":{"classes/Rockstar.html":{}}}],["userpagination",{"_index":737,"title":{"classes/UserPagination.html":{}},"body":{"classes/RecognitionPagination.html":{},"classes/UserPagination.html":{},"coverage.html":{}}}],["users",{"_index":79,"title":{"classes/Users.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/Company.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/Login.html":{},"injectables/NotificationsService.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"classes/RecognitionPagination.html":{},"classes/Report.html":{},"classes/ReturnRockstarDto.html":{},"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"modules/RockstarModule.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{},"classes/UserPagination.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":1324,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":377,"title":{},"body":{"classes/Comment.html":{},"classes/Company.html":{},"classes/Login.html":{},"classes/Reaction.html":{},"classes/Recognition.html":{},"classes/Report.html":{},"classes/Rockstar.html":{},"classes/RockstarStats.html":{},"classes/TagStats.html":{},"classes/UserNotification.html":{}}}],["users.length",{"_index":1176,"title":{},"body":{"classes/Users.html":{}}}],["users.login",{"_index":614,"title":{},"body":{"classes/Login.html":{}}}],["users.push(user",{"_index":1451,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":963,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["users=>users.commentsdeleted",{"_index":390,"title":{},"body":{"classes/Comment.html":{}}}],["users=>users.recsdeleted",{"_index":709,"title":{},"body":{"classes/Recognition.html":{}}}],["users=>users.recsreceived",{"_index":702,"title":{},"body":{"classes/Recognition.html":{}}}],["users=>users.recssent",{"_index":701,"title":{},"body":{"classes/Recognition.html":{}}}],["users=>users.tagstats",{"_index":1080,"title":{},"body":{"classes/TagStats.html":{}}}],["users[0].employeeid",{"_index":1177,"title":{},"body":{"classes/Users.html":{}}}],["userscontroller",{"_index":966,"title":{"controllers/UsersController.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersmodule",{"_index":65,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":499,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RockstarService.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":247,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":1113,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstats(employeeid",{"_index":1365,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["valid",{"_index":1440,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":566,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":568,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":597,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validates",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateuser",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":600,"title":{},"body":{"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{}}}],["value",{"_index":997,"title":{},"body":{"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":474,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/TagController.html":{}}}],["variable",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1714,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifies",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["verifying",{"_index":960,"title":{},"body":{"guards/RolesGuard.html":{}}}],["volume",{"_index":1622,"title":{},"body":{"index.html":{}}}],["vulnurabilities",{"_index":1597,"title":{},"body":{"index.html":{}}}],["watch",{"_index":1637,"title":{},"body":{"index.html":{}}}],["where(\"employeecompanyid",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["where(\"rec.emptocompanyid",{"_index":888,"title":{},"body":{"injectables/RockstarService.html":{}}}],["where(\"user.companyid",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["where('company.companyid",{"_index":536,"title":{},"body":{"injectables/CompanyService.html":{}}}],["where:{companyid:id",{"_index":520,"title":{},"body":{"injectables/CompanyService.html":{}}}],["window.onload",{"_index":1725,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["window.ui",{"_index":1741,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["without",{"_index":1228,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["work",{"_index":1393,"title":{},"body":{"injectables/UsersService.html":{}}}],["world",{"_index":133,"title":{},"body":{"injectables/AppService.html":{}}}],["year",{"_index":776,"title":{},"body":{"classes/Rockstar.html":{},"controllers/RockstarController.html":{},"injectables/RockstarService.html":{},"classes/RockstarStats.html":{},"injectables/UsersService.html":{}}}],["year:year",{"_index":918,"title":{},"body":{"injectables/RockstarService.html":{}}}],["you'd",{"_index":1702,"title":{},"body":{"index.html":{}}}],["yr\",{yr:year",{"_index":894,"title":{},"body":{"injectables/RockstarService.html":{}}}],["yr\",{yr:year}).getrawmany",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["zoom",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/NotificationsModule.html":{},"modules/RecognitionModule.html":{},"modules/RockstarModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get} from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  \n  constructor(private appService: AppService) {}\n  \n  @Get()\n  getHello(){\n    return this.appService.getHello();\n  }\n  // @UseGuards(LocalAuthGuard)\n  // @Post('auth/login')\n  // async login(@Request() req) {\n  //   return this.authService.login(req.user);\n  //   // return req.user;\n  // }\n\n  // @UseGuards(JwtAuthGuard)\n  // @Get('profile')\n  // getProfile(@Request() req) {\n  //   return req.user;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCompanyModule\n\nCompanyModule\n\nAppModule -->\n\nCompanyModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nRecognitionModule\n\nRecognitionModule\n\nAppModule -->\n\nRecognitionModule->AppModule\n\n\n\n\n\nRockstarModule\n\nRockstarModule\n\nAppModule -->\n\nRockstarModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CompanyModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            RecognitionModule\n                        \n                        \n                            RockstarModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { CompanyModule } from './company/company.module';\nimport { RecognitionModule } from './recognition/recognition.module'\nimport { Users } from './common/entity/users.entity';\nimport { Tag } from './common/entity/tag.entity';\nimport { Company } from './common/entity/company.entity';\nimport { RecognitionService } from './recognition/recognition.service';\nimport { TagModule } from './tag/tag.module';\nimport { RockstarModule} from './rockstar/rockstar.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { LoggerOptions } from 'typeorm';\nimport { NotificationsModule } from './notifications/notifications.module';\n\nconst ENV = process.env.NODE_ENV\nlet typeormConfig: TypeOrmModuleOptions = {\n  \n}\n@Module({\n  imports: [ ConfigModule.forRoot({\n    envFilePath: !ENV ? '.env-dev': `.env-${ENV}`\n  }),\n  AuthModule, UsersModule, RecognitionModule, CompanyModule, TagModule, RockstarModule, TypeOrmModule.forRoot({\n    type: \"postgres\",\n    url: process.env.DATABASE_URL && ENV.startsWith('prod') ? process.env.DATABASE_URL : undefined,\n    host: process.env.DATABASE_URL && ENV.startsWith('prod') ? undefined : \"localhost\",\n    port: process.env.DATABASE_URL && ENV.startsWith('prod') ? undefined : 5432,\n    username: process.env.DATABASE_URL && ENV.startsWith('prod') ? undefined : process.env.DB_USERNAME,\n    password: process.env.DATABASE_URL && ENV.startsWith('prod') ? undefined : process.env.DB_PASS,\n    database: process.env.DATABASE_URL && ENV.startsWith('prod') ? undefined : process.env.DB_NAME,\n    entities: [process.env.DB_ENTITIES],\n    ssl: process.env.DATABASE_URL && ENV.startsWith('prod') ? { rejectUnauthorized: false } : false,\n    synchronize: true,\n    logging: process.env.DB_LOGGING as LoggerOptions\n }), NotificationsModule],\n  controllers: [AppController],\n  providers: [AppService],\n\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n            \n                Description\n            \n            \n                Controller for user authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editLogin\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editLogin(req, edits: EditLoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Patch()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:48\n                \n            \n\n\n            \n                \n                    PATCH api endpoint to modify user login details.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object specified by the post request.\n\n                                    \n                                \n                                \n                                    edits\n                                    \n                                                EditLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that specifies the current username and password, and the new changes to the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n                    POST api endpoint to authenticate a user using a username (email) and password.LocalAuthGuard intercepts the request, validates the user login info, and attaches the user object to the request before the login() method is hit.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object specified by the POST request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Endpoint sends back a JWT token which can be used to authorize other restricted API requests.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            refreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthRefreshGuard)@Post('refreshtoken')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n                    POST api endpoint to retrieve a JWT refresh token.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object specified by the POST request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        sends back a new JWT token, and the expiration date.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get, Body, Patch} from '@nestjs/common';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport { AuthService } from './auth.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { JwtAuthRefreshGuard } from './jwt-auth.refresh.guard';\nimport { EditLoginDto } from '../common/dto/edit-login.dto';\nimport { UpdateResult } from 'typeorm';\n\n/**\n * Controller for user authentication.\n */\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n    /**\n     * POST api endpoint to authenticate a user using a username (email) and password.  \n     * `LocalAuthGuard` intercepts the request, validates the user login info, and attaches the user object to the request before the `login()` method is hit.\n     * @param req Request object specified by the POST request\n     * @returns  Endpoint sends back a JWT token which can be used to authorize other restricted API requests.\n     */\n    @UseGuards(LocalAuthGuard)\n    @Post('login')\n    async login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n    \n    /**\n     * POST api endpoint to retrieve a JWT refresh token.\n     * @param req Request object specified by the POST request\n     * @returns sends back a new JWT token, and the expiration date.\n     */\n    @UseGuards(JwtAuthRefreshGuard)\n    @Post('refreshtoken')\n    async refreshToken(@Request() req){\n        return this.authService.refresh(req.user);\n    }\n\n    /**\n     * PATCH api endpoint to modify user login details.\n     * @param req Request object specified by the post request.\n     * @param edits Object that specifies the current username and password, and the new changes to the {@link Login} details.\n     * @returns \n     */\n    @UseGuards(LocalAuthGuard)\n    @Patch()\n    async editLogin(@Request() req, @Body() edits: EditLoginDto): Promise {\n        return this.authService.editLogin(req.user, edits.newDetails);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './jwt.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtRefreshTokenStrategy } from './jwt.refreshtoken.strategy';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Login } from '../common/entity/login.entity';\n\n@Module({\n  imports: [\n    UsersModule, \n    PassportModule,\n    TypeOrmModule.forFeature([Login]),\n    JwtModule.register({\n      secret: jwtConstants.access_secret,\n      signOptions: { expiresIn: '5m' },  \n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, JwtRefreshTokenStrategy],\n  exports: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for the AuthController. Functional logic is kept here.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editLogin\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, loginRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editLogin(user: Login, edits: Login)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:78\n                \n            \n\n\n            \n                \n                    Method that edits the email and password of the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Login\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Login details prior to change.\n\n                                    \n                                \n                                \n                                    edits\n                                    \n                                                Login\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New login details (only email and password)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: Login)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n                    Creates JWT token associated with user information.\nCalled by the AuthController\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Login\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user information that gets associated with the JWT token.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Object with a JWT access token which can be used to authenticate future API calls.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            refresh\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(user)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n                    Retrieves user object from the UsersService and verifies that the password matches.\nThis method is called by the LocalStrategy\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Email of user sent by API request\n\n                                    \n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password of user sent by API request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        User information object if password is correct, null if not. Password is stripped before being returned.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { Login } from '../common/entity/login.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { Users } from '../common/entity/users.entity';\nimport * as bcrypt from 'bcrypt';\n\n\n/**\n * Service for the {@link AuthController}. Functional logic is kept here.\n */\n@Injectable()\nexport class AuthService {\n    constructor(\n        private usersService: UsersService, \n        private jwtService: JwtService,\n        @InjectRepository(Login)\n        private loginRepo: Repository\n        ) {}\n\n    /**\n     * Retrieves user object from the {@link UsersService} and verifies that the password matches.\n     * This method is called by the {@link LocalStrategy}\n     * @param username Email of user sent by API request\n     * @param pass Password of user sent by API request\n     * @returns User information object if password is correct, `null` if not. Password is stripped before being returned.\n     */\n    async validateUser(username: string, pass: string): Promise {\n        const user = await this.usersService.loginUser(username);\n        if (user ) {\n            const passMatch = await bcrypt.compare(pass, user.password);\n            if (passMatch) {\n                const { password, ...result} = user;\n                return result;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Creates JWT token associated with user information.\n     * Called by the {@link AuthController}\n     * @param user user information that gets associated with the JWT token.\n     * @returns Object with a JWT access token which can be used to authenticate future API calls.\n     */\n    async login(user: Login) {\n        const payload = { username: user.email, sub: {...user.employee } };\n        const accessTokenExpireDate = new Date();\n        const refreshTokenExpireDate = new Date();\n        accessTokenExpireDate.setMinutes(accessTokenExpireDate.getMinutes() + 5)\n        refreshTokenExpireDate.setDate(refreshTokenExpireDate.getDate() + 7)\n        return {\n            access_token: this.jwtService.sign(payload),\n            refresh_token: this.jwtService.sign(payload, { expiresIn: '7d', secret: jwtConstants.refresh_secret }),\n            accessTokenExpire: accessTokenExpireDate,   // expire in 5 minutes\n            refreshTokenExpire: refreshTokenExpireDate   // expire in 7 days \n        };\n    }\n    async refresh(user: Users & {email: string}) {\n        const payload = { username: user.email, sub: { ...user } };\n        const accessTokenExpireDate = new Date();\n        accessTokenExpireDate.setMinutes(accessTokenExpireDate.getMinutes() + 5)\n        return {\n            access_token: this.jwtService.sign(payload),\n            accessTokenExpire: accessTokenExpireDate,   // expire in 5 minutes\n        };\n    }\n\n    /**\n     * Method that edits the email and password of the user.\n     * @param user Login details prior to change.\n     * @param edits New login details (only email and password)\n     * @returns\n     */\n    async editLogin(user: Login, edits: Login): Promise {\n        let changes = {};\n        if (edits.email) {\n            changes['email'] = edits.email;\n        }\n        if (edits.password) {\n            const saltOrRounds = 3;\n            const hash = await bcrypt.hash(edits.password, saltOrRounds);\n            changes['password'] = hash;\n        }\n        let result: UpdateResult = await this.loginRepo.createQueryBuilder()\n            .update()\n            .set(changes)\n            .where(\"employeeCompanyId = :company\", {company: user.employee.companyId})\n            .andWhere(\"employeeEmployeeId = :employee\", {employee: user.employee.employeeId})\n            .execute();\n        return result;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/comment.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentID\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    Optional\n                                deletedBy\n                            \n                            \n                                employeeFrom\n                            \n                            \n                                msg\n                            \n                            \n                                notifications\n                            \n                            \n                                reactions\n                            \n                            \n                                recognition\n                            \n                            \n                                reports\n                            \n                            \n                                rockstar\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedBy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employeeFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            msg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserNotification[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reactions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Reaction[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recognition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reports\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Report[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rockstar\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/comment.entity.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, PrimaryGeneratedColumn, Index, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, OneToMany} from 'typeorm';\nimport { Users } from './users.entity';\nimport { Recognition } from './recognition.entity';\nimport { UserNotification } from './notification.entity';\nimport { Report } from './report.entity';\nimport { Rockstar } from './rockstar.entity';\nimport { Reaction } from './reaction.entity';\n\n\n@Entity({name: \"comment\"})\nexport class Comment {\n    @PrimaryGeneratedColumn('increment')\n    commentID: number;\n\n    @Column()\n    msg: string;\n\n    @OneToMany(() => UserNotification, UserNotification => UserNotification.comment)\n    notifications: UserNotification[];\n\n    @OneToMany(() => Report, Report => Report.comment)\n    reports: Report[];\n\n    \n    @OneToMany(() => Reaction, Reaction => Reaction.comment)\n    reactions: Reaction[];\n    \n    @ManyToOne(() => Users)\n    @JoinColumn()\n    employeeFrom: Users;\n\n    @ManyToOne(() => Recognition, Recognition => Recognition.comments)\n    recognition: Recognition ;\n\n    @ManyToOne(() => Rockstar, Rockstar => Rockstar.comments)\n    rockstar: Rockstar ;\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n\n    @ManyToOne(()=>Users, users=>users.commentsDeleted)\n    @JoinColumn()\n    deletedBy?: Users;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Company.html":{"url":"classes/Company.html","title":"class - Company","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Company\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/company.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                companyId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                name\n                            \n                            \n                                recognitions\n                            \n                            \n                                tags\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                setId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            companyId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/company.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/company.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/company.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/company.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recognitions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/company.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tag[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/company.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/company.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/company.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setId()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/common/entity/company.entity.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, OneToMany, JoinColumn, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, BeforeInsert, getRepository } from 'typeorm';\nimport { Tag } from \"./tag.entity\";\nimport { Recognition } from \"./recognition.entity\";\nimport { Users } from './users.entity';\n\n@Entity({name: \"company\"})\nexport class Company {\n    @PrimaryColumn()\n    companyId: number;\n\n    @BeforeInsert()\n    async setId() {\n        if (!this.companyId) {\n            const companies = await getRepository(Company).find({take: 5, order: {companyId:'DESC'}});\n            if (companies.length > 0) {\n                this.companyId = companies[0].companyId + 1;\n            } else {\n                this.companyId = 1;\n            }\n        }\n    }\n    \n    @Column()\n    name: string;\n\n    @OneToMany(()=>Tag, tag=>tag.company)\n    @JoinColumn()\n    tags: Tag[];\n\n    @OneToMany(()=>Recognition, rec=>rec.company)\n    recognitions: Recognition[];\n\n    @OneToMany(()=>Users, user => user.company)\n    users: Users[];\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CompanyController.html":{"url":"controllers/CompanyController.html","title":"controller - CompanyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CompanyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/company/company.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                company\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCompany\n                            \n                            \n                                delete\n                            \n                            \n                                    Async\n                                getCompany\n                            \n                            \n                                    Async\n                                getOneCompany\n                            \n                            \n                                    Async\n                                getUserCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCompany(createcompanyDto: Company)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/company/company.controller.ts:54\n                \n            \n\n\n            \n                \n                    Create another company in the database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createcompanyDto\n                                    \n                                                Company\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Company object with information about the new company to add.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/company/company.controller.ts:66\n                \n            \n\n\n            \n                \n                    Delete a company specified by the comany id parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL parameter that specifies the company id.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompany()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.ServerAdmin)@Get('all')\n                \n            \n\n            \n                \n                    Defined in src/company/company.controller.ts:21\n                \n            \n\n\n            \n                \n                    Endpoint to retrieve all companies from the database.\n\n\n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        List of companies including their tags.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOneCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOneCompany(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.ServerAdmin)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/company/company.controller.ts:44\n                \n            \n\n\n            \n                \n                    Retrieves company information specified by the company id parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL parameter that specifies the company id.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserCompany(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/company/company.controller.ts:32\n                \n            \n\n\n            \n                \n                    Retrieves company information of a specific user. User is specified by the JWT token.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        This is the request info that has been collected from the API request. Contains a user object with user info which is automatically appended by the JwtAuthGuard.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, Get, Delete, Param, Body, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { DeleteResult } from 'typeorm';\nimport { Company } from '../common/entity/company.entity';\nimport { CompanyService } from './company.service';\nimport { Role } from '../common/enum/role.enum';\nimport { RolesGuard } from '../roles/roles.guard';\nimport { Roles } from '../roles/roles.decorator';\n\n@Controller('company')\nexport class CompanyController {\n    constructor (private companyService: CompanyService) {}\n\n    /**\n     * Endpoint to retrieve all companies from the database.\n     * @returns List of companies including their tags.\n     */\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.ServerAdmin)\n    @Get('all')\n    async getCompany(){\n        return await this.companyService.getCompany();\n    }\n    \n    /**\n     * Retrieves company information of a specific user. User is specified by the JWT token.\n     * @param req This is the request info that has been collected from the API request. Contains a user object with user info which is automatically appended by the JwtAuthGuard.\n     * @returns {@link Company} object along with the company's values (tags).\n     */\n    @UseGuards(JwtAuthGuard)\n    @Get()\n    async getUserCompany(@Request() req): Promise{\n        return await this.companyService.getOneCompany(req.user.companyId)\n    }\n\n    /**\n     * Retrieves company information specified by the company id parameter.\n     * @param id URL parameter that specifies the company id.\n     * @returns {@link Company} object along with the company's values (tags).\n     */\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.ServerAdmin)\n    @Get(':id')\n    async getOneCompany(@Param('id') id): Promise{\n        return await this.companyService.getOneCompany(id);\n    }\n\n    /**\n     * Create another company in the database.\n     * @param createcompanyDto Company object with information about the new company to add.\n     * @returns {@link Company} object which was created in the database.\n     */\n    @Post('create')\n    async createCompany(@Body() createcompanyDto: Company) {\n        return await this.companyService.createCompany(createcompanyDto);\n    }\n    \n    /**\n     * Delete a company specified by the comany id parameter\n     * @param id URL parameter that specifies the company id.\n     * @returns {@link DeleteResult} object.\n     */\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.Admin)\n    @Delete(':id')\n    delete(@Param('id') id): Promise{\n        return this.companyService.deleteComp(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CompanyModule.html":{"url":"modules/CompanyModule.html","title":"module - CompanyModule","body":"\n                   \n\n\n\n\n    Modules\n    CompanyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CompanyModule\n\n\n\ncluster_CompanyModule_exports\n\n\n\ncluster_CompanyModule_providers\n\n\n\n\nCompanyService \n\nCompanyService \n\n\n\nCompanyModule\n\nCompanyModule\n\nCompanyService  -->\n\nCompanyModule->CompanyService \n\n\n\n\n\nCompanyService\n\nCompanyService\n\nCompanyModule -->\n\nCompanyService->CompanyModule\n\n\n\n\n\nTagService\n\nTagService\n\nCompanyModule -->\n\nTagService->CompanyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/company/company.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CompanyService\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CompanyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CompanyService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CompanyService } from './company.service';\nimport { CompanyController } from './company.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Company } from '../common/entity/company.entity';\nimport { Users } from '../common/entity/users.entity';\nimport { Login } from '../common/entity/login.entity';\nimport { Tag } from '../common/entity/tag.entity';\nimport { TagService } from '../tag/tag.service';\n\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, Login, Company, Tag])],\n  providers: [CompanyService,TagService],\n  controllers: [CompanyController],\n  exports: [CompanyService],\n})\nexport class CompanyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CompanyService.html":{"url":"injectables/CompanyService.html","title":"injectable - CompanyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CompanyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/company/company.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCompany\n                            \n                            \n                                    Async\n                                deleteComp\n                            \n                            \n                                    Async\n                                getCompany\n                            \n                            \n                                    Async\n                                getOneCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(companyRepository: Repository, usersRepository: Repository, loginRepo: Repository, tagRepository: Repository, tagservice: TagService)\n                    \n                \n                        \n                            \n                                Defined in src/company/company.service.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor is called automatically by Nest.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagservice\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCompany(createcompanyDto: Company)\n                \n            \n\n\n            \n                \n                    Defined in src/company/company.service.ts:54\n                \n            \n\n\n            \n                \n                    Creates a company in the database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createcompanyDto\n                                    \n                                                Company\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Company object that specifies new company information.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteComp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComp(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/company/company.service.ts:109\n                \n            \n\n\n            \n                \n                    Deletes a company from the database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        specifies the id of the company that should be deleted.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompany()\n                \n            \n\n\n            \n                \n                    Defined in src/company/company.service.ts:36\n                \n            \n\n\n            \n                \n                    Retrieves all companies in database.\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Array of Company objects.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOneCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOneCompany(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/company/company.service.ts:45\n                \n            \n\n\n            \n                \n                    Retrieves company specified by ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Specifies the companyID to search for.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../common/entity/tag.entity';\nimport { DeleteResult, Repository } from 'typeorm';\nimport { Company } from '../common/entity/company.entity';\nimport { Users } from '../common/entity/users.entity';\nimport { Role } from '../common/enum/role.enum';\nimport { Login } from '../common/entity/login.entity';\nimport { TagService } from '../tag/tag.service';\nimport * as bcrypt from 'bcrypt';\n\n\n@Injectable()\nexport class CompanyService {\n    /**\n     * Constructor is called automatically by Nest.\n     * @param companyRepository \n     */\n    constructor(\n        @InjectRepository(Company)\n        private companyRepository: Repository,\n        @InjectRepository(Users)\n        private usersRepository: Repository,\n        @InjectRepository(Login)\n        private loginRepo: Repository,\n        @InjectRepository(Tag)\n        private tagRepository: Repository, \n        private tagservice: TagService,\n    \n    ){}\n\n    /**\n     * Retrieves all companies in database.\n     * @returns Array of Company objects.\n     */\n    async getCompany(): Promise{\n        return await this.companyRepository.find({relations:[\"tags\"]});\n    }\n\n    /**\n     * Retrieves company specified by ID.\n     * @param id Specifies the companyID to search for.\n     * @returns {@link Company} object.\n     */\n    async getOneCompany(id:number): Promise{\n        return await this.companyRepository.findOne({relations:[\"tags\"], where:{companyId:id}})\n    }\n\n    /**\n     * Creates a company in the database.\n     * @param createcompanyDto Company object that specifies new company information.\n     * @returns {@link Company} object that was created in the database.\n     */\n    async createCompany(createcompanyDto: Company): Promise {\n        const company = new Company();\n\n        company.companyId = createcompanyDto.companyId;\n        company.name = createcompanyDto.name;\n        company.users = createcompanyDto.users;\n\n        company.recognitions = createcompanyDto.recognitions;\n        const savedCompany = await this.companyRepository.save(company);\n\n        // Create tags if tags do not exist in DB\n        // company.tags = createcompanyDto.tags;\n        if (createcompanyDto.tags != null && createcompanyDto.tags != undefined){\n            for (let i = 0; i {\n        const company = await this.companyRepository.createQueryBuilder('company')\n        .where('company.companyId = :id', {id: id})\n        .leftJoinAndSelect('company.users', 'users')\n        .leftJoinAndSelect('users.login', 'login')\n        .leftJoinAndSelect('company.recognitions', 'recognitions')\n        .leftJoinAndSelect('company.tags', 'tags')\n        .getOne();\n        return await this.companyRepository.softRemove([company]);\n    }\n} \n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRecDto.html":{"url":"classes/CreateRecDto.html","title":"class - CreateRecDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRecDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/create-rec.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                company\n                            \n                            \n                                    Readonly\n                                employeeFrom\n                            \n                            \n                                    Readonly\n                                employeeTo\n                            \n                            \n                                    Readonly\n                                msg\n                            \n                            \n                                    Readonly\n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            company\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/create-rec.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            employeeFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/create-rec.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            employeeTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/create-rec.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            msg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/create-rec.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/create-rec.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateRecDto{\n    readonly company: number;\n    readonly employeeFrom: number;\n    readonly employeeTo: number;\n    readonly msg: string;\n    readonly tags: number[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditLoginDto.html":{"url":"classes/EditLoginDto.html","title":"class - EditLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/edit-login.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                newDetails\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newDetails\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Login\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/edit-login.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/edit-login.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/edit-login.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Login } from '../entity/login.entity';\n\nexport class EditLoginDto{\n    username: string;\n    password: string;\n    newDetails: Login;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthRefreshGuard.html":{"url":"injectables/JwtAuthRefreshGuard.html","title":"injectable - JwtAuthRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthRefreshGuard extends AuthGuard('jwt-refreshtoken') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.refreshtoken.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.refreshtoken.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.refreshtoken.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Injectable, UnauthorizedException, Body } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { jwtConstants } from './constants';\n \n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(Strategy, 'jwt-refreshtoken') {\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.refresh_secret,\n        });\n    }\n  \n    async validate(payload: any) {\n      return {...payload.sub, email: payload.username };\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Custom strategy that extends the PassportStrategy class. \nThis strategy is used to validate the JWT token when the JwtAuthGuard is used.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:26\n                \n            \n\n\n            \n                \n                    Method to return objecct associated with the JWT token.This function is automatically called by the JwtAuthGuard.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        payload object associated with JWT token (Automatically passed by passport).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Returns user info object with employeeId, companyId, role, and email.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n/**\n * Custom strategy that extends the `PassportStrategy` class. \n * This strategy is used to validate the JWT token when the {@link JwtAuthGuard} is used.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.access_secret,\n        });\n    }\n\n    /**\n     * Method to return objecct associated with the JWT token.  \n     * This function is automatically called by the {@link JwtAuthGuard}.\n     * @param payload payload object associated with JWT token (Automatically passed by passport).\n     * @returns Returns user info object with `employeeId`, `companyId`, `role`, and `email`.\n     */\n    async validate(payload: any) {\n        return { ...payload.sub, email: payload.username };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Custom strategy that extends the PassportStrategy class. \nThis strategy is used to validate a user by their email and password when the LocalAuthGuard is used.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:23\n                \n            \n\n\n            \n                \n                    Method that starts the user validation process using a username and password.\nThis method is called automatically by the LocalAuthGuard.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User email.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        User info object with companyId, \n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n/**\n * Custom strategy that extends the `PassportStrategy` class. \n * This strategy is used to validate a user by their email and password when the {@link LocalAuthGuard} is used.\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthService) {\n        super();\n    }\n\n    /**\n     * Method that starts the user validation process using a username and password.\n     * This method is called automatically by the {@link LocalAuthGuard}.\n     * @param username User email.\n     * @param password User password.\n     * @returns User info object with companyId, \n     */\n    async validate(username: string, password:string): Promise {\n        const user = await this.authService.validateUser(username, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/login.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                email\n                            \n                            \n                                employee\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/login.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/login.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/login.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/login.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/login.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/login.entity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, OneToOne, JoinColumn, CreateDateColumn, UpdateDateColumn, DeleteDateColumn } from 'typeorm';\nimport { Users } from \"./users.entity\";\n\n@Entity({name: \"login\"})\nexport class Login {\n    @PrimaryColumn()\n    email: string;\n\n    @Column()\n    password: string;\n\n    @OneToOne(() => Users, users => users.login)\n    @JoinColumn()\n    employee: Users;\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationsController.html":{"url":"controllers/NotificationsController.html","title":"controller - NotificationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notifications\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('all')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:16\n                \n            \n\n\n            \n                \n                    Returns a list of all recognitions in the database for the current user's company\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        an array of {\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Request, Delete, Param } from '@nestjs/common';\nimport { UserNotification } from '../common/entity/notification.entity';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { NotificationsService } from './notifications.service';\nimport { DeleteResult } from 'typeorm';\n\n@Controller('notifications')\nexport class NotificationsController {\n    constructor(private notificationService: NotificationsService){}\n    /**\n     * Returns a list of all recognitions in the database for the current user's company\n     * @returns an array of {@link Recognition} objects\n     */\n    @UseGuards(JwtAuthGuard)\n    @Get('all')\n    findAll(@Request() req): Promise{\n        return this.notificationService.findNotifications(req.user.employeeId, req.user.companyId);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Delete(':id')\n    delete(@Param('id') id): Promise{\n        return this.notificationService.deleteNotification(id);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\n\nNotificationsService \n\nNotificationsService \n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notifications/notifications.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserNotification } from '../common/entity/notification.entity';\nimport { NotificationsController } from './notifications.controller';\nimport { NotificationsService } from './notifications.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserNotification])],\n  controllers: [NotificationsController],\n  providers: [NotificationsService],\n  exports: [NotificationsService]\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteNotification\n                            \n                            \n                                    Async\n                                findNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/notifications/notifications.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteNotification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteNotification(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findNotifications\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findNotifications(empId: number, companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    empId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Users } from '../common/entity/users.entity';\nimport { DeleteResult, Repository } from 'typeorm';\nimport { UserNotification } from '../common/entity/notification.entity';\n\n@Injectable()\nexport class NotificationsService {\n    constructor(\n        @InjectRepository(UserNotification)\n        private notificationRepository: Repository,\n    ){} \n\n    async findNotifications(empId: number, companyId: number): Promise{\n        const emp = new Users()\n        emp.companyId = companyId\n        emp.employeeId = empId\n        return await this.notificationRepository.find({where: {employeeTo: emp  }, relations: [\"employeeTo\", \"comment\", \"recognition\", \"report\", \"reaction\", \"rockstar\"]});\n    }\n\n    async deleteNotification(id: number): Promise {        \n        return await this.notificationRepository.softDelete({notificationID:id});\n    }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reaction.html":{"url":"classes/Reaction.html","title":"class - Reaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/reaction.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                employeeFrom\n                            \n                            \n                                notifications\n                            \n                            \n                                reactionID\n                            \n                            \n                                recognition\n                            \n                            \n                                rockstar\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employeeFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserNotification[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reactionID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recognition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rockstar\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/reaction.entity.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, PrimaryGeneratedColumn, Index, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, OneToMany} from 'typeorm';\nimport { Users } from './users.entity';\nimport { Recognition } from './recognition.entity';\nimport { UserNotification } from './notification.entity';\nimport { Rockstar } from './rockstar.entity';\nimport { Comment } from './comment.entity';\n\n\n@Entity({name: \"reaction\"})\nexport class Reaction {\n    @PrimaryGeneratedColumn('increment')\n    reactionID: number;\n    \n    @ManyToOne(() => Users)\n    employeeFrom: Users;\n\n    @ManyToOne(() => Recognition, Recognition => Recognition.reactions)\n    recognition: Recognition ;\n\n    @ManyToOne(() => Rockstar, Rockstar => Rockstar.reactions)\n    rockstar: Rockstar ;\n\n    @ManyToOne(() => Comment, Comment => Comment.reactions)\n    comment: Comment ;\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n\n    @OneToMany(() => UserNotification, UserNotification => UserNotification.reaction)\n    notifications: UserNotification[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Recognition.html":{"url":"classes/Recognition.html","title":"class - Recognition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Recognition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/recognition.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                    Optional\n                                company\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    Optional\n                                deletedBy\n                            \n                            \n                                empFrom\n                            \n                            \n                                empTo\n                            \n                            \n                                    Optional\n                                msg\n                            \n                            \n                                    Optional\n                                notifications\n                            \n                            \n                                    Optional\n                                reactions\n                            \n                            \n                                recId\n                            \n                            \n                                    Optional\n                                reports\n                            \n                            \n                                    Optional\n                                rockstar\n                            \n                            \n                                tags\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            company\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Company\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedBy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            empFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            empTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            msg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserNotification[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            reactions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Reaction[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            reports\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Report[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            rockstar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rockstar\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tag[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/recognition.entity.ts:51\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, JoinColumn, JoinTable, ManyToOne, Index, ManyToMany, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, OneToMany } from 'typeorm';\nimport { Company } from \"./company.entity\";\nimport { Users } from \"./users.entity\";\nimport { Tag } from \"./tag.entity\";\nimport { Report } from './report.entity';\nimport { Rockstar } from './rockstar.entity';\nimport { Comment } from './comment.entity';\nimport { Reaction } from './reaction.entity';\nimport { UserNotification } from './notification.entity'\n\n@Entity({name: \"recognition\"})\n@Index([\"empFrom\", \"empTo\", \"createdAt\"])\nexport class Recognition {\n    @PrimaryGeneratedColumn()\n    recId: number;\n\n    @ManyToOne(()=> Company, company=>company.recognitions)\n    company?: Company;\n\n    @ManyToOne(()=> Users, users=>users.recsSent)\n    @JoinColumn()\n    empFrom: Users;\n\n    @ManyToOne(()=> Users, users=>users.recsReceived)\n    @JoinColumn()\n    empTo: Users;\n\n    @ManyToMany(()=>Tag, tag=>tag.rec)\n    @JoinTable()\n    tags: Tag[];\n\n    @Column()\n    msg?: string;\n\n    @OneToMany(() => Report, Report => Report.recognition)\n    reports?: Report[];\n\n    @OneToMany(() => Comment, Comment => Comment.recognition)\n    comments: Comment[];\n\n    @OneToMany(() => UserNotification, UserNotification => UserNotification.recognition)\n    notifications?: UserNotification[];\n\n    @OneToMany(() => Reaction, Reaction => Reaction.recognition)\n    reactions?: Reaction[];\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n\n    @ManyToOne(()=>Users, users=>users.recsDeleted)\n    @JoinColumn()\n    deletedBy?: Users;\n\n    @ManyToOne(()=>Rockstar, rockstar=>rockstar.recognitions, {nullable: true})\n    rockstar?: Rockstar;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecognitionModule.html":{"url":"modules/RecognitionModule.html","title":"module - RecognitionModule","body":"\n                   \n\n\n\n\n    Modules\n    RecognitionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecognitionModule\n\n\n\ncluster_RecognitionModule_exports\n\n\n\ncluster_RecognitionModule_providers\n\n\n\n\nRecognitionService \n\nRecognitionService \n\n\n\nRecognitionModule\n\nRecognitionModule\n\nRecognitionService  -->\n\nRecognitionModule->RecognitionService \n\n\n\n\n\nRecognitionService\n\nRecognitionService\n\nRecognitionModule -->\n\nRecognitionService->RecognitionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recognition/recognition.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecognitionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecognitionController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecognitionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RecognitionController } from './recognition.controller';\nimport { RecognitionService } from './recognition.service';\nimport {Recognition} from '../common/entity/recognition.entity'\nimport { Users } from '../common/entity/users.entity';\nimport { Tag } from '../common/entity/tag.entity';\nimport { Company } from '../common/entity/company.entity';\nimport { TagStats } from '../common/entity/tagstats.entity';\nimport {Report} from '../common/entity/report.entity';\nimport {Comment} from '../common/entity/comment.entity';\nimport {Reaction} from '../common/entity/reaction.entity';\nimport { UserNotification } from '../common/entity/notification.entity';\nimport { NotificationsModule } from '../notifications/notifications.module';\n@Module({\n  imports: [ TypeOrmModule.forFeature([ Recognition, Users, Tag, Company, TagStats, Report, Comment, Reaction, UserNotification])],\n  providers: [RecognitionService],\n  controllers: [ RecognitionController],\n  exports: [RecognitionService]\n})\nexport class RecognitionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecognitionPagination.html":{"url":"classes/RecognitionPagination.html","title":"class - RecognitionPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecognitionPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/pagination.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                items\n                            \n                            \n                                links\n                            \n                            \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/pagination.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            links\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/pagination.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            meta\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/pagination.dto.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Recognition } from \"../entity/recognition.entity\";\nimport { Users } from \"../entity/users.entity\";\n\n\nexport class UserPagination{\n    items: Users[];\n    links: {\n        first: string,\n        last: string,\n        next: string,\n        previous: string,\n    }\n    meta: {\n        currentPage: number,\n        itemCount: number,\n        itemsPerPage: number,\n        totalItems: number,\n        totalPages: number,\n    }\n}\n\nexport class RecognitionPagination{\n    items: Recognition[];\n    links: {\n        first: string,\n        last: string,\n        next: string,\n        previous: string,\n    }\n    meta: {\n        currentPage: number,\n        itemCount: number,\n        itemsPerPage: number,\n        totalItems: number,\n        totalPages: number,\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Report.html":{"url":"classes/Report.html","title":"class - Report","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Report\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/report.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                employeeFrom\n                            \n                            \n                                msg\n                            \n                            \n                                notifications\n                            \n                            \n                                recognition\n                            \n                            \n                                reportID\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employeeFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            msg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserNotification[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recognition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reportID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/report.entity.ts:33\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, PrimaryGeneratedColumn,  Index, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, OneToMany } from 'typeorm';\nimport { Users } from './users.entity';\nimport { Recognition } from './recognition.entity';\nimport { UserNotification } from './notification.entity';\nimport { Comment } from './comment.entity';\n\n@Entity({name: \"report\"})\n@Index([\"employeeFrom\",\"recognition\",\"createdAt\"], {unique: true})\nexport class Report {\n    @PrimaryGeneratedColumn('increment')\n    reportID: number;\n    \n    @ManyToOne(() => Users)\n    @JoinColumn()\n    employeeFrom: Users;\n\n    @ManyToOne(() => Recognition, Recognition => Recognition.reports)\n    recognition: Recognition ;\n\n    @ManyToOne(() => Comment, Comment => Comment.reports)\n    comment: Comment ;\n\n    @Column()\n    msg: string;\n\n    @OneToMany(() => UserNotification, UserNotification => UserNotification.report)\n    notifications: UserNotification[];\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReturnRockstarDto.html":{"url":"classes/ReturnRockstarDto.html","title":"class - ReturnRockstarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReturnRockstarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/rockstar-stats.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rockstar\n                            \n                            \n                                rockstarStats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rockstar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/rockstar-stats.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstarStats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RockstarStats[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/rockstar-stats.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Rockstar } from \"../entity/rockstar.entity\";\nimport { RockstarStats } from \"../entity/rockstarstats.entity\";\nimport { Users } from \"../entity/users.entity\";\n\nexport class ReturnRockstarDto{\n    rockstar: Rockstar;\n    rockstarStats: RockstarStats[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rockstar.html":{"url":"classes/Rockstar.html","title":"class - Rockstar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rockstar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/rockstar.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                compID\n                            \n                            \n                                month\n                            \n                            \n                                notifications\n                            \n                            \n                                    Optional\n                                reactions\n                            \n                            \n                                recognitions\n                            \n                            \n                                rockstar\n                            \n                            \n                                rockstarID\n                            \n                            \n                                stats\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            compID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            month\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserNotification[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            reactions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Reaction[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recognitions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstarID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RockstarStats[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            year\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstar.entity.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, PrimaryGeneratedColumn, Index, ManyToMany, JoinColumn, UpdateDateColumn, DeleteDateColumn, OneToMany } from 'typeorm';\nimport { Users } from './users.entity';\nimport { Recognition } from './recognition.entity';\nimport { RockstarStats } from './rockstarstats.entity';\nimport { UserNotification } from './notification.entity';\nimport { Comment } from './comment.entity';\nimport { Reaction } from './reaction.entity';\n\n@Entity({name: \"rockstar\"})\n@Index([\"compID\", \"month\", \"year\"], {unique: true})\nexport class Rockstar {\n    @PrimaryGeneratedColumn('increment')\n    rockstarID: number;\n\n    @Column()\n    month: number;\n\n    @Column()\n    year: number; \n\n    @OneToMany(() => UserNotification, UserNotification => UserNotification.rockstar)\n    notifications: UserNotification[];\n\n    @OneToMany(() => Comment, Comment => Comment.rockstar)\n    comments: Comment[];\n\n    @OneToMany(() => Reaction, Reaction => Reaction.rockstar)\n    reactions?: Reaction[];\n\n    @Column()\n    compID: number;\n    \n    @OneToMany(() => RockstarStats, RockstarStats => RockstarStats.rockstar)\n    stats: RockstarStats[];\n\n    @OneToMany(() => Recognition, Recognition => Recognition.rockstar)\n    recognitions: Recognition[];\n\n    @ManyToOne(() => Users)\n    rockstar: Users;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RockstarController.html":{"url":"controllers/RockstarController.html","title":"controller - RockstarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RockstarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rockstar/rockstar.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rockstar\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRockstar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstar(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/rockstar/rockstar.controller.ts:26\n                \n            \n\n\n            \n                \n                    Returns a rockstar entity object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {RockstarService} from './rockstar.service';\nimport {Recognition} from '../common/entity/recognition.entity';\nimport {Report} from '../common/entity/report.entity';\nimport {Users} from '../common/entity/users.entity';\nimport { Controller, Get, Post, Delete, Body, Param, Request, UseGuards} from '@nestjs/common';\nimport { DeleteResult } from 'typeorm';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { RolesGuard } from '../roles/roles.guard';\nimport { Roles } from '../roles/roles.decorator';\nimport { Role } from '../common/enum/role.enum';\nimport { Rockstar } from '../common/entity/rockstar.entity';\nimport { ReturnRockstarDto } from '../common/dto/rockstar-stats.dto';\n\n@Controller('rockstar')\nexport class RockstarController {\n    constructor(private rockstarService: RockstarService){}\n\n    //endpoints here\n    /**\n     * Returns a rockstar entity object\n     * @param req \n     * @returns {@link rockstar}\n     */\n    @UseGuards(JwtAuthGuard)\n    @Get()\n    async getRockstar(@Request() req) {\n        let date: Date = new Date();\n        let prevMonth: number = -1;\n        let year = date.getFullYear()\n        if (date.getMonth() == 0)\n        {\n            prevMonth = 12;\n            year = date.getFullYear() - 1;\n        }\n        else\n        {\n            //SQL takes 1 based months but the date object has 0 based months.\n            prevMonth = date.getMonth();\n        }\n        //gets the rockstar user object\n        let returnVal = await this.rockstarService.getRockstar(req.user.companyId, prevMonth, year);\n       \n        return returnVal;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RockstarModule.html":{"url":"modules/RockstarModule.html","title":"module - RockstarModule","body":"\n                   \n\n\n\n\n    Modules\n    RockstarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RockstarModule\n\n\n\ncluster_RockstarModule_providers\n\n\n\ncluster_RockstarModule_exports\n\n\n\n\nRockstarService \n\nRockstarService \n\n\n\nRockstarModule\n\nRockstarModule\n\nRockstarService  -->\n\nRockstarModule->RockstarService \n\n\n\n\n\nRockstarService\n\nRockstarService\n\nRockstarModule -->\n\nRockstarService->RockstarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/rockstar/rockstar.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RockstarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RockstarController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RockstarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RockstarController } from './rockstar.controller';\nimport { RockstarService } from './rockstar.service';\nimport {Recognition} from '../common/entity/recognition.entity'\nimport { Users } from '../common/entity/users.entity';\nimport { Tag } from '../common/entity/tag.entity';\nimport { Company } from '../common/entity/company.entity';\nimport { TagStats } from '../common/entity/tagstats.entity';\nimport {Report} from '../common/entity/report.entity'\nimport { Rockstar} from '../common/entity/rockstar.entity'\nimport {RockstarStats} from '../common/entity/rockstarstats.entity'\n@Module({\n  imports: [ TypeOrmModule.forFeature([ Recognition, Users, Tag, Company, TagStats, Report, Rockstar, RockstarStats])],\n  providers: [RockstarService],\n  controllers: [ RockstarController],\n  exports: [RockstarService]\n})\nexport class RockstarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RockstarService.html":{"url":"injectables/RockstarService.html","title":"injectable - RockstarService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RockstarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rockstar/rockstar.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRockstar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, companyRepository: Repository, tagRepository: Repository, recognitionRepository: Repository, tagStatsRepo: Repository, reportRepo: Repository, rockstarRepo: Repository, rockstarStatsRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/rockstar/rockstar.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recognitionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagStatsRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reportRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rockstarRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rockstarStatsRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstar(companyId: number, month: number, year: number)\n                \n            \n\n\n            \n                \n                    Defined in src/rockstar/rockstar.service.ts:50\n                \n            \n\n\n            \n                \n                    GET endpoint to get all user in company\nReturns Users[ ]\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        /companyID - number\n\n                                    \n                                \n                                \n                                    month\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        /numerical month 1-12\n\n                                    \n                                \n                                \n                                    year\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        /numerical year (2021)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { DeleteResult, getConnection, Repository, Transaction, getManager } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Recognition } from '../common/entity/recognition.entity';\nimport { Company } from '../common/entity/company.entity';\nimport { Users } from '../common/entity/users.entity';\nimport { Tag } from '../common/entity/tag.entity';\nimport { TagStats } from '../common/entity/tagstats.entity';\nimport { CreateRecDto } from '../common/dto/create-rec.dto';\nimport {Report} from '../common/entity/report.entity';\nimport { reverse } from 'node:dns';\nimport { Rockstar } from '../common/entity/rockstar.entity';\nimport { RockstarStats} from '../common/entity/rockstarstats.entity';\nimport { ReturnRockstarDto} from '../common/dto/rockstar-stats.dto';\n\n\n\n\n@Injectable()\nexport class RockstarService {\n    constructor(\n        @InjectRepository(Users)\n        private usersRepository: Repository,\n        @InjectRepository(Company)\n        private companyRepository: Repository,\n        @InjectRepository(Tag)\n        private tagRepository: Repository, \n        @InjectRepository(Recognition)\n        private recognitionRepository: Repository,\n        @InjectRepository(TagStats)\n        private tagStatsRepo: Repository,\n        @InjectRepository(Report)\n        private reportRepo: Repository,\n        @InjectRepository(Rockstar)\n        private rockstarRepo: Repository,\n        @InjectRepository(RockstarStats)\n        private rockstarStatsRepo: Repository\n    ){} \n    \n    /**\n     * `GET` endpoint to get all user in company\n     * \n     * Returns {@link Users}[ ]\n     * @param companyId /companyID - number\n     * @param month /numerical month 1-12\n     * @param year /numerical year (2021)\n     * @returns {@link ReturnRockstarDto} /object containing all the necessary info on the rockstar\n     */\n\n    async getRockstar( companyId: number, month: number, year: number): Promise {\n       \n         //gets a list of recognitions for the given month, year and company\n        let queryString :string = `SELECT t1.empID, t1.numRecog FROM (select recognition.\"empToEmployeeId\" as empID, count(recognition.\"empToEmployeeId\") as numRecog from Recognition where recognition.\"empToCompanyId\" = ${companyId} and extract(Month from recognition.\"createdAt\") = ${ month } and extract(Year from recognition.\"createdAt\") = ${ year } group by recognition.\"empToEmployeeId\" ) t1 group by t1.empID, t1.numRecog order by t1.numrecog DESC;`\n\n        let retQuery= await this.recognitionRepository.query(queryString);\n        //takes the first employeeID in the list (sorted so highest number of recognitions is on top, and finds the employee in the DB)\n        let rockstarUser: Users;\n        let recogs: Recognition[] = [];\n        if (retQuery.length > 0) {\n            rockstarUser = await this.usersRepository.findOne( {where: { employeeId : retQuery[0].empid}});\n            recogs = await   this.recognitionRepository.createQueryBuilder('rec')\n            .leftJoinAndSelect('rec.empTo', 'empTo').leftJoinAndSelect('rec.empFrom', 'empFrom')\n            .leftJoinAndSelect('rec.tags', 'tags').leftJoinAndSelect('rec.reactions', 'reactions')\n            .leftJoinAndSelect('rec.comments', 'comments').leftJoinAndSelect('reactions.employeeFrom', 'reactFrom')\n            .leftJoinAndSelect('comments.employeeFrom', 'commentFrom')\n            .leftJoinAndSelect('comments.reactions', 'commentReactions').leftJoinAndSelect('commentReactions.employeeFrom', 'commentReactionsFrom')\n            .where(\"rec.empToCompanyId = :compID\", {compID : rockstarUser.companyId}).andWhere(\"rec.empToEmployeeId = :empID\", {empID: rockstarUser.employeeId})\n            .andWhere(\"extract(Month from rec.createdAt) = :prvMonth\",{prvMonth:month}).andWhere(\"extract(Year from rec.createdAt) = :yr\",{yr:year}).\n            getMany();\n        }\n\n        //gets recognitions for this emloyee\n\n        let tagStatsList: RockstarStats[] = [];\n        let tags: Tag[] = [];\n        \n        //loops through each recognition, tallying the tags they have\n        for (let i = 0; i  aTag.tagId === tag.tagId)\n                    \n                \n                    if (tagSet === -1)\n                    {\n                        tags.push(tag)\n                        let currStat = new RockstarStats();\n                        currStat.countReceived = 1;\n                        currStat.tag = tag;\n                        currStat.month = month;\n                        currStat.year = year;\n                        tagStatsList.push(currStat);\n                    }\n                    else \n                    {\n                        tagStatsList[tagSet].countReceived = tagStatsList[tagSet].countReceived + 1;\n                    }\n            }\n\n        }\n\n      \n        //checks if the rockstar is saved already\n        let savedRockstar = await this.rockstarRepo.findOne({where: { compID: companyId, month: month, year:year}, relations:['rockstar', 'recognitions', 'stats', 'recognitions.empFrom', 'recognitions.empTo', 'recognitions.tags', 'recognitions.comments', 'recognitions.comments.employeeFrom', 'recognitions.reactions', 'recognitions.reactions.employeeFrom', 'recognitions.comments.reactions', 'recognitions.comments.reactions.employeeFrom']});\n\n        //if not already there, saves it \n        if (!savedRockstar && rockstarUser)\n        {\n            //assembles the rockstar object\n            let rockstar: Rockstar = new Rockstar();\n            rockstar.month = month;\n            rockstar.year = year;\n            rockstar.recognitions = recogs;\n\n            rockstar.rockstar = rockstarUser;\n            rockstar.compID = rockstarUser.companyId;\n            await this.rockstarRepo.save(rockstar);\n            savedRockstar = await this.rockstarRepo.findOne({where: { compID: companyId, month: month, year:year}, relations:['rockstar', 'recognitions', 'stats', 'recognitions.empFrom', 'recognitions.empTo', 'recognitions.tags', 'recognitions.comments', 'recognitions.comments.employeeFrom', 'recognitions.reactions', 'recognitions.reactions.employeeFrom', 'recognitions.comments.reactions', 'recognitions.comments.reactions.employeeFrom']});\n        }\n\n        //passes the rockstar's ID in the rockstar table to the tags \n        for (let i = 0; i\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RockstarStats.html":{"url":"classes/RockstarStats.html","title":"class - RockstarStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RockstarStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/rockstarstats.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                countReceived\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                month\n                            \n                            \n                                rockstar\n                            \n                            \n                                rockstarID\n                            \n                            \n                                tag\n                            \n                            \n                                tagstatId\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countReceived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            month\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rockstar\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstarID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tag\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tag\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tagstatId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            year\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/rockstarstats.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, PrimaryGeneratedColumn, PrimaryColumn, Index, CreateDateColumn, UpdateDateColumn, DeleteDateColumn } from 'typeorm';\nimport { Users } from './users.entity';\nimport { Tag } from './tag.entity'; \nimport { Rockstar } from './rockstar.entity'\n\n@Entity({name: \"rockstarstats\"})\n@Index([\"month\",\"year\",\"rockstarID\",\"tag\"], {unique: true})\nexport class RockstarStats {\n    @PrimaryGeneratedColumn('increment')\n    tagstatId: number;\n    \n    @ManyToOne(() => Rockstar)\n    rockstar: Rockstar;\n\n    @ManyToOne(() => Tag)\n    tag: Tag;\n\n\n    @Column({default: 0})\n    countReceived: number;\n\n    @Column()\n    month: number;\n\n    @Column()\n    year: number;\n\n    @Column()\n    rockstarID: number\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/roles/roles.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Roles guard is responsible for verifying if a user should be allowed to access the endpoint.\n\n                \n\n\n\n                \n                Example\n                \n                \n                            \n                                import { Roles } from '../roles/roles.decorator';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UsersService } from './users.service';\nimport { Role } from '../roles/role.enum';\nimport { RolesGuard } from '../roles/roles.guard';\n＠Controller('users')\nexport class UsersController {\n       constructor (private usersService: UsersService) {}\n       ＠UseGuards(JwtAuthGuard, RolesGuard)\n       ＠Roles(Role.Admin, Role.Employee)\n       ＠Get('profile')\n       getProfile(＠Request() req) {\n           return this.usersService.getProfile(req.user.employeeId, req.user.companyId);\n       }\n}\n                            \n                \n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.guard.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.guard.ts:37\n                \n            \n\n\n            \n                \n                    This method verifies the user role. Validation is done using the Role enum.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        This parameter is passed automatically by nest.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if user role matches the restriction, false otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../common/enum/role.enum';\nimport { ROLES_KEY } from './roles.decorator';\n\n/**\n * Roles guard is responsible for verifying if a user should be allowed to access the endpoint.\n * \n * @example\n * import { Roles } from '../roles/roles.decorator';\n * import { JwtAuthGuard } from '../auth/jwt-auth.guard';\n * import { UsersService } from './users.service';\n * import { Role } from '../roles/role.enum';\n * import { RolesGuard } from '../roles/roles.guard';\n * ＠Controller('users')\n * export class UsersController {\n *                   constructor (private usersService: UsersService) {}\n *                   ＠UseGuards(JwtAuthGuard, RolesGuard)\n *                   ＠Roles(Role.Admin, Role.Employee)\n *                   ＠Get('profile')\n *                   getProfile(＠Request() req) {\n *                       return this.usersService.getProfile(req.user.employeeId, req.user.companyId);\n *                   }\n * }\n * \n\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor (private reflector: Reflector) {}\n\n    /**\n     * This method verifies the user role. Validation is done using the {@link Role} enum.\n     * @param context This parameter is passed automatically by nest.\n     * @returns True if user role matches the restriction, false otherwise.\n     */\n    canActivate(context: ExecutionContext): boolean {\n        const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n            context.getHandler(), \n            context.getClass(),\n        ]);\n\n        if (!requiredRoles) {\n            return true;\n        }\n\n        const { user } = context.switchToHttp().getRequest();\n        return requiredRoles.some((role) => user.role === role);\n    }\n}\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/tag.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                company\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    Optional\n                                rec\n                            \n                            \n                                tagId\n                            \n                            \n                                    Optional\n                                tagstats\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            company\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Company\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index()@ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tag.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tag.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tag.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            rec\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tag.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tagId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tag.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            tagstats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TagStats[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tag.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tag.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tag.entity.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, ManyToMany, Index, PrimaryColumn, OneToMany, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, JoinTable, BeforeInsert } from 'typeorm';\nimport { Company } from './company.entity';\nimport { Recognition } from './recognition.entity';\nimport { TagStats } from './tagstats.entity';\n\n@Entity({name: \"tag\"})\nexport class Tag {\n    @PrimaryGeneratedColumn()\n    tagId: number;\n\n    @Column()\n    value: string\n\n    @Index()\n    @ManyToOne(()=> Company, company=>company.tags)\n    company?: Company;\n\n    \n    @ManyToMany(()=> Recognition, rec=> rec.tags)\n    rec?: Recognition;\n\n    @OneToMany(() => TagStats, stats => stats.tag)\n    tagstats?: TagStats[];\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tag\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getCompanyTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(req, tagData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/tag/tag.controller.ts:48\n                \n            \n\n\n            \n                \n                    An Admin can create tags for their company\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passed by the JWT token, contains logged-in user information\n\n                                    \n                                \n                                \n                                    tagData\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an object containing a string that is the core value to be added to this company's core value tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(req, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tag/tag.controller.ts:35\n                \n            \n\n\n            \n                \n                    An Admin can delete only tags for their own company\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passed by the JWT auth token, contains logged-in user information\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a DeleteResult, or null if the tags is not found / does not belong to the user's company\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCompanyTags\n                        \n                        \n                    \n                \n            \n            \n                \ngetCompanyTags(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/tag/tag.controller.ts:22\n                \n            \n\n\n            \n                \n                    Gets the core values tags for the company of the user that is logged in\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passed by the JWT token, contains logged-in user information\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An array of the tags for the user's company, not including any deleted tags\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Delete, Body, Param, UseGuards, Request, UnauthorizedException} from '@nestjs/common';\nimport {TagService} from './tag.service'\nimport {Tag} from '../common/entity/tag.entity';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { Role } from '../common/enum/role.enum';\nimport { RolesGuard } from '../roles/roles.guard';\nimport { Roles } from '../roles/roles.decorator';\nimport { DeleteResult } from 'typeorm';\n\n\n@Controller('tag')\nexport class TagController {\n    constructor(private tags: TagService){}\n\n    /**\n     * Gets the core values tags for the company of the user that is logged in\n     * @param req passed by the JWT token, contains logged-in user information\n     * @returns An array of the tags for the user's company, not including any deleted tags\n     */\n    @UseGuards(JwtAuthGuard)\n    @Get()\n    getCompanyTags(@Request() req): Promise{\n        return this.tags.getCompanyTags(req.user.companyId);\n    }\n\n    /**\n     * An Admin can delete only tags for their own company\n     * @param req passed by the JWT auth token, contains logged-in user information\n     * @param id The id of the {@link Tag} to be deleted\n     * @returns a DeleteResult, or null if the tags is not found / does not belong to the user's company\n     */\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.Admin)\n    @Delete(':id')\n    delete(@Request() req, @Param('id') id: number): Promise{\n        return this.tags.deleteTag(req.user.companyId, id);\n    }\n\n    /**\n     * An Admin can create tags for their company\n     * @param req passed by the JWT token, contains logged-in user information\n     * @param tagData an object containing a string that is the core value to be added to this company's core value tags\n     * @returns The {@link Tag} that was added\n     */\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.Admin)\n    @Post('create')\n    create(@Request() req, @Body() tagData): Promise{\n        return this.tags.createTag(req.user.companyId, tagData.value);\n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\ncluster_TagModule_exports\n\n\n\n\nTagService \n\nTagService \n\n\n\nTagModule\n\nTagModule\n\nTagService  -->\n\nTagModule->TagService \n\n\n\n\n\nTagService\n\nTagService\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tag/tag.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagController } from './tag.controller';\nimport { TagService } from './tag.service';\nimport { Tag } from '../common/entity/tag.entity';\nimport { Company } from '../common/entity/company.entity';\n\n@Module({\n  imports: [ TypeOrmModule.forFeature([Tag, Company])],\n  providers: [TagService],\n  controllers: [ TagController],\n  exports: [TagService]\n})\nexport class TagModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                deleteTag\n                            \n                            \n                                    Async\n                                getCompanyTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, companyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tag/tag.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(companyId: number, value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tag/tag.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new tag to be added\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the tag that was added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTag(companyId: number, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tag/tag.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        specific tagId of the tag to be deleted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCompanyTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompanyTags(companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tag/tag.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The array of tags\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DeleteResult, getRepository, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {Tag} from '../common/entity/tag.entity'\nimport {Company} from '../common/entity/company.entity'\n\n@Injectable()\nexport class TagService {\n    constructor(\n        @InjectRepository(Tag)\n        private tagRepository: Repository, \n        @InjectRepository(Company)\n        private companyRepository: Repository\n    ){}\n\n    /**\n     * \n     * @param companyId \n     * @returns The array of tags\n     */\n    async getCompanyTags(companyId: number): Promise{\n        return this.tagRepository.find({where:{company: companyId}})\n    }\n\n    /**\n     * \n     * @param companyId \n     * @param value the new tag to be added\n     * @returns the tag that was added\n     */\n    async createTag(companyId: number, value: string): Promise {\n        const tag = new Tag();\n        tag.company = await this.companyRepository.findOne({where:{companyId : companyId}});\n        tag.value = value;\n        this.tagRepository.save(tag);\n        return tag\n    }\n\n    /**\n     * \n     * @param companyId \n     * @param id specific tagId of the tag to be deleted\n     * @returns \n     */\n    async deleteTag(companyId: number, id: number): Promise {\n        const tag = await this.tagRepository.findOneOrFail({relations: [\"company\"], where: {tagId: id}});\n        // check that the specified tag does exist AND that tag belongs to the same company as this user\n        if(tag != undefined && tag.company.companyId == companyId) {\n            return this.tagRepository.delete({tagId: tag.tagId});\n        }\n        // indicates failure\n        return null;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagStats.html":{"url":"classes/TagStats.html","title":"class - TagStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/tagstats.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                countReceived\n                            \n                            \n                                countSent\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                employee\n                            \n                            \n                                tag\n                            \n                            \n                                tagstatId\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countReceived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tagstats.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countSent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tagstats.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tagstats.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tagstats.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tagstats.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tag\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tag\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tagstats.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tagstatId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tagstats.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/tagstats.entity.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, PrimaryGeneratedColumn, PrimaryColumn, Index, CreateDateColumn, UpdateDateColumn, DeleteDateColumn } from 'typeorm';\nimport { Users } from './users.entity';\nimport { Tag } from './tag.entity';\n\n@Entity({name: \"tagstats\"})\n@Index([\"employee\", \"tag\"], {unique: true})\nexport class TagStats {\n    @PrimaryGeneratedColumn('increment')\n    tagstatId: number;\n    \n    @ManyToOne(() => Users, users=>users.tagStats)\n    employee: Users;\n\n    @ManyToOne(() => Tag)\n    tag: Tag;\n\n    @Column({default: 0})\n    countReceived: number;\n\n    @Column({default: 0})\n    countSent: number;\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotification.html":{"url":"classes/UserNotification.html","title":"class - UserNotification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/notification.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                employeeTo\n                            \n                            \n                                msg\n                            \n                            \n                                notificationID\n                            \n                            \n                                notificationType\n                            \n                            \n                                reaction\n                            \n                            \n                                recognition\n                            \n                            \n                                report\n                            \n                            \n                                rockstar\n                            \n                            \n                                title\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employeeTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            msg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: NotificationType, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Reaction\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recognition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            report\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Report\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rockstar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rockstar\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/notification.entity.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, DeleteDateColumn } from 'typeorm';\nimport { Users } from './users.entity';\nimport { Recognition } from './recognition.entity';\nimport { Rockstar } from './rockstar.entity';\nimport { Report } from './report.entity';\nimport { Reaction } from './reaction.entity';\nimport { Comment } from './comment.entity';\nimport { NotificationType } from '../enum/notification-types';\n\n@Entity({name: \"notification\"})\nexport class UserNotification {\n    @PrimaryGeneratedColumn('increment')\n    notificationID: number;\n    \n    @ManyToOne(() => Users)\n    @JoinColumn()\n    employeeTo: Users;\n\n    @Column({ \n        type: \"enum\", \n        enum: NotificationType, \n        default: NotificationType.Generic})\n    notificationType: NotificationType;\n\n    @ManyToOne(() => Recognition, Recognition => Recognition.notifications)\n    recognition: Recognition ;\n\n    @ManyToOne(() => Report, Report => Report.notifications)\n    report: Report ;\n\n    @ManyToOne(() => Rockstar, Rockstar => Rockstar.notifications)\n    rockstar: Rockstar ;\n\n    @ManyToOne(() => Comment, Comment => Comment.notifications)\n    comment: Comment ;\n\n    @ManyToOne(() => Reaction, Reaction => Reaction.notifications)\n    reaction: Reaction ;\n\n    @Column()\n    title: string;\n    \n    @Column()\n    msg: string;\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPagination.html":{"url":"classes/UserPagination.html","title":"class - UserPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/pagination.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                items\n                            \n                            \n                                links\n                            \n                            \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/pagination.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            links\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/pagination.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            meta\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/pagination.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Recognition } from \"../entity/recognition.entity\";\nimport { Users } from \"../entity/users.entity\";\n\n\nexport class UserPagination{\n    items: Users[];\n    links: {\n        first: string,\n        last: string,\n        next: string,\n        previous: string,\n    }\n    meta: {\n        currentPage: number,\n        itemCount: number,\n        itemsPerPage: number,\n        totalItems: number,\n        totalPages: number,\n    }\n}\n\nexport class RecognitionPagination{\n    items: Recognition[];\n    links: {\n        first: string,\n        last: string,\n        next: string,\n        previous: string,\n    }\n    meta: {\n        currentPage: number,\n        itemCount: number,\n        itemsPerPage: number,\n        totalItems: number,\n        totalPages: number,\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interface/userstats.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        numRecsReceived\n                                \n                                \n                                        numRecsSent\n                                \n                                \n                                        tagStats\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        numRecsReceived\n                                    \n                                \n                                \n                                    \n                                        numRecsReceived:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numRecsSent\n                                    \n                                \n                                \n                                    \n                                        numRecsSent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagStats\n                                    \n                                \n                                \n                                    \n                                        tagStats:     TagStats[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TagStats[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TagStats } from '../entity/tagstats.entity';\n\nexport interface UserStats {\n    numRecsReceived: number,\n    numRecsSent: number,\n    tagStats: TagStats[]\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users.html":{"url":"classes/Users.html","title":"class - Users","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commentsDeleted\n                            \n                            \n                                    Optional\n                                company\n                            \n                            \n                                    Optional\n                                companyId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    Optional\n                                employeeId\n                            \n                            \n                                firstName\n                            \n                            \n                                    Optional\n                                isManager\n                            \n                            \n                                lastName\n                            \n                            \n                                    Optional\n                                login\n                            \n                            \n                                    Optional\n                                managerId\n                            \n                            \n                                    Optional\n                                numRecsReceived\n                            \n                            \n                                    Optional\n                                numRecsSent\n                            \n                            \n                                    Optional\n                                positionTitle\n                            \n                            \n                                    Optional\n                                recsDeleted\n                            \n                            \n                                    Optional\n                                recsReceived\n                            \n                            \n                                    Optional\n                                recsSent\n                            \n                            \n                                    Optional\n                                report\n                            \n                            \n                                    Optional\n                                rockstar\n                            \n                            \n                                    Optional\n                                role\n                            \n                            \n                                    Optional\n                                startDate\n                            \n                            \n                                    Optional\n                                tagStats\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                setId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            commentsDeleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            company\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Company\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, {primary: true})@JoinColumn({name: 'companyId', referencedColumnName: 'companyId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            companyId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:93\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            employeeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            isManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Login\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:75\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            managerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            numRecsReceived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            numRecsSent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:71\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            positionTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            recsDeleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            recsReceived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            recsSent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            report\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Report[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            rockstar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rockstar[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:90\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: Role, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('timestamp')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            tagStats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TagStats[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entity/users.entity.ts:96\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setId()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/common/entity/users.entity.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, JoinColumn, OneToMany, ManyToOne, OneToOne, Index, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, BeforeInsert, getRepository } from 'typeorm';\nimport { Company } from \"./company.entity\";\nimport { Login } from './login.entity';\nimport { Recognition } from \"./recognition.entity\";\nimport { Role } from \"../enum/role.enum\";\nimport { TagStats} from './tagstats.entity';\nimport { Report } from './report.entity';\nimport { Rockstar} from './rockstar.entity';\nimport { Comment } from './comment.entity';\n\n@Entity({name: \"users\"})\n@Index(['companyId', 'employeeId'], {unique: true})\nexport class Users {\n    \n    @ManyToOne(()=>Company, {primary: true} )\n    @JoinColumn({name: \"companyId\", referencedColumnName: \"companyId\"})\n    company?: Company;\n    \n    // This looks duplicated, but don't delete it. It is just the same as the JoinColumn. \n    // This is necessary to make the foreign key also act as a primary key for Users.\n    @PrimaryColumn()\n    companyId?: number;\n\n    @PrimaryColumn()\n    employeeId?: number;\n\n    @BeforeInsert()\n    async setId() {\n        if (!this.employeeId && this.employeeId !== 0) {\n            const users = await getRepository(Users).find({where: {companyId: this.companyId}, take: 5, order: {employeeId:'DESC'}});\n            if (users && users.length > 0) {\n                this.employeeId = users[0].employeeId! + 1;\n            } \n        }\n    }\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    positionTitle?: string;\n\n    @Column()\n    isManager?: boolean;\n\n    @Column({ \n        type: \"enum\", \n        enum: Role, \n        default: Role.Employee})\n    role?: Role;\n\n    @Column(\"timestamp\")\n    startDate?: Date;\n\n    @Column({nullable: true, type:'int'})\n    managerId?: number;\n\n    @OneToMany(()=>Recognition, rec=>rec.empFrom)\n    recsSent?: Recognition[];\n\n    @OneToMany(()=>Recognition, rec=>rec.empTo)\n    recsReceived?: Recognition[];\n\n    @Column({default: 0})\n    numRecsReceived?: number;\n\n    @Column({default: 0})\n    numRecsSent?: number;\n\n    // This relation was making it impossible to create rows in the table.\n    @OneToOne(() => Login, login => login.employee)\n    login?: Login;\n\n    @OneToMany(() => TagStats, tagstats => tagstats.employee)\n    tagStats?: TagStats[];\n\n    @OneToMany(()=>Recognition, rec=>rec.deletedBy)\n    recsDeleted?: Recognition[];\n\n    @OneToMany(()=>Comment, comment=>comment.deletedBy)\n    commentsDeleted?: Comment[];\n\n    @OneToMany(() => Report, report=>report.employeeFrom)\n    report?: Report[];\n\n    @OneToMany(() => Rockstar, rockstar=>rockstar.rockstar)\n    rockstar?: Rockstar[];\n\n    @CreateDateColumn({ type: 'timestamp' })\n    createdAt?: Date;\n\n    @UpdateDateColumn({ type: 'timestamp' })\n    updatedAt?: Date;\n\n    @DeleteDateColumn({ type: 'timestamp' })\n    deletedAt?: Date;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n            \n                Description\n            \n            \n                Controller for users.\nRequire JWT access token from auth/login for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                createUserMultiple\n                            \n                            \n                                    Async\n                                editUserDetails\n                            \n                            \n                                getProfile\n                            \n                            \n                                getStats\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserEmail\n                            \n                            \n                                    Async\n                                getUsersByCompany\n                            \n                            \n                                    Async\n                                index\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                uploadSingleFileWithPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createuserDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:87\n                \n            \n\n\n            \n                \n                    POST endpoint to create user.\nBody: createuuserDto: Users Login managerId companyNames\nReturn: Users object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createuserDto\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        include Users, Login, managerId, companyName\n\n                                    \n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        adding user to Database \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUserMultiple\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserMultiple(employeeMultiple, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@Post('create_multiple')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:115\n                \n            \n\n\n            \n                \n                    POST endpoint to create multiple user.\nBody: createuuserDto[ ]: Users, Login, managerId, companyNames[ ]\nReturn: Users[ ] \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeMultiple\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        adding multiple users to Database \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editUserDetails\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editUserDetails(employeeId: number, req, user: Users)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':employeeId/edit')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request object\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                Users\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User object which to be used to update \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        User object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:32\n                \n            \n\n\n            \n                \n                    GET endpoint to look up profile.\nReturn Users object without Login information.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request userId and companyId\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStats\n                        \n                        \n                    \n                \n            \n            \n                \ngetStats(employeeId: number, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('stats/:employeeId')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:100\n                \n            \n\n\n            \n                \n                    GET endpoint to get user stat\nParam employeeId\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        returns stat of given employeeId\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(employee_id: number, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('employeeId/:employ_id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:44\n                \n            \n\n\n            \n                \n                    GET endpoint to look up given employeeId profile.\nReturns Users object without showing Login information.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employee_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserEmail(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('email')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:175\n                \n            \n\n\n            \n                \n                    Retrieves user email from JWT token.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsersByCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByCompany(company_id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('company/:comp_id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n                    GET endpoint to get all user in company\nReturns Users[ ]\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    company_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            index\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    index(page: number, limit: number, firstName: string, lastName: string, search: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('search')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                \n                                \n                                    firstName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    lastName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUser(employeeId: number, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@Delete(':employeeId')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadSingleFileWithPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadSingleFileWithPost(file, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('uploadJSON')@UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get, Delete, Param, Body, Query, Patch, UseInterceptors, UploadedFile} from '@nestjs/common';\nimport { Login } from '../common/entity/login.entity';\nimport { Users } from '../common/entity/users.entity';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UsersService } from './users.service';\nimport { Roles } from '../roles/roles.decorator';\nimport { RolesGuard } from '../roles/roles.guard';\nimport { Role } from '../common/enum/role.enum'\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from '../auth/auth.service';\nimport { Pagination } from 'nestjs-typeorm-paginate';\nimport { Observable } from 'rxjs';\nimport * as multer from 'multer';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n/**\n * Controller for users.\n * Require JWT access token from {@link auth/login} for authentication\n */\n@Controller('users')\nexport class UsersController {\n    constructor (private usersService: UsersService) {}\n    /**\n     * `GET` endpoint to look up profile.\n     * \n     * Return {@link Users} object without {@link Login} information.\n     * @param req `Request` userId and companyId\n     * @returns  \n     */\n    @UseGuards(JwtAuthGuard)\n    @Get('profile')\n    getProfile(@Request() req) {\n        return this.usersService.getProfile(req.user.employeeId, req.user.companyId);\n    }\n    /**\n     * `GET` endpoint to look up given employeeId profile.\n     * \n     * Returns {@link Users} object without showing {@link Login} information.\n     * @param employee_id \n     * @returns \n     */\n    @UseGuards(JwtAuthGuard)\n    @Get('employeeId/:employ_id')\n    async getUser(@Param(\"employ_id\") employee_id: number, @Request() req) {\n        return await this.usersService.getProfile(employee_id, req.user.companyId);\n    }\n    /**\n     * `GET` endpoint to get all user in company\n     * \n     * Returns {@link Users}[ ]\n     * @param company_id \n     * @returns \n     */\n    @UseGuards(JwtAuthGuard)\n    @Get('company/:comp_id')\n    async getUsersByCompany(@Param(\"comp_id\") company_id: number) {\n\t    return await this.usersService.getArrayOfUsers(company_id);\n    }\n\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.Admin)\n    /**\n     * `DELETE` endpoint to soft delete user\n     * \n     * @param employeeId \n     * @param companyId \n     * @returns \n     */\n     @UseGuards(JwtAuthGuard, RolesGuard)\n     @Roles(Role.Admin)\n     @Delete(':employeeId')\n     async removeUser(@Param('employeeId') employeeId: number, @Request() req) {\n         return await this.usersService.removeUser(employeeId, req.user.companyId);\n     }\n\n    /**\n     * `POST` endpoint to create user.\n     * \n     * `Body`: {@link createuuserDto}: {@link Users} {@link Login} {@link managerId} {@link companyNames}\n     * \n     * Return: {@link Users} object\n     * @param createuserDto include Users, Login, managerId, companyName\n     * @returns adding user to Database \n     */\n    //This endpoint should be guarded\n    @Post('create')\n    async createUser(@Body() createuserDto: Users & Login & {companyName: string}, @Request() req) {\n        return await this.usersService.createUser(createuserDto, req.user.companyId, req.user.role);\n    }\n\n    /**\n     * `GET` endpoint to get user stat\n     * `Param` employeeId\n     * @param employeeId \n     * @param companyId \n     * @returns returns stat of given employeeId\n     */\n    @UseGuards(JwtAuthGuard)\n    @Get('stats/:employeeId')\n    getStats(@Param('employeeId') employeeId: number, @Request() req) {\n        return this.usersService.userStats(employeeId, req.user.companyId);\n    }\n    /**\n     * `POST` endpoint to create multiple user.\n     * \n     * `Body`: {@link createuuserDto}[ ]: {@link Users}, {@link Login}, {@link managerId}, {@link companyNames}[ ]\n     * \n     * Return: {@link Users}[ ] \n     * @param employeeMultiple \n     * @returns adding multiple users to Database \n     */\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.Admin)\n    @Post('create_multiple')\n    async createUserMultiple(@Body() employeeMultiple: [], @Request() req) {\n        return await this.usersService.createUserMultiple(employeeMultiple, req.user.companyId);\n    }\n\n    // Posts a JSON to the backend to be uploaded into the db\n    // Guard admin\n    @Post('uploadJSON')\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.Admin)\n    @UseInterceptors(FileInterceptor('file', {\n    storage: multer.memoryStorage()\n    }))\n    async uploadSingleFileWithPost(@UploadedFile() file, @Request() req): Promise {\n        const data = JSON.parse(file.buffer);\n        return await this.usersService.createUserMultiple(data, req.user.companyId);\n    }\n    \n   \n    @UseGuards(JwtAuthGuard)\n    @Get('search')\n    async index(\n        @Query('page') page: number = 1,\n        @Query('limit') limit: number = 10,\n        @Query('firstName') firstName: string,\n        @Query('lastName') lastName: string,\n        @Query('search') search: string,\n        @Request() req\n    ): Promise> {\n        let path: string = req.url;\n        let [host, query] = path.split('?');\n        const params = new URLSearchParams(query);\n        \n        params.delete('page');\n        params.delete('limit');\n        limit = limit > 100 ? 100: limit\n        limit = limit  {\n        return { email: req.user.email };\n    }\n}\n    \n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nCompanyModule\n\nCompanyModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCompanyModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CompanyModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersController } from './users.controller';\nimport { Users } from '../common/entity/users.entity';\nimport { Login } from '../common/entity/login.entity';\nimport { Company } from '../common/entity/company.entity';\nimport { TagStats } from '../common/entity/tagstats.entity';\nimport { CompanyModule } from '../company/company.module';\nimport { Recognition} from '../common/entity/recognition.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, Login, Company, Recognition, TagStats]), CompanyModule],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for UsersController. Functional logic is kept here.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                createUserMultiple\n                            \n                            \n                                    Async\n                                editUserDetails\n                            \n                            \n                                    Async\n                                getArrayOfUsers\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                getRockstarStats\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                paginate_username\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                userStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, loginRepo: Repository, companyRepository: Repository, tagStatsRepo: Repository, recognitionRepository: Repository, companyservice: CompanyService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagStatsRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recognitionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyservice\n                                                  \n                                                        \n                                                                        CompanyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createuserDto, requestId: number, creator_role: Role)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:102\n                \n            \n\n\n            \n                \n                    Method to create user: \nRequired Users object, Login object, managerId number, companyName string\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createuserDto\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requestId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    creator_role\n                                    \n                                                Role\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUserMultiple\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserMultiple(employeeMultiple: ()[], cId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:172\n                \n            \n\n\n            \n                \n                    Method to create Users in the database from an array input\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeMultiple\n                                    \n                                            ()[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Array of {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editUserDetails\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editUserDetails(requester: Users, employeeId: number, newUser: Users)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:297\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    requester\n                                    \n                                                Users\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    newUser\n                                    \n                                                Users\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new User object to update old user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        the new User object which was used to update the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getArrayOfUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getArrayOfUsers(companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:76\n                \n            \n\n\n            \n                \n                    Returns Users[ ] object array with user information and manager relation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        object array with manager relation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(userId: number, companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:67\n                \n            \n\n\n            \n                \n                    Returns Users object with user information and manager relation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User's employee ID\n\n                                    \n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User's company ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstarStats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstarStats(rockstar: Users)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:231\n                \n            \n\n\n            \n                \n                    Method to get Rockstar of the month stats\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rockstar\n                                    \n                                                Users\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        stats\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:56\n                \n            \n\n\n            \n                \n                    Method called by the AuthService to retrieve the Login user object associated with the email.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Email to specify the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(options: IPaginationOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            IPaginationOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            paginate_username\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate_username(options: IPaginationOptions, firstName: string, lastName: string, search: string, comp_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            IPaginationOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    firstName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lastName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comp_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUser(employeeId: number, companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:89\n                \n            \n\n\n            \n                \n                    Performs a soft delete on the specified user and their login information, but does not affect other relations (i.e. recs)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        an array containing the user that was deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            userStats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userStats(employeeId: number, companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:152\n                \n            \n\n\n            \n                \n                    Method to get user stats\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Users } from '../common/entity/users.entity';\nimport { Login } from '../common/entity/login.entity';\nimport { Company } from '../common/entity/company.entity';\nimport { TagStats } from '../common/entity/tagstats.entity';\nimport { CompanyService } from '../company/company.service';\nimport { Recognition } from '../common/entity/recognition.entity';\nimport { DeleteResult, Like, QueryBuilder, ILike, Repository, getConnection, Brackets } from 'typeorm';\nimport { Query } from 'typeorm/driver/Query';\nimport { Role } from '../common/enum/role.enum';\nimport { throwError } from 'rxjs';\nimport { UserStats } from '../common/interface/userstats.interface';\nimport {\n    paginate,\n    Pagination,\n    IPaginationOptions,\n  } from 'nestjs-typeorm-paginate';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';    \nimport { create } from 'node:domain';\nimport { Console } from 'node:console';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * Service for {@link UsersController}. Functional logic is kept here.\n */\n@Injectable()\nexport class UsersService {\n\n    constructor(\n        @InjectRepository(Users)\n        private usersRepository: Repository,\n        @InjectRepository(Login)\n        private loginRepo: Repository,\n        @InjectRepository(Company)\n        private companyRepository: Repository,\n        @InjectRepository(TagStats)\n        private tagStatsRepo: Repository,\n        @InjectRepository(Recognition)\n        private recognitionRepository: Repository,\n        private companyservice: CompanyService,\n    ){}\n\n   /* async storeRefreshToken(refreshToken:string, email:string, refreshtokenexpires){\n        await this.loginRepo.update(email, {refreshtoken:refreshToken, refreshtokenexpires});\n    }\n    */\n    //Must hash passwords\n    //In reality will grab user information from the database.\n    /**\n     * Method called by the {@link AuthService} to retrieve the {@link Login} user object associated with the email.\n     * @param username Email to specify the user.\n     * @returns {@link Login} user object.\n     */\n    async loginUser(username: string): Promise {\n        return this.loginRepo.findOne( { relations: [\"employee\"], where: { email: username } });\n    }\n\n    //Function retrieves user profile using their userId.\n    /**\n     * Returns {@link Users} object with user information and manager relation.\n     * @param userId User's employee ID\n     * @param companyId User's company ID\n     * @returns {@link Users} object with manager relation.\n     */\n    async getProfile(userId: number, companyId: number): Promise {\n        return this.usersRepository.findOne( { where: { employeeId: userId, companyId: companyId } } );\n    }\n    /**\n     * Returns {@link Users}[ ] object array with user information and manager relation.\n     * @param companyId \n     * @returns object array with manager relation\n     */\n    //Function retrieves range of user profiles using companyID\n    async getArrayOfUsers(companyId: number){\n\t    // I'm not sure this will work\n\t    let profileArray = await this.usersRepository.find({companyId: companyId});\n\t    console.log(profileArray);\n\t    return profileArray;\n    }\n\n    /**\n     * Performs a soft delete on the specified user and their login information, but does not affect other relations (i.e. recs)\n     * @param employeeId \n     * @param companyId \n     * @returns an array containing the user that was deleted\n     */\n    async removeUser(employeeId: number, companyId: number): Promise {\n        const user = await this.usersRepository.findOne({ employeeId: employeeId, companyId: companyId });\n        await this.loginRepo.softDelete({employee: user});\n        return await this.usersRepository.softRemove([user]);\n    }\n    \n    /**\n     * Method to create user: \n     * \n     * Required {@link Users} object, {@link Login} object, {@link managerId} number, {@link companyName} string\n     * @param createuserDto \n     * @returns {@link Users} user is added to Database  \n     */\n    async createUser(createuserDto: Users & Login \n         & {companyName: string},\n        requestId: number, creator_role: Role): Promise {    \n\n        const user = new Users();\n        let company = await this.companyRepository.findOne({companyId: requestId})\n        if (!company) {\n            throw new BadRequestException({error: 'Company Id does not exist'});\n        }\n        user.company = company\n        user.employeeId = createuserDto.employeeId;\n        user.companyId = requestId;\n\n        user.firstName = createuserDto.firstName;\n        user.lastName = createuserDto.lastName;\n    \n        user.isManager = Boolean(createuserDto.isManager);\n\n        // Only be able to add lower ranking user \n        if (createuserDto.role != undefined){\n            if (Role[creator_role] >= Role[createuserDto.role]){\n                user.role = createuserDto.role;\n            }\n            else {\n                throw new BadRequestException({error: 'Creating higher ranking user is not permitted'});\n            }\n        }\n        user.positionTitle = createuserDto.positionTitle;\n        user.startDate = new Date(createuserDto.startDate);\n        user.managerId = createuserDto.managerId;\n        \n        const login = new Login();\n        login.email = createuserDto.email;\n        const saltOrRounds = 3;\n        const hash = await bcrypt.hash(createuserDto.password, saltOrRounds);\n        login.password = hash;\n        const saveduser = await this.usersRepository.save(user);\n        login.employee = saveduser\n        await this.loginRepo.save(login);\n        // user.login = await this.loginRepo.save(login);\n        \n        return saveduser;\n    }\n\n    /**\n     * Method to get user stats\n     * @param employeeId \n     * @param companyId \n     * @returns {@link UserStats}\n     */\n    async userStats(employeeId: number, companyId: number): Promise {\n        let user = await this.usersRepository.findOne({\n            relations: [\"tagStats\", \"tagStats.tag\"],\n            where: { employeeId: employeeId, companyId: companyId } \n        });\n\n        let userStats: UserStats = {\n            numRecsSent: user.numRecsSent,\n            numRecsReceived: user.numRecsReceived,\n            tagStats: user.tagStats\n        }\n        \n        return userStats;\n    }\n    \n    /**\n     * Method to create {@link Users} in the database from an array input\n     * @param employeeMultiple \n     * @returns Array of {@link Users} object \n     */\n    async createUserMultiple(employeeMultiple: (Users & Login & {companyName: string})[], cId: number): Promise {\n        let users = [];\n        let logins = [];\n        await Promise.all(employeeMultiple.map(async (emp) => {\n            const user = new Users();\n            user.company = await this.companyRepository.findOne({where:{companyId: cId}})\n\n            user.employeeId = emp.employeeId;\n            // ignore input company id and override with the valid company id.\n            user.companyId = cId;\n            user.firstName = emp.firstName;\n            user.lastName = emp.lastName;\n            user.isManager = Boolean(emp.isManager);\n            user.role = emp.role;\n            user.positionTitle = emp.positionTitle;\n            user.startDate = new Date(emp.startDate);\n            user.managerId = emp.managerId;\n\n            const login = new Login();\n            login.email = emp.email;\n            const saltOrRounds = 3;\n            const hash = await bcrypt.hash(emp.password, saltOrRounds);\n            login.password = hash;\n            login.employee = user;\n            logins.push(login);\n            users.push(user);\n        }))\n \n\n        const connection = getConnection();\n        const queryRunner = connection.createQueryRunner();\n        await queryRunner.connect();\n        await queryRunner.startTransaction();\n\n        try{\n            await queryRunner.manager.insert(Users, users);\n            await queryRunner.manager.insert(Login, logins);\n            queryRunner.commitTransaction();\n            queryRunner.release();\n            return users;\n        }\n        catch(error){\n            await queryRunner.rollbackTransaction();\n            queryRunner.release();\n            return [];\n        }\n    }\n\n   \n    async paginate(options: IPaginationOptions): Promise> {\n        return paginate(this.usersRepository, options);\n    }\n\n    /**\n     * Method to get Rockstar of the month stats\n     * \n     * @param rockstar \n     * @returns stats\n     */\n    async getRockstarStats(rockstar: Users): Promise {\n        let date: Date = new Date();\n        let prevMonth: number = -1;\n        let year = date.getFullYear()\n        if (date.getMonth() == 1)\n        {\n            prevMonth = 12;\n            year = date.getFullYear() - 1;\n        }\n        else\n        {\n            prevMonth = date.getMonth()\n        }\n        let results = {};\n        let recogs = await this.recognitionRepository.createQueryBuilder().select(\"*\").innerJoin(\"recognition_tags_tag\",\"test\",\"test.recognitionRecId = Recognition.recId\").where(\"Recognition.empToCompanyId = :compID\", {compID : rockstar.company}).andWhere(\"Recognition.empToEmployeeId = :empID\", {empID: rockstar.employeeId}).andWhere(\"extract(Month from Recognition.postDate) = :prvMonth\",{prvMonth:prevMonth}).andWhere(\"extract(Year from Recognition.postDate) = :yr\",{yr:year}).getRawMany();\n        for (let i = 0; i > {\n        const matchCase = firstName || lastName;\n        const queryBuilder = this.usersRepository.createQueryBuilder('user');\n        queryBuilder.orderBy('user.firstName', 'ASC')\n        // Must specify both firstname and lastname\n        .where(\"user.companyId = :id\", {id: comp_id})\n        if(search || matchCase){\n            queryBuilder.andWhere(new Brackets (comp => {\n                if (search) {\n                    comp.orWhere(\"user.firstName ilike :search\", {search: '%'+search+'%'})\n                    .orWhere(\"user.lastName ilike :search\", {search: '%'+search+'%'});\n                }\n                if (matchCase) {\n                    comp.orWhere(new Brackets (bracket => {\n                        if (firstName) {\n                            bracket.andWhere(\"user.firstName ilike :firstName\", {firstName: '%'+firstName+'%'});\n                        }\n        \n                        if (lastName) {\n                            bracket.andWhere(\"user.lastName ilike :lastName\", {lastName: '%'+lastName+'%'});\n                        }\n        \n                    }));\n                }        \n            })); \n        }\n      \n        return paginate(queryBuilder, options);\n    }\n\n    /**\n     * \n     * @param empID ID of the logged in user\n     * @param newUser new User object to update old user\n     * @returns the new User object which was used to update the user\n     */\n    async editUserDetails(requester: Users, employeeId: number, newUser: Users){\n        if(requester.employeeId !== employeeId && requester.role !== Role.Admin){\n            throw new UnauthorizedException();\n        }\n        const user = await this.usersRepository.findOne({employeeId, companyId: requester.companyId});\n        user.firstName = newUser.firstName;\n        user.lastName = newUser.lastName;\n        if (requester.role === Role.Admin) {\n            user.positionTitle = newUser.positionTitle;\n            user.startDate = newUser.startDate;\n            user.isManager = newUser.isManager\n        }\n        return await this.usersRepository.save(user);\n    }\n\n} \n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/authDto.html":{"url":"classes/authDto.html","title":"class - authDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  authDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                accessTokenExpire\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            access_token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/auth.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accessTokenExpire\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/auth.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class authDtoFull {\n    access_token: string;\n    refresh_token: string;\n    accessTokenExpire: string;\n    refreshTokenExpire: string;\n}\n\nexport class authDto {\n    access_token: string;\n    accessTokenExpire: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/authDtoFull.html":{"url":"classes/authDtoFull.html","title":"class - authDtoFull","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  authDtoFull\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                accessTokenExpire\n                            \n                            \n                                refresh_token\n                            \n                            \n                                refreshTokenExpire\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            access_token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/auth.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accessTokenExpire\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/auth.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refresh_token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/auth.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshTokenExpire\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/auth.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class authDtoFull {\n    access_token: string;\n    refresh_token: string;\n    accessTokenExpire: string;\n    refreshTokenExpire: string;\n}\n\nexport class authDto {\n    access_token: string;\n    accessTokenExpire: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            typeormConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.refresh.guard.ts\n            \n            injectable\n            JwtAuthRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.refreshtoken.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/dto/auth.dto.ts\n            \n            class\n            authDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dto/auth.dto.ts\n            \n            class\n            authDtoFull\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dto/create-rec.dto.ts\n            \n            class\n            CreateRecDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/dto/edit-login.dto.ts\n            \n            class\n            EditLoginDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dto/pagination.dto.ts\n            \n            class\n            RecognitionPagination\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dto/pagination.dto.ts\n            \n            class\n            UserPagination\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dto/rockstar-stats.dto.ts\n            \n            class\n            ReturnRockstarDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/entity/comment.entity.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/common/entity/company.entity.ts\n            \n            class\n            Company\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/entity/login.entity.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/entity/notification.entity.ts\n            \n            class\n            UserNotification\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/common/entity/reaction.entity.ts\n            \n            class\n            Reaction\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/entity/recognition.entity.ts\n            \n            class\n            Recognition\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/common/entity/report.entity.ts\n            \n            class\n            Report\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/entity/rockstar.entity.ts\n            \n            class\n            Rockstar\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/common/entity/rockstarstats.entity.ts\n            \n            class\n            RockstarStats\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/common/entity/tag.entity.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/entity/tagstats.entity.ts\n            \n            class\n            TagStats\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/entity/users.entity.ts\n            \n            class\n            Users\n            \n                0 %\n                (0/25)\n            \n        \n        \n            \n                \n                src/common/interface/userstats.interface.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/company/company.controller.ts\n            \n            controller\n            CompanyController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/company/company.service.ts\n            \n            injectable\n            CompanyService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notifications/notifications.controller.ts\n            \n            controller\n            NotificationsController\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/notifications/notifications.service.ts\n            \n            injectable\n            NotificationsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recognition/recognition.controller.ts\n            \n            controller\n            RecognitionController\n            \n                66 %\n                (12/18)\n            \n        \n        \n            \n                \n                src/recognition/recognition.service.ts\n            \n            injectable\n            RecognitionService\n            \n                66 %\n                (14/21)\n            \n        \n        \n            \n                \n                src/rockstar/rockstar.controller.ts\n            \n            controller\n            RockstarController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/rockstar/rockstar.service.ts\n            \n            injectable\n            RockstarService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                69 %\n                (9/13)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcrypt : ^5.0.1\n        \n            nestjs-typeorm-paginate : ^2.3.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.31\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NotificationType   (src/.../notification-types.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enum/notification-types.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationType\n                    \n                \n                        \n                            \n                                 Generic\n                            \n                        \n                        \n                            \n                                Value : Generic\n                            \n                        \n                        \n                            \n                                 Recognition\n                            \n                        \n                        \n                            \n                                Value : Recognition\n                            \n                        \n                        \n                            \n                                 Comment\n                            \n                        \n                        \n                            \n                                Value : Comment\n                            \n                        \n                        \n                            \n                                 Rockstar\n                            \n                        \n                        \n                            \n                                Value : Rockstar\n                            \n                        \n                        \n                            \n                                 Report\n                            \n                        \n                        \n                            \n                                Value : Report\n                            \n                        \n            \n        \n\n    src/common/enum/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Employee\n                            \n                        \n                        \n                            \n                                Value : employee\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 ServerAdmin\n                            \n                        \n                        \n                            \n                                Value : server-admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nSEVERE VULNURABILITIES IN REPO DEPENDENCIES\nDO NOT USE WITHOUT MODIFICATION!\nBackend code for CS320 Peer Recognition Software Prototype (Spring 2021) using the Nest framework.\nInstallation\nFrom the root directory of the project\nDocker setup\nstop current database\n$ docker-compose down; docker rm -fr (docker ps | grep postgres | cut -c1-12);\\\ndocker volume rm peer-recognition-backend_database-databuild the new database\n$ docker-compose upinstall the dependencies\n$ npm installInitialize submodules\n$ git submodule update --init --recursiveRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covAutomated Documentation\nLive docs can be found at https://benedict-scrumberbatch.github.io/peer-recognition-backendThe sources for the docs are contained in the gh-pages branch.\ncompodoc\nMore detailed information on using compodoc can be found here.\n# generate documentation\n$ npx @compodoc/compodoc -p tsconfig.json -d docs --includes swagger-docs -a swagger-assets -sDocumentation will be generated at http://localhost:8080  \nSwagger\nNestjs specific docs can be found here.  \nSwagger docs auto generate at http://localhost:4200/api/ or in the compodoc documentation.\nUseful swagger related links:\n\nhttps://stackoverflow.com/questions/54802832/is-it-possible-to-add-authentication-to-access-to-nestjs-swagger-explorer\nhttps://codeburst.io/integrating-swagger-with-nestjs-9650594ab728\n\nDocker Notes\nPersistence\nThe database has persistence of information between sessions.  It however does not currently have any form of environmental persistence, nor does it have direct file support in the repo, instead it has a volume holding the information.\nConnection\nThe database is currently used by connecting to localhost:5432.\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompanyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecognitionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RockstarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CompanyModule\n\n\n\ncluster_CompanyModule_exports\n\n\n\ncluster_CompanyModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_RecognitionModule\n\n\n\ncluster_RecognitionModule_exports\n\n\n\ncluster_RecognitionModule_providers\n\n\n\ncluster_RockstarModule\n\n\n\ncluster_RockstarModule_exports\n\n\n\ncluster_RockstarModule_providers\n\n\n\ncluster_TagModule\n\n\n\ncluster_TagModule_exports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCompanyModule\n\nCompanyModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCompanyModule->UsersModule\n\n\n\nAppModule -->\n\nCompanyModule->AppModule\n\n\n\n\n\nCompanyService \n\nCompanyService \n\nCompanyService  -->\n\nCompanyModule->CompanyService \n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nRecognitionModule\n\nRecognitionModule\n\nAppModule -->\n\nRecognitionModule->AppModule\n\n\n\n\n\nRecognitionService \n\nRecognitionService \n\nRecognitionService  -->\n\nRecognitionModule->RecognitionService \n\n\n\n\n\nRockstarModule\n\nRockstarModule\n\nAppModule -->\n\nRockstarModule->AppModule\n\n\n\n\n\nRockstarService \n\nRockstarService \n\nRockstarService  -->\n\nRockstarModule->RockstarService \n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nTagService \n\nTagService \n\nTagService  -->\n\nTagModule->TagService \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCompanyService\n\nCompanyService\n\nCompanyModule -->\n\nCompanyService->CompanyModule\n\n\n\n\n\nTagService\n\nTagService\n\nCompanyModule -->\n\nTagService->CompanyModule\n\n\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\nRecognitionService\n\nRecognitionService\n\nRecognitionModule -->\n\nRecognitionService->RecognitionModule\n\n\n\n\n\nRockstarService\n\nRockstarService\n\nRockstarModule -->\n\nRockstarService->RockstarModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            fs   (src/.../main.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            typeormConfig   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ENV\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NODE_ENV\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            typeormConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  \n}\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('fs')\n                        \n                    \n\n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    access_secret: 'access_key',\n    refresh_secret: 'refresh_key'\n}\n                        \n                    \n\n\n            \n        \n\n    src/roles/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'roles'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/swagger-api-docs.html":{"url":"additional-documentation/swagger-api-docs.html","title":"additional-page - Swagger API Docs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n    \n        \n        \n        \n        My New API\n    \n    \n         \n        \n            window.onload = function () {\n                // Begin Swagger UI call region\n                const ui = SwaggerUIBundle({\n                    url: \"../swagger-assets/swagger-spec.json\", //Location of Open API spec in the repo\n                    dom_id: '#swagger-ui',\n                    deepLinking: true,\n                    presets: [\n                        SwaggerUIBundle.presets.apis,\n                        SwaggerUIBundle.SwaggerUIStandalonePreset\n                    ],\n                    plugins: [\n                        SwaggerUIBundle.plugins.DownloadUrl\n                    ],\n                })\n                window.ui = ui\n            }\n        \n    \n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
