var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.154,1,2.295]],["body/controllers/AppController.html",[0,1.79,1,3.561,2,1.413,3,0.335,4,0.295,5,0.257,6,3.557,7,0.55,8,0.026,9,2.554,10,2.342,11,2.809,12,0.604,13,2.001,14,3.129,15,3.237,16,2.554,17,4.206,18,2.784,19,4.206,20,0.335,21,0.047,22,2.342,23,3.557,24,4.206,25,1.51,26,3.557,27,3.237,28,1.61,29,3.557,30,5.331,31,2.809,32,3.129,33,3.129,34,0.016,35,0.02,36,0.016]],["title/modules/AppModule.html",[37,1.01,38,2.295]],["body/modules/AppModule.html",[1,3.601,2,1.603,3,0.283,4,0.249,5,0.217,7,0.583,8,0.026,12,0.51,20,0.283,21,0.04,34,0.013,35,0.018,36,0.013,37,1.585,38,4.562,39,1.569,40,1.462,41,1.823,42,1.823,43,1.569,44,2.768,45,1.823,46,3.002,47,3.002,48,3.002,49,3.761,50,3.448,51,3.761,52,3.761,53,3.448,54,3.761,55,2.45,56,1.823,57,1.823,58,3.55,59,2.657,60,3.55,61,3.55,62,3.55,63,3.002,64,2.156,65,1.364,66,3.55,67,3.55,68,3.55,69,3.55]],["title/injectables/AppService.html",[54,2.086,70,0.578]],["body/injectables/AppService.html",[3,0.38,4,0.335,5,0.291,7,0.426,8,0.026,12,0.685,20,0.38,21,0.054,28,1.312,34,0.018,35,0.021,36,0.018,54,3.499,70,0.969,71,1.833,72,4.032,73,0.629,74,1.81,75,6.432,76,0.931,77,4.769,78,1.498,79,1.81,80,4.769,81,4.769]],["title/controllers/AuthController.html",[0,1.154,82,2.295]],["body/controllers/AuthController.html",[0,1.413,2,1.413,3,0.335,4,0.295,5,0.257,7,0.55,8,0.026,9,2.554,10,2.342,11,2.809,12,0.604,13,2.001,15,3.237,16,2.554,18,2.784,20,0.335,21,0.047,22,2.342,23,3.557,25,2.102,26,3.557,27,3.237,28,1.157,29,3.557,34,0.016,35,0.02,36,0.016,73,0.555,74,1.675,76,0.821,78,1.322,82,3.561,83,3.557,84,2.554,85,4.206,86,2.195,87,4.206,88,1.616,89,4.206,90,4.206,91,1.413,92,1.237,93,1.413,94,3.129,95,3.129,96,3.129,97,4.206,98,4.206]],["title/modules/AuthModule.html",[37,1.01,49,2.086]],["body/modules/AuthModule.html",[2,1.585,3,0.278,4,0.245,5,0.213,7,0.581,8,0.026,12,0.502,18,3.175,20,0.278,21,0.039,34,0.013,35,0.018,36,0.013,37,1.572,39,1.544,40,1.439,41,1.794,42,1.794,43,1.544,44,2.746,45,2.746,49,4.079,53,3.432,55,2.424,56,1.794,57,1.794,59,2.628,63,2.954,82,3.571,96,2.599,99,2.954,100,3.494,101,2.954,102,2.954,103,3.744,104,3.744,105,3.494,106,4.721,107,1.945,108,3.494,109,3.494,110,2.599,111,2.333,112,2.954,113,3.494,114,3.494,115,3.494,116,2.954,117,2.954,118,3.494,119,3.494,120,3.494]],["title/injectables/AuthService.html",[18,1.634,70,0.578]],["body/injectables/AuthService.html",[3,0.271,4,0.239,5,0.208,7,0.472,8,0.026,12,0.489,18,2.206,20,0.271,21,0.038,22,1.895,25,2.197,28,1.452,34,0.02,35,0.017,36,0.013,70,0.78,71,1.308,73,0.449,74,1.457,76,1.029,78,1.457,79,1.922,86,1.91,91,1.772,92,1.551,93,1.772,110,2.532,121,2.878,122,4.638,123,1.308,124,3.403,125,2.704,126,6.26,127,3.403,128,0.957,129,4.638,130,3.403,131,2.909,132,4.638,133,5.665,134,3.403,135,3.098,136,2.05,137,3.403,138,1.504,139,2.332,140,1.504,141,3.403,142,3.403,143,2.532,144,2.878,145,2.878,146,3.403,147,3.403,148,1.748,149,3.403,150,1.504,151,3.403,152,1.748,153,3.403,154,3.403,155,3.403]],["title/classes/Company.html",[21,0.039,156,0.884]],["body/classes/Company.html",[3,0.296,4,0.261,5,0.227,7,0.525,8,0.026,20,0.296,21,0.042,34,0.014,35,0.018,36,0.014,73,0.489,76,1.191,79,1.544,88,2.345,92,1.62,128,1.107,131,1.905,150,2.436,156,1.418,157,1.765,158,3.137,159,2.338,160,3.681,161,2.621,162,2.106,163,1.765,164,3.346,165,3.71,166,3.068,167,3.71,168,1.851,169,4.099,170,2.172,171,3.71,172,1.979,173,3.137,174,3.71,175,3.71,176,2.065,177,2.76,178,2.984,179,1.246,180,2.76,181,2.76,182,2.478,183,2.065,184,3.71,185,3.71,186,3.137,187,3.71,188,3.137,189,2.76]],["title/controllers/CompanyController.html",[0,1.154,190,2.295]],["body/controllers/CompanyController.html",[0,1.408,2,1.408,3,0.334,4,0.294,5,0.256,7,0.523,8,0.026,9,2.546,10,2.334,12,0.602,20,0.334,21,0.047,25,2.099,28,1.154,34,0.016,35,0.02,36,0.016,73,0.553,74,1.672,76,0.818,78,1.317,84,2.546,88,1.611,91,1.408,92,1.233,93,1.408,123,1.611,128,0.761,138,1.853,140,1.853,156,1.633,190,3.554,191,3.545,192,4.499,193,3.545,194,3.554,195,4.193,196,4.499,197,2.546,198,2.546,199,2.8,200,1.994,201,2.78,202,3.545,203,4.193,204,4.193,205,4.193]],["title/modules/CompanyModule.html",[37,1.01,50,1.913]],["body/modules/CompanyModule.html",[2,1.765,3,0.328,4,0.289,5,0.251,7,0.564,8,0.026,12,0.591,20,0.328,21,0.046,34,0.015,35,0.019,36,0.015,37,1.703,39,1.819,40,1.694,41,2.113,42,2.113,43,1.819,44,2.975,45,2.975,50,3.651,55,2.699,56,2.113,57,2.113,59,2.291,64,2.499,65,1.581,156,1.059,190,3.869,200,1.957,201,3.253,202,3.479,206,3.479,207,3.479,208,3.479,209,4.115,210,4.115,211,4.115]],["title/injectables/CompanyService.html",[70,0.578,201,1.634]],["body/injectables/CompanyService.html",[3,0.305,4,0.269,5,0.234,7,0.531,8,0.026,12,0.55,20,0.305,21,0.043,25,2.01,28,1.053,34,0.014,35,0.019,36,0.014,65,1.471,70,0.844,71,1.471,73,0.505,74,1.576,76,0.979,78,1.203,91,1.685,92,1.475,93,1.685,123,1.928,128,0.91,136,2.218,138,1.692,139,1.692,140,1.692,156,1.659,161,1.821,172,1.375,179,1.285,192,4.242,193,4.242,196,3.237,200,1.821,201,2.386,212,3.237,213,3.828,214,3.607,215,3.828,216,3.047,217,3.828,218,2.325,219,2.325,220,1.692,221,3.828,222,3.828,223,3.828,224,3.828,225,3.828,226,3.828,227,3.828,228,2.557,229,2.848,230,3.828,231,3.828,232,3.828]],["title/classes/CreateRecDto.html",[21,0.039,233,2.086]],["body/classes/CreateRecDto.html",[3,0.328,4,0.289,5,0.251,8,0.025,20,0.328,21,0.046,34,0.015,35,0.019,36,0.015,73,0.543,76,1.231,79,1.652,128,1.144,156,1.491,157,1.957,159,2.5,161,2.756,163,2.384,233,3.192,234,5.455,235,3.479,236,6.923,237,4.899,238,4.899,239,4.309,240,4.115,241,4.115,242,4.115,243,4.115,244,4.115]],["title/injectables/JwtAuthGuard.html",[13,1.634,70,0.578]],["body/injectables/JwtAuthGuard.html",[3,0.396,4,0.349,5,0.303,7,0.528,8,0.025,12,0.713,13,2.808,20,0.396,21,0.056,34,0.018,35,0.022,36,0.018,70,0.993,71,1.908,107,2.765,245,3.694,246,3.694,247,4.199,248,3.317,249,4.966]],["title/injectables/JwtStrategy.html",[70,0.578,103,2.086]],["body/injectables/JwtStrategy.html",[3,0.322,4,0.284,5,0.247,7,0.542,8,0.026,12,0.58,20,0.322,21,0.046,25,2.062,28,1.111,34,0.015,35,0.019,36,0.015,70,0.874,71,1.552,73,0.533,74,1.632,76,1.014,78,1.269,91,1.356,92,1.188,93,1.356,94,3.004,103,3.155,107,2.249,111,2.698,112,3.415,117,3.415,123,2.207,128,0.733,145,3.415,148,2.074,150,1.785,152,2.074,248,2.698,250,3.415,251,4.393,252,4.039,253,5.195,254,4.039,255,4.039,256,3.415,257,3.004,258,3.415,259,3.415,260,3.415,261,4.039,262,4.039,263,4.039,264,2.453,265,4.039,266,4.039,267,4.039,268,4.039,269,2.698,270,4.039]],["title/injectables/LocalAuthGuard.html",[16,2.086,70,0.578]],["body/injectables/LocalAuthGuard.html",[3,0.396,4,0.349,5,0.303,7,0.528,8,0.025,12,0.713,16,3.585,20,0.396,21,0.056,34,0.018,35,0.022,36,0.018,70,0.993,71,1.908,107,2.765,246,3.694,247,4.199,248,3.317,271,4.199,272,4.966]],["title/injectables/LocalStrategy.html",[70,0.578,104,2.086]],["body/injectables/LocalStrategy.html",[3,0.308,4,0.271,5,0.236,7,0.533,8,0.026,12,0.554,18,3.017,20,0.308,21,0.044,22,2.15,25,2.018,28,1.063,34,0.014,35,0.019,36,0.014,70,0.849,71,1.484,73,0.509,74,1.585,76,0.985,78,1.213,79,1.943,91,1.694,92,1.484,93,1.694,95,2.873,96,2.873,104,3.064,107,2.15,123,1.484,128,0.915,131,2.886,135,2.579,136,2.23,139,1.707,140,1.707,143,4.181,220,1.707,248,2.579,251,4.267,256,3.265,257,2.873,258,3.265,259,3.265,260,3.265,273,3.265,274,3.862,275,3.862,276,5.046,277,3.862,278,4.267,279,3.862,280,3.862,281,3.862]],["title/classes/Login.html",[21,0.039,86,1.415]],["body/classes/Login.html",[3,0.335,4,0.295,5,0.257,7,0.477,8,0.026,20,0.335,21,0.047,34,0.016,35,0.02,36,0.016,73,0.555,76,1.142,79,1.934,86,2.41,88,2.249,128,1.062,143,4.354,157,2.001,159,2.536,162,2.067,164,3.554,166,3.259,176,2.342,178,3.237,179,1.413,182,2.809,183,2.342,269,3.909,282,3.557,283,3.259,284,4.206,285,4.206,286,4.206,287,4.206,288,4.508]],["title/classes/Recognition.html",[21,0.039,168,1.154]],["body/classes/Recognition.html",[3,0.268,4,0.237,5,0.206,7,0.505,8,0.026,20,0.268,21,0.038,34,0.012,35,0.017,36,0.012,73,0.608,76,1.218,79,1.447,88,2.399,128,1.132,156,1.607,157,1.602,159,2.191,161,2.496,162,2.096,163,1.654,166,2.922,168,1.762,170,1.489,172,1.884,173,3.894,176,1.876,178,3.187,179,1.131,180,2.506,182,2.25,183,1.876,239,3.904,289,2.849,290,4.438,291,4.438,292,5.641,293,4.438,294,3.904,295,3.369,296,3.369,297,3.369,298,3.369,299,2.797,300,2.849,301,3.369,302,2.506,303,3.369,304,2.849,305,3.369,306,3.369,307,2.506,308,4.606,309,3.768,310,2.849,311,2.506,312,3.369,313,2.849,314,3.369,315,2.849,316,3.369,317,3.369,318,3.369,319,3.369]],["title/controllers/RecognitionController.html",[0,1.154,320,2.295]],["body/controllers/RecognitionController.html",[0,1.285,2,1.285,3,0.305,4,0.269,5,0.234,7,0.531,8,0.026,10,2.131,12,0.55,20,0.305,21,0.043,22,2.131,28,1.54,34,0.014,35,0.019,36,0.014,73,0.505,74,1.576,76,1.092,78,1.758,84,2.325,88,2.151,91,1.685,92,1.475,93,1.685,128,0.694,136,2.625,160,2.557,168,1.285,194,3.351,197,3.399,198,2.325,199,2.557,228,3.351,233,3.842,320,3.351,321,3.237,322,5.022,323,3.828,324,3.828,325,3.828,326,4.242,327,3.828,328,3.351,329,5.017,330,3.828,331,3.237,332,3.237,333,2.793,334,3.237,335,2.131,336,3.828,337,3.828,338,3.828,339,3.828,340,3.828,341,3.828,342,3.828]],["title/modules/RecognitionModule.html",[37,1.01,51,2.086]],["body/modules/RecognitionModule.html",[2,1.682,3,0.304,4,0.268,5,0.233,7,0.591,8,0.026,12,0.548,20,0.304,21,0.043,34,0.014,35,0.019,36,0.014,37,1.643,39,1.687,40,1.572,41,1.96,42,1.96,43,1.687,44,2.87,45,2.87,51,3.913,55,2.571,56,1.96,57,1.96,59,2.125,64,2.318,65,1.467,156,1.289,162,1.682,168,1.682,172,1.798,320,3.733,333,3.767,334,3.228,335,2.125,343,3.228,344,3.228,345,3.228,346,3.817,347,3.817,348,3.817,349,3.228,350,3.228,351,2.062,352,3.817,353,3.817]],["title/injectables/RecognitionService.html",[70,0.578,333,1.913]],["body/injectables/RecognitionService.html",[3,0.145,4,0.128,5,0.112,7,0.501,8,0.026,12,0.262,20,0.145,21,0.021,25,2.055,28,0.803,34,0.007,35,0.011,36,0.007,65,0.702,70,0.491,71,0.702,73,0.241,74,0.917,76,0.889,78,1.309,91,1.399,92,1.225,93,1.399,123,1.122,128,0.756,136,2.014,138,2.343,139,0.807,140,2.651,148,1.499,150,1.842,156,1.313,161,1.389,162,0.613,163,1.048,168,0.98,170,1.29,172,2.012,179,0.613,200,0.868,214,3.724,216,2.215,218,1.109,219,1.109,220,1.29,233,3.218,237,1.544,238,1.544,239,1.358,264,1.109,283,2.84,290,1.544,291,1.544,293,1.544,299,1.109,322,3.524,328,1.95,331,1.544,332,1.544,333,1.625,335,1.017,351,0.752,354,1.544,355,2.919,356,2.919,357,2.919,358,1.826,359,3.084,360,3.647,361,2.713,362,1.826,363,2.919,364,2.919,365,5.3,366,2.713,367,1.826,368,3.647,369,2.919,370,1.826,371,1.826,372,1.826,373,1.826,374,1.109,375,1.826,376,1.109,377,1.358,378,1.219,379,1.826,380,1.826,381,1.358,382,1.544,383,1.358,384,1.358,385,1.826,386,2.468,387,2.919,388,1.826,389,1.826,390,1.826,391,1.219,392,5.604,393,1.826,394,2.919,395,4.167,396,1.826,397,4.557,398,1.544,399,1.826,400,2.919,401,1.625,402,1.826,403,1.358,404,2.919,405,1.826,406,1.826,407,1.826,408,1.826,409,1.826,410,1.826,411,1.826,412,4.859,413,2.436,414,2.919,415,2.919,416,3.647,417,2.713,418,3.246,419,2.919,420,2.919,421,4.859,422,2.436,423,2.919,424,1.826,425,2.919,426,1.826,427,2.468,428,2.919,429,4.859,430,2.919,431,4.859,432,2.919,433,3.647,434,4.167,435,2.919,436,2.919,437,2.919,438,1.544,439,2.919,440,1.826,441,1.826,442,1.826,443,1.826,444,1.826,445,3.084]],["title/guards/RolesGuard.html",[446,2.295,447,2.295]],["body/guards/RolesGuard.html",[3,0.208,4,0.183,5,0.159,7,0.577,8,0.026,12,0.375,13,1.827,14,2.857,15,2.333,20,0.363,21,0.051,27,2.333,28,1.384,31,2.566,32,2.857,33,2.857,34,0.01,35,0.014,36,0.01,70,0.646,73,0.344,74,1.207,76,0.75,78,1.207,91,1.29,92,1.13,93,1.29,123,1.932,125,2.478,128,0.697,131,2.976,138,2.015,139,1.698,152,3.054,198,1.584,264,2.333,366,2.857,446,2.566,447,3.744,448,2.609,449,2.206,450,3.248,451,3.359,452,3.841,453,3.841,454,3.841,455,3.248,456,3.248,457,3.841,458,3.248,459,2.857,460,2.857,461,3.248,462,3.248,463,2.333,464,3.248,465,3.248,466,3.248,467,3.248,468,5.029,469,2.609,470,5.606,471,2.609,472,3.841,473,5.029,474,2.609,475,3.841,476,3.841,477,3.841,478,3.841,479,3.841,480,3.841,481,3.248,482,2.538,483,3.841,484,3.841,485,3.841,486,2.206,487,2.609,488,1.941,489,2.609,490,2.609,491,3.841,492,2.609,493,2.609,494,2.609,495,2.609,496,2.609,497,2.609]],["title/classes/Tag.html",[21,0.039,172,1.234]],["body/classes/Tag.html",[3,0.289,4,0.255,5,0.222,7,0.52,8,0.026,20,0.289,21,0.041,34,0.013,35,0.018,36,0.013,73,0.719,76,1.182,79,1.521,88,2.328,128,1.099,156,1.638,157,1.726,159,2.303,163,1.739,164,2.203,166,3.034,168,1.953,169,2.699,170,2.409,172,1.957,176,2.02,177,3.602,179,1.218,181,2.699,183,2.02,302,2.699,304,3.068,307,2.699,309,3.234,310,4.095,311,2.699,313,3.068,351,2.62,386,4.917,398,3.068,438,3.068,498,3.068,499,4.609,500,3.64,501,3.628,502,3.628,503,3.628,504,3.628,505,3.628,506,3.628,507,3.068,508,3.628,509,3.628]],["title/controllers/TagController.html",[0,1.154,510,2.295]],["body/controllers/TagController.html",[0,1.12,2,1.12,3,0.266,4,0.234,5,0.204,7,0.567,8,0.026,9,2.025,10,1.857,11,2.227,12,0.479,13,1.586,15,2.025,20,0.266,21,0.038,22,1.857,27,3.692,28,1.436,31,3.931,34,0.012,35,0.017,36,0.012,73,0.44,74,1.437,76,1.019,78,1.64,84,2.025,88,2.006,91,1.753,92,1.535,93,1.753,128,0.605,136,2.687,152,1.712,161,1.586,163,1.874,172,1.642,179,1.12,194,2.227,197,3.17,198,2.025,199,3.055,228,3.055,245,2.481,278,2.82,326,2.82,328,3.752,374,2.025,377,2.481,447,3.487,451,2.227,458,2.82,460,2.481,461,2.82,464,3.867,510,3.055,511,2.82,512,3.867,513,3.335,514,5.22,515,3.335,516,3.335,517,3.335,518,3.335,519,3.335,520,3.335,521,3.335,522,3.335,523,2.546,524,2.82,525,3.335,526,3.335,527,3.335,528,3.335,529,3.335,530,3.335,531,3.335,532,3.335,533,3.335]],["title/modules/TagModule.html",[37,1.01,52,2.086]],["body/modules/TagModule.html",[2,1.738,3,0.32,4,0.282,5,0.245,7,0.573,8,0.026,12,0.576,20,0.32,21,0.045,34,0.015,35,0.019,36,0.015,37,1.684,39,1.774,40,1.653,41,2.061,42,2.061,43,1.774,44,2.94,45,2.94,52,3.96,55,2.657,56,2.061,57,2.061,59,2.235,64,2.438,65,1.543,156,1.332,172,1.441,349,3.394,350,3.394,510,3.825,523,3.795,524,3.394,534,3.394,535,3.394,536,3.394,537,4.014,538,4.014,539,4.014]],["title/injectables/TagService.html",[70,0.578,523,1.913]],["body/injectables/TagService.html",[3,0.24,4,0.211,5,0.184,7,0.507,8,0.026,12,0.432,20,0.24,21,0.034,25,2.257,28,1.56,34,0.011,35,0.016,36,0.011,65,1.156,70,0.716,71,1.156,73,0.397,74,1.337,76,1.048,78,1.552,79,1.552,91,1.804,92,1.579,93,1.804,123,1.636,128,0.974,131,1.544,136,2.601,138,1.881,139,1.881,140,1.881,144,2.543,150,2.601,156,1.271,163,2.337,170,1.33,172,2.113,179,1.01,200,1.431,214,3.674,216,3,218,1.826,219,1.826,220,1.33,328,3.588,359,3.599,374,1.826,377,2.237,382,2.543,391,2.009,499,2.543,500,3.588,512,3.599,523,2.37,540,2.543,541,4.256,542,4.256,543,3.008,544,3.008,545,4.256,546,3.008,547,4.256,548,3.008,549,4.256,550,3.008,551,3.008,552,3.008,553,3.008,554,3.008,555,3.008,556,3.008,557,3.008,558,3.008,559,3.008,560,3.008,561,2.237,562,3.008,563,3.008,564,3.008]],["title/classes/TagStats.html",[21,0.039,351,1.415]],["body/classes/TagStats.html",[3,0.294,4,0.259,5,0.225,7,0.491,8,0.026,20,0.294,21,0.042,34,0.014,35,0.018,36,0.014,73,0.646,76,1.189,88,2.341,128,1.105,157,1.755,159,2.329,162,1.966,163,2.249,164,2.24,166,2.054,170,1.631,172,2.33,176,2.054,178,2.24,179,1.239,180,2.744,182,2.464,183,2.054,283,3.06,294,3.642,302,3.642,307,2.744,309,3.671,351,2.263,401,3.259,427,4.647,445,4.647,482,2.054,565,3.119,566,5.496,567,4.95,568,3.689,569,3.689,570,3.689,571,3.689,572,3.689,573,3.689,574,3.119,575,3.689]],["title/interfaces/UserStats.html",[576,2.086,577,2.295]],["body/interfaces/UserStats.html",[3,0.114,4,0.101,5,0.088,7,0.462,8,0.026,12,0.206,20,0.191,21,0.016,25,1.798,28,1.378,34,0.005,35,0.009,36,0.009,37,0.421,65,0.551,70,0.403,73,0.189,79,0.969,86,1.484,92,0.421,123,0.551,125,0.634,128,0.56,131,2.475,135,0.957,136,2.131,138,1.915,139,1.363,140,2.529,148,2.225,150,2.449,156,1.032,159,1.139,160,0.957,161,0.682,162,1.682,163,2.151,168,1.036,170,2.033,179,0.481,189,1.781,200,0.682,201,1.467,214,2.631,216,0.87,218,0.87,219,0.87,220,2.131,264,1.454,269,0.957,283,0.798,299,3.139,335,0.798,351,2.129,361,1.066,374,0.87,376,0.87,378,0.957,381,1.066,383,1.066,384,1.066,391,0.957,401,2.56,403,2.295,413,2.677,417,1.066,418,3.345,422,2.677,482,1.333,561,1.066,576,0.87,577,2.677,578,1.433,579,1.066,580,1.212,581,0.957,582,1.212,583,1.212,584,1.212,585,1.212,586,1.212,587,1.212,588,1.212,589,1.212,590,1.212,591,1.212,592,1.212,593,1.066,594,1.066,595,1.212,596,1.212,597,1.599,598,2.025,599,1.212,600,1.781,601,2.025,602,1.212,603,2.608,604,2.982,605,1.212,606,1.212,607,1.212,608,1.212,609,1.212,610,2.025,611,1.212,612,1.212,613,1.066,614,1.212,615,1.212,616,1.066,617,1.781,618,1.066,619,2.025,620,3.389,621,1.212,622,1.212,623,1.066,624,1.212,625,1.212,626,1.212,627,1.212,628,1.212,629,1.212,630,1.212,631,1.212,632,1.212,633,1.212,634,1.212,635,1.212,636,1.212,637,2.025,638,2.025,639,2.025,640,1.212,641,1.212,642,2.025,643,1.212,644,1.212,645,1.212,646,1.212,647,1.212,648,1.212,649,1.212,650,1.212,651,1.212,652,1.212,653,1.212,654,1.212,655,1.212,656,1.066,657,1.212,658,4.371,659,3.889,660,3.664,661,3.664,662,2.295,663,1.212,664,1.212,665,2.025,666,2.025,667,1.066,668,1.212,669,2.608,670,2.025,671,1.212,672,1.212,673,2.025,674,1.212,675,1.212,676,1.212,677,1.212,678,2.025,679,1.212,680,2.025,681,1.212,682,1.212,683,1.212,684,1.212,685,1.212,686,1.212,687,2.608,688,2.025,689,1.212,690,1.212,691,1.212,692,2.295,693,1.212,694,1.212,695,1.212,696,1.212,697,1.212,698,1.212,699,1.212,700,1.212,701,1.212,702,1.212,703,1.212,704,1.212,705,1.212,706,1.212,707,1.212,708,1.212,709,1.212,710,1.212,711,1.212,712,1.212,713,1.212,714,2.608,715,1.212,716,3.047,717,2.025,718,3.047,719,2.025,720,3.047,721,2.025,722,2.025,723,1.212,724,1.212,725,1.212,726,1.212]],["title/classes/Users.html",[21,0.039,162,1.154]],["body/classes/Users.html",[3,0.18,4,0.158,5,0.138,7,0.475,8,0.026,20,0.18,21,0.025,34,0.008,35,0.013,36,0.008,73,0.455,76,1.256,79,1.668,86,2.274,88,2.473,128,1.175,148,2.401,150,2.441,152,2.924,156,1.366,157,1.073,159,1.639,162,1.96,163,2.045,164,3.058,166,3.314,168,1.691,169,3.479,170,2.226,176,1.256,177,2.563,178,2.537,179,0.758,181,1.679,183,1.256,186,2.913,188,1.908,197,1.37,228,1.507,229,1.679,288,2.913,294,1.679,299,2.092,300,1.908,309,2.301,311,1.679,315,1.908,351,2.345,366,2.563,401,2.604,413,2.791,422,2.791,460,1.679,465,1.908,482,1.918,507,1.908,567,3.954,574,1.908,604,3.108,727,1.908,728,4.179,729,4.179,730,4.179,731,4.179,732,4.179,733,4.179,734,4.179,735,4.179,736,4.179,737,2.257,738,3.445,739,2.257,740,2.257,741,2.257,742,2.257,743,2.257,744,2.257,745,2.257,746,2.257,747,2.257,748,2.257,749,2.257,750,2.257,751,2.257,752,2.257,753,2.257,754,2.257,755,2.257,756,4.677,757,2.913,758,2.257,759,2.257,760,2.257,761,2.257,762,2.257,763,2.257,764,2.257,765,2.257,766,2.257,767,2.257,768,2.257,769,2.257,770,2.257,771,2.257,772,3.445,773,2.257,774,2.257,775,2.257,776,2.257,777,2.257,778,2.257,779,2.257,780,2.257,781,2.257]],["title/controllers/UsersController.html",[0,1.154,463,2.086]],["body/controllers/UsersController.html",[0,0.695,2,0.695,3,0.165,4,0.145,5,0.126,7,0.433,8,0.026,9,1.256,10,1.152,11,1.382,12,0.297,13,0.984,14,1.539,15,1.256,20,0.165,21,0.023,25,2.365,27,1.957,28,1.6,31,3.575,32,1.539,33,1.539,34,0.008,35,0.012,36,0.008,73,0.273,74,1.012,76,1.135,78,1.827,79,0.65,84,1.256,86,1.327,88,2.234,91,1.952,92,1.71,93,1.952,123,0.795,125,1.749,128,0.971,138,0.915,140,2.57,148,2.294,150,2.57,162,1.626,163,2.417,194,2.152,197,1.256,198,1.256,199,1.382,376,1.256,456,1.75,459,1.539,462,1.75,463,1.957,466,1.75,467,1.75,581,1.382,613,1.539,616,1.539,617,1.539,618,1.539,623,2.397,656,1.539,692,2.397,782,1.75,783,2.725,784,2.725,785,2.725,786,2.725,787,2.725,788,2.725,789,3.222,790,3.222,791,3.222,792,2.725,793,2.069,794,3.222,795,2.069,796,2.725,797,2.069,798,2.069,799,2.069,800,1.75,801,2.069,802,2.069,803,2.069,804,2.069,805,2.069,806,4.467,807,2.069,808,2.069,809,2.069,810,2.069,811,2.069,812,2.069,813,2.069,814,5.127,815,2.069,816,2.069,817,3.222,818,2.069,819,2.069,820,2.069,821,3.222,822,2.069,823,2.069,824,2.069,825,2.069,826,2.069,827,2.069,828,2.069,829,2.069,830,2.069,831,3.222,832,2.069,833,2.069,834,2.069,835,2.069,836,2.069,837,2.069,838,2.069,839,2.069,840,2.069,841,2.069,842,2.069,843,2.069,844,2.069,845,2.069,846,3.222,847,2.069,848,2.069,849,2.069,850,2.069]],["title/modules/UsersModule.html",[37,1.01,53,1.913]],["body/modules/UsersModule.html",[2,1.641,3,0.293,4,0.258,5,0.225,7,0.593,8,0.026,12,0.528,20,0.293,21,0.041,34,0.014,35,0.018,36,0.014,37,1.614,39,1.626,40,1.515,41,1.889,42,1.889,43,1.626,44,2.818,45,2.818,50,3.484,53,3.655,55,2.509,56,1.889,57,1.889,59,2.721,64,2.234,65,1.414,86,2.012,125,2.974,156,1.258,162,1.235,168,1.641,200,1.75,335,2.048,351,2.012,376,2.234,378,2.457,459,2.736,463,3.333,581,2.457,851,3.111,852,3.679,853,3.111,854,3.111,855,3.679,856,3.679,857,3.679,858,3.679]],["title/injectables/UsersService.html",[70,0.578,125,1.519]],["body/injectables/UsersService.html",[3,0.094,4,0.083,5,0.072,7,0.429,8,0.026,12,0.169,20,0.162,21,0.013,25,2.218,28,1.272,34,0.004,35,0.008,36,0.008,37,0.347,65,0.454,70,0.342,71,0.454,73,0.156,74,0.638,76,0.966,78,1.508,79,1.125,86,1.308,91,1.663,92,1.496,93,1.663,123,0.781,125,0.898,128,0.839,131,2.271,135,1.357,136,2.467,138,1.729,139,1.182,140,2.393,148,2.271,150,2.582,156,0.921,160,0.789,161,0.562,162,1.749,163,2.24,168,0.898,170,1.851,179,0.396,189,1.511,200,0.562,201,1.992,214,3.341,216,1.624,218,0.717,219,0.717,220,1.955,264,1.234,269,0.789,283,0.657,299,2.914,335,0.657,351,1.474,361,1.989,374,0.717,376,0.717,378,0.789,381,0.878,383,0.878,384,0.878,391,0.789,401,2.332,403,1.989,413,1.357,417,0.878,418,3.089,422,1.357,482,1.131,561,0.878,576,0.717,577,2.612,579,0.878,580,0.998,581,0.789,582,0.998,583,0.998,584,0.998,585,1.718,586,0.998,587,2.261,588,2.261,589,0.998,590,0.998,591,0.998,592,0.998,593,0.878,594,0.878,595,1.718,596,0.998,597,1.357,598,1.718,599,0.998,600,1.511,601,2.261,602,1.718,603,2.261,604,2.663,605,0.998,606,0.998,607,1.718,608,0.998,609,0.998,610,1.718,611,0.998,612,0.998,613,1.511,614,0.998,615,0.998,616,1.511,617,1.511,618,0.878,619,1.718,620,3.027,621,0.998,622,0.998,623,1.511,624,0.998,625,0.998,626,0.998,627,0.998,628,0.998,629,0.998,630,0.998,631,0.998,632,0.998,633,0.998,634,0.998,635,0.998,636,0.998,637,1.718,638,1.718,639,1.718,640,0.998,641,0.998,642,1.718,643,0.998,644,0.998,645,0.998,646,0.998,647,0.998,648,0.998,649,0.998,650,0.998,651,1.718,652,0.998,653,0.998,654,0.998,655,0.998,656,1.511,657,0.998,658,4.058,659,3.541,660,3.307,661,3.307,662,1.989,663,0.998,664,0.998,665,1.718,666,1.718,667,0.878,668,0.998,669,2.261,670,1.718,671,0.998,672,0.998,673,1.718,674,0.998,675,0.998,676,0.998,677,0.998,678,1.718,679,0.998,680,1.718,681,0.998,682,0.998,683,0.998,684,0.998,685,0.998,686,0.998,687,2.261,688,1.718,689,0.998,690,0.998,691,0.998,692,2.663,693,0.998,694,0.998,695,0.998,696,0.998,697,0.998,698,0.998,699,0.998,700,0.998,701,0.998,702,0.998,703,0.998,704,0.998,705,0.998,706,0.998,707,0.998,708,0.998,709,0.998,710,0.998,711,0.998,712,0.998,713,1.718,714,2.261,715,0.998,716,2.686,717,1.718,718,2.686,719,1.718,720,2.686,721,1.718,722,1.718,723,0.998,724,1.718,725,0.998,726,0.998,783,1.718,784,1.718,785,1.718,786,1.718,787,1.718,788,1.718,792,1.718,796,0.998,800,0.998,859,2.032,860,2.032,861,1.181,862,1.181,863,1.181,864,1.181,865,1.181,866,1.181,867,1.181,868,1.181,869,1.181,870,1.181,871,1.181,872,1.181]],["title/coverage.html",[873,3.472]],["body/coverage.html",[0,1.984,1,2.032,5,0.186,6,2.573,8,0.026,13,1.447,16,1.848,18,1.447,21,0.068,34,0.011,35,0.016,36,0.011,43,1.345,54,1.848,70,1.075,72,2.573,82,2.032,83,2.573,86,1.253,103,1.848,104,1.848,111,2.032,121,2.573,125,1.345,128,0.552,156,0.783,158,2.573,162,1.022,168,1.022,172,1.092,190,2.032,191,2.573,201,1.447,212,2.573,220,1.345,229,2.263,233,1.848,234,2.573,235,2.573,245,2.263,246,3.192,250,2.573,271,2.573,273,2.573,282,2.573,289,2.573,320,2.032,321,2.573,333,1.694,351,1.253,354,2.573,401,3.866,446,2.032,447,2.032,449,2.573,451,2.032,463,1.848,488,2.263,498,2.573,510,2.032,511,2.573,523,1.694,540,2.573,565,2.573,576,1.848,577,2.032,579,3.192,597,2.032,727,2.573,782,2.573,873,2.263,874,2.573,875,3.042,876,3.042,877,6.199,878,4.971,879,5.693,880,2.573,881,5.399,882,4.971,883,5.693,884,3.042,885,3.042,886,3.192,887,2.573,888,3.628,889,3.042,890,3.042,891,3.042,892,3.042,893,3.042,894,3.042]],["title/dependencies.html",[40,1.699,895,2.88]],["body/dependencies.html",[8,0.026,12,0.638,34,0.016,35,0.02,36,0.016,40,1.831,65,1.709,94,3.308,95,3.308,107,2.476,110,3.308,179,1.493,257,4.466,486,3.761,896,6.004,897,4.447,898,5.521,899,4.447,900,5.521,901,4.447,902,4.447,903,4.447,904,4.447,905,4.447,906,4.447,907,4.447,908,4.447,909,4.447,910,4.447,911,4.447,912,4.447,913,4.447,914,4.447,915,2.97,916,3.761,917,4.447,918,4.447]],["title/miscellaneous/enumerations.html",[919,1.603,920,3.489]],["body/miscellaneous/enumerations.html",[8,0.024,34,0.019,35,0.022,36,0.019,73,0.678,152,3.094,283,3.354,500,4.024,919,2.862,920,4.347,921,5.14,922,5.14,923,6.025]],["title/miscellaneous/functions.html",[919,1.603,924,3.489]],["body/miscellaneous/functions.html",[8,0.023,34,0.02,35,0.023,36,0.02,43,2.858,73,0.697,886,3.931,919,2.942,924,4.468,925,4.468]],["title/index.html",[73,0.38,926,2.88,927,2.88]],["body/index.html",[4,0.209,5,0.182,8,0.025,34,0.011,35,0.016,36,0.011,40,1.225,168,1.418,220,1.315,450,2.515,455,2.515,481,4.151,593,3.652,594,3.975,600,3.141,662,2.212,873,2.212,874,3.57,915,3.77,928,2.974,929,2.974,930,4.222,931,2.974,932,2.974,933,2.974,934,2.974,935,2.974,936,2.974,937,2.974,938,2.974,939,2.974,940,4.222,941,2.974,942,2.974,943,2.974,944,2.974,945,2.974,946,2.974,947,2.974,948,4.222,949,6.031,950,2.974,951,2.974,952,2.974,953,4.222,954,2.974,955,4.222,956,2.974,957,2.974,958,2.974,959,2.974,960,2.974,961,2.974,962,4.222,963,2.974,964,2.974,965,2.974,966,6.031,967,2.974,968,2.974,969,2.974,970,5.864,971,2.974,972,2.974,973,4.222,974,2.974,975,2.974,976,2.974,977,2.974,978,4.222,979,4.222,980,2.974,981,2.974,982,2.974,983,4.222,984,4.222,985,2.974,986,4.222,987,4.909,988,4.222,989,2.974,990,2.974,991,2.974,992,2.974,993,2.974,994,2.974,995,2.974,996,4.909,997,2.974,998,3.57,999,2.974,1000,2.974,1001,2.974,1002,2.974,1003,2.974,1004,2.974,1005,2.974,1006,2.974,1007,2.974,1008,2.974,1009,2.974,1010,2.974,1011,2.974,1012,4.909,1013,2.974,1014,2.974,1015,4.222,1016,2.974,1017,2.974,1018,2.974,1019,4.151,1020,2.515,1021,2.974,1022,2.974,1023,2.974,1024,2.974,1025,2.974,1026,2.974,1027,4.222,1028,4.222,1029,2.515,1030,2.974,1031,2.974,1032,2.974,1033,2.974,1034,2.974,1035,2.974,1036,2.974,1037,2.974,1038,2.974,1039,2.974]],["title/modules.html",[39,2.063]],["body/modules.html",[8,0.022,34,0.018,35,0.022,36,0.018,38,3.232,39,2.139,49,2.938,50,2.694,51,2.938,52,2.938,53,2.694,1019,5.677,1040,6.714,1041,6.714,1042,6.714]],["title/overview.html",[1043,3.947]],["body/overview.html",[2,1.103,8,0.026,18,2.95,34,0.012,35,0.017,36,0.012,37,0.966,38,4.473,39,1.452,40,1.353,41,1.687,42,1.687,43,1.452,44,1.687,45,1.687,46,2.778,47,2.778,48,2.778,49,4.013,50,3.452,51,3.675,52,3.675,53,3.57,54,3.145,55,2.324,56,1.687,57,1.687,71,1.262,99,2.778,101,2.778,102,2.778,103,3.145,104,3.145,125,2.741,157,1.562,201,2.95,206,2.778,207,2.778,208,2.778,333,3.452,343,2.778,344,2.778,345,2.778,418,3.023,446,2.194,523,3.452,534,2.778,535,2.778,536,2.778,576,1.995,851,2.778,853,2.778,854,2.778,1043,2.778,1044,4.527,1045,3.285,1046,3.285]],["title/miscellaneous/variables.html",[919,1.603,1047,3.489]],["body/miscellaneous/variables.html",[8,0.026,34,0.017,35,0.021,36,0.017,73,0.603,79,1.436,111,3.75,116,3.865,128,1.018,152,2.347,451,4.346,488,4.177,500,4.234,667,3.4,757,5.36,880,3.865,886,3.4,887,4.748,888,3.865,919,2.545,925,3.865,1047,3.865,1048,4.571,1049,5.615,1050,4.571,1051,4.571,1052,4.571]],["title/additional-documentation/swagger-api-docs.html",[915,1.453,998,1.84,1053,2.175,1054,2.175,1055,1.84]],["body/additional-documentation/swagger-api-docs.html",[8,0.026,34,0.017,35,0.021,36,0.017,139,2.042,220,2.042,482,2.571,597,3.085,915,4.078,916,5.38,1020,3.905,1029,3.905,1055,4.778,1056,4.619,1057,4.619,1058,4.619,1059,4.619,1060,4.619,1061,4.619,1062,4.619,1063,4.619,1064,4.619,1065,4.619,1066,4.619,1067,4.619,1068,4.619,1069,4.619,1070,4.619,1071,4.619,1072,4.619]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["0",{"_index":401,"title":{},"body":{"injectables/RecognitionService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":892,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":893,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":891,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":883,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":418,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.0.0",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1045,"title":{},"body":{"overview.html":{}}}],["12",{"_index":662,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["2/3",{"_index":890,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":944,"title":{},"body":{"index.html":{}}}],["3.0.2",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["3600s",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["4.0.0",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1044,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1046,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["9650594ab728",{"_index":1010,"title":{},"body":{"index.html":{}}}],["access",{"_index":455,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{}}}],["access_token",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["act",{"_index":773,"title":{},"body":{"classes/Users.html":{}}}],["add",{"_index":1006,"title":{},"body":{"index.html":{}}}],["additional",{"_index":1053,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{}}],["admin",{"_index":923,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["allowed",{"_index":454,"title":{},"body":{"guards/RolesGuard.html":{}}}],["amazing",{"_index":1033,"title":{},"body":{"index.html":{}}}],["andwhere(\"employeeemployeeid",{"_index":430,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["andwhere(\"employeeid",{"_index":420,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["andwhere(\"tagtagid",{"_index":432,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["andwhere('\"employeeemployeeid",{"_index":441,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["andwhere('\"tagtagid",{"_index":442,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["api",{"_index":1055,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["app",{"_index":968,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":936,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":38,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":54,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arr_employee",{"_index":657,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["async",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":246,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/jwt",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["auth/local",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":82,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":1007,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":247,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":249,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":272,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":49,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authservice",{"_index":18,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":999,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":480,"title":{},"body":{"guards/RolesGuard.html":{}}}],["await",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/LocalStrategy.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":937,"title":{},"body":{"index.html":{}}}],["backend_database",{"_index":963,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1034,"title":{},"body":{"index.html":{}}}],["based",{"_index":665,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["begin",{"_index":1057,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["between",{"_index":1013,"title":{},"body":{"index.html":{}}}],["body",{"_index":199,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":366,"title":{},"body":{"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Users.html":{}}}],["boolean(createuserdto.ismanager",{"_index":632,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1042,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1040,"title":{},"body":{"modules.html":{}}}],["building",{"_index":931,"title":{},"body":{"index.html":{}}}],["c1",{"_index":961,"title":{},"body":{"index.html":{}}}],["calculate",{"_index":712,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["call",{"_index":1058,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["canactivate",{"_index":468,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":472,"title":{},"body":{"guards/RolesGuard.html":{}}}],["changeuserstats",{"_index":355,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["changeuserstats(recdto",{"_index":364,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["class",{"_index":21,"title":{"classes/Company.html":{},"classes/CreateRecDto.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/Users.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/Company.html":{},"classes/CreateRecDto.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/Users.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_companymodule",{"_index":206,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_companymodule_exports",{"_index":207,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_companymodule_providers",{"_index":208,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_recognitionmodule",{"_index":343,"title":{},"body":{"modules/RecognitionModule.html":{},"overview.html":{}}}],["cluster_recognitionmodule_exports",{"_index":345,"title":{},"body":{"modules/RecognitionModule.html":{},"overview.html":{}}}],["cluster_recognitionmodule_providers",{"_index":344,"title":{},"body":{"modules/RecognitionModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":534,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_tagmodule_exports",{"_index":535,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_tagmodule_providers",{"_index":536,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":851,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":853,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":852,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":854,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":938,"title":{},"body":{"index.html":{}}}],["column",{"_index":166,"title":{},"body":{"classes/Company.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["column(\"timestamp",{"_index":315,"title":{},"body":{"classes/Recognition.html":{},"classes/Users.html":{}}}],["column('timestamp",{"_index":300,"title":{},"body":{"classes/Recognition.html":{},"classes/Users.html":{}}}],["column({default",{"_index":567,"title":{},"body":{"classes/TagStats.html":{},"classes/Users.html":{}}}],["column({type",{"_index":755,"title":{},"body":{"classes/Users.html":{}}}],["comp",{"_index":429,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["comp_id",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{}}}],["company",{"_index":156,"title":{"classes/Company.html":{}},"body":{"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"classes/Tag.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["company.companyid",{"_index":221,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company.controller",{"_index":210,"title":{},"body":{"modules/CompanyModule.html":{}}}],["company.entity",{"_index":311,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{},"classes/Users.html":{}}}],["company.name",{"_index":223,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company.recognitions",{"_index":225,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company.service",{"_index":202,"title":{},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{}}}],["company.tags",{"_index":230,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company/company.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["company/company.service",{"_index":582,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["company=>company.recognitions",{"_index":314,"title":{},"body":{"classes/Recognition.html":{}}}],["company=>company.tags",{"_index":508,"title":{},"body":{"classes/Tag.html":{}}}],["company_id",{"_index":814,"title":{},"body":{"controllers/UsersController.html":{}}}],["companycontroller",{"_index":190,"title":{"controllers/CompanyController.html":{}},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"coverage.html":{}}}],["companyid",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"classes/Company.html":{},"injectables/JwtStrategy.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["companymodule",{"_index":50,"title":{"modules/CompanyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["companyname",{"_index":618,"title":{},"body":{"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["companyrepository",{"_index":216,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["companyservice",{"_index":201,"title":{"injectables/CompanyService.html":{}},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["compid",{"_index":716,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["compodoc",{"_index":983,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":990,"title":{},"body":{"index.html":{}}}],["compose",{"_index":953,"title":{},"body":{"index.html":{}}}],["connecting",{"_index":1025,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1023,"title":{},"body":{"index.html":{}}}],["console.log(profilearray",{"_index":612,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["console.log(recogs",{"_index":723,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["const",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/LocalStrategy.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["constants",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":274,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(companyrepository",{"_index":213,"title":{},"body":{"injectables/CompanyService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{}}}],["constructor(reflector",{"_index":469,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(tagrepository",{"_index":543,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":358,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["constructor(usersrepository",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":477,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":494,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":493,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":495,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('company",{"_index":203,"title":{},"body":{"controllers/CompanyController.html":{}}}],["controller('recognitions",{"_index":336,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["controller('tag",{"_index":525,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('users",{"_index":462,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count(recognition.\"emptoemployeeid",{"_index":674,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["countreceived",{"_index":445,"title":{},"body":{"injectables/RecognitionService.html":{},"classes/TagStats.html":{}}}],["countsent",{"_index":427,"title":{},"body":{"injectables/RecognitionService.html":{},"classes/TagStats.html":{}}}],["coverage",{"_index":873,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":228,"title":{},"body":{"injectables/CompanyService.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{},"classes/Users.html":{}}}],["create(@body",{"_index":339,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["create(@request",{"_index":531,"title":{},"body":{"controllers/TagController.html":{}}}],["create(createrecdto",{"_index":323,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["create(req",{"_index":513,"title":{},"body":{"controllers/TagController.html":{}}}],["createcompany",{"_index":192,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["createcompany(@body",{"_index":204,"title":{},"body":{"controllers/CompanyController.html":{}}}],["createcompany(createcompanydto",{"_index":193,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["createcompanydto",{"_index":196,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["createcompanydto.companyid",{"_index":222,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createcompanydto.name",{"_index":224,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createcompanydto.recognitions",{"_index":226,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createcompanydto.tags",{"_index":231,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createrec",{"_index":356,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["createrec(recdto",{"_index":369,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["createrecdto",{"_index":233,"title":{"classes/CreateRecDto.html":{}},"body":{"classes/CreateRecDto.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"coverage.html":{}}}],["createtag",{"_index":541,"title":{},"body":{"injectables/TagService.html":{}}}],["createtag(companyid",{"_index":545,"title":{},"body":{"injectables/TagService.html":{}}}],["createuser",{"_index":783,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":834,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":616,"title":{},"body":{"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":623,"title":{},"body":{"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto.company",{"_index":619,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.companyid",{"_index":620,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.companyname",{"_index":622,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.email",{"_index":645,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.employeeid",{"_index":625,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.firstname",{"_index":628,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.lastname",{"_index":630,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.manager",{"_index":637,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.managerid",{"_index":639,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":647,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createuserdto.positiontitle",{"_index":634,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createusermultiple",{"_index":784,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createusermultiple(@body",{"_index":839,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusermultiple(employeemultiple",{"_index":656,"title":{},"body":{"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["cs320",{"_index":939,"title":{},"body":{"index.html":{}}}],["current",{"_index":952,"title":{},"body":{"index.html":{}}}],["currently",{"_index":1015,"title":{},"body":{"index.html":{}}}],["currtag",{"_index":437,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["cut",{"_index":960,"title":{},"body":{"index.html":{}}}],["database",{"_index":594,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databuild",{"_index":964,"title":{},"body":{"index.html":{}}}],["date",{"_index":299,"title":{},"body":{"classes/Recognition.html":{},"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["date(createuserdto.startdate",{"_index":636,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["date(rawrockstar.startdate",{"_index":706,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["date.getfullyear",{"_index":660,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["date.getmonth",{"_index":661,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"classes/TagStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{}}}],["deeplinking",{"_index":1066,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["default",{"_index":757,"title":{},"body":{"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":197,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{},"classes/Users.html":{},"controllers/UsersController.html":{}}}],["delete(':employeeid/company/:companyid",{"_index":821,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":326,"title":{},"body":{"controllers/RecognitionController.html":{},"controllers/TagController.html":{}}}],["delete(@param('id",{"_index":341,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["delete(@request",{"_index":528,"title":{},"body":{"controllers/TagController.html":{}}}],["delete(id",{"_index":325,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["delete(req",{"_index":517,"title":{},"body":{"controllers/TagController.html":{}}}],["deleterec",{"_index":357,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["deleterec(id",{"_index":371,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["deleteresult",{"_index":374,"title":{},"body":{"injectables/RecognitionService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["deletetag",{"_index":542,"title":{},"body":{"injectables/TagService.html":{}}}],["deletetag(companyid",{"_index":547,"title":{},"body":{"injectables/TagService.html":{}}}],["dependencies",{"_index":40,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":450,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{}}}],["detailed",{"_index":985,"title":{},"body":{"index.html":{}}}],["development",{"_index":969,"title":{},"body":{"index.html":{}}}],["direct",{"_index":1018,"title":{},"body":{"index.html":{}}}],["directory",{"_index":947,"title":{},"body":{"index.html":{}}}],["docker",{"_index":949,"title":{},"body":{"index.html":{}}}],["docs",{"_index":998,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{"index.html":{}}}],["documentation",{"_index":874,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dom_id",{"_index":1065,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["don't",{"_index":767,"title":{},"body":{"classes/Users.html":{}}}],["down",{"_index":954,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":331,"title":{},"body":{"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{}}}],["duplicated",{"_index":766,"title":{},"body":{"classes/Users.html":{}}}],["e2e",{"_index":980,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":932,"title":{},"body":{"index.html":{}}}],["email",{"_index":269,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Login.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["emp",{"_index":431,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["emp=>emp.manager",{"_index":774,"title":{},"body":{"classes/Users.html":{}}}],["empfrom",{"_index":290,"title":{},"body":{"classes/Recognition.html":{},"injectables/RecognitionService.html":{}}}],["empid",{"_index":718,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["employee",{"_index":283,"title":{},"body":{"classes/Login.html":{},"injectables/RecognitionService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["employee_id",{"_index":817,"title":{},"body":{"controllers/UsersController.html":{}}}],["employeefrom",{"_index":237,"title":{},"body":{"classes/CreateRecDto.html":{},"injectables/RecognitionService.html":{}}}],["employeeid",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["employeemultiple",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["employeeto",{"_index":238,"title":{},"body":{"classes/CreateRecDto.html":{},"injectables/RecognitionService.html":{}}}],["empto",{"_index":291,"title":{},"body":{"classes/Recognition.html":{},"injectables/RecognitionService.html":{}}}],["endpoint",{"_index":456,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["entity",{"_index":176,"title":{},"body":{"classes/Company.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["entity({name",{"_index":183,"title":{},"body":{"classes/Company.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["entity/company.entity",{"_index":200,"title":{},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity/login.entity",{"_index":581,"title":{},"body":{"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity/recognition.entity",{"_index":335,"title":{},"body":{"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity/tag.entity",{"_index":377,"title":{},"body":{"injectables/RecognitionService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["entity/tagstats.entity",{"_index":378,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity/users.entity",{"_index":376,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":756,"title":{},"body":{"classes/Users.html":{}}}],["enumerations",{"_index":920,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environmental",{"_index":1017,"title":{},"body":{"index.html":{}}}],["example",{"_index":457,"title":{},"body":{"guards/RolesGuard.html":{}}}],["execute",{"_index":421,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["executioncontext",{"_index":473,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":564,"title":{},"body":{"injectables/TagService.html":{}}}],["expiresin",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["explorer",{"_index":1008,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":248,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extract(month",{"_index":677,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["extract(year",{"_index":679,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["extractjwt",{"_index":255,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":262,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failure",{"_index":562,"title":{},"body":{"injectables/TagService.html":{}}}],["false",{"_index":264,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["findall",{"_index":322,"title":{},"body":{"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{}}}],["findto",{"_index":439,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["firstname",{"_index":728,"title":{},"body":{"classes/Users.html":{}}}],["for(let",{"_index":400,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["foreign",{"_index":771,"title":{},"body":{"classes/Users.html":{}}}],["form",{"_index":1016,"title":{},"body":{"index.html":{}}}],["found",{"_index":986,"title":{},"body":{"index.html":{}}}],["fr",{"_index":956,"title":{},"body":{"index.html":{}}}],["framework",{"_index":930,"title":{},"body":{"index.html":{}}}],["fs",{"_index":887,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":597,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["functions",{"_index":924,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":988,"title":{},"body":{"index.html":{}}}],["generated",{"_index":994,"title":{},"body":{"index.html":{}}}],["get(':employ_id/company/:comp_id",{"_index":823,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('all",{"_index":329,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["get('company/:comp_id",{"_index":827,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('company/rockstar/:comp_id",{"_index":841,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('company/rockstar/recognitions/:comp_id",{"_index":848,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('company/rockstar/stats/:comp_id",{"_index":844,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["get('stats/:employeeid/company/:companyid",{"_index":836,"title":{},"body":{"controllers/UsersController.html":{}}}],["getarrayofusers",{"_index":859,"title":{},"body":{"injectables/UsersService.html":{}}}],["getarrayofusers(companyid",{"_index":607,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getcompanytags",{"_index":512,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getcompanytags(@request",{"_index":526,"title":{},"body":{"controllers/TagController.html":{}}}],["getcompanytags(companyid",{"_index":549,"title":{},"body":{"injectables/TagService.html":{}}}],["getcompanytags(req",{"_index":520,"title":{},"body":{"controllers/TagController.html":{}}}],["getconnection",{"_index":375,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["gethello",{"_index":75,"title":{},"body":{"injectables/AppService.html":{}}}],["getone",{"_index":443,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["getprofile",{"_index":785,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getprofile(@request",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":602,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrepository",{"_index":551,"title":{},"body":{"injectables/TagService.html":{}}}],["getrockstar",{"_index":786,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrockstar(@param('comp_id",{"_index":842,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrockstar(companyid",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrockstarrecogs",{"_index":787,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrockstarrecogs(@param('comp_id",{"_index":849,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrockstarrecogs(comp_id",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrockstarrecogs(rockstar",{"_index":713,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrockstarstats",{"_index":788,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrockstarstats(@param('comp_id",{"_index":845,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrockstarstats(comp_id",{"_index":807,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrockstarstats(rockstar",{"_index":724,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getstats",{"_index":789,"title":{},"body":{"controllers/UsersController.html":{}}}],["getstats(@param('employeeid",{"_index":837,"title":{},"body":{"controllers/UsersController.html":{}}}],["getstats(employeeid",{"_index":810,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":926,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@param(\"employ_id",{"_index":824,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(employee_id",{"_index":813,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbycompany",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbycompany(@param(\"comp_id",{"_index":828,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbycompany(company_id",{"_index":818,"title":{},"body":{"controllers/UsersController.html":{}}}],["grab",{"_index":592,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grep",{"_index":958,"title":{},"body":{"index.html":{}}}],["group",{"_index":680,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":1030,"title":{},"body":{"index.html":{}}}],["guard",{"_index":446,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":833,"title":{},"body":{"controllers/UsersController.html":{}}}],["guards",{"_index":448,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hash",{"_index":589,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["hello",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":987,"title":{},"body":{"index.html":{}}}],["holding",{"_index":1022,"title":{},"body":{"index.html":{}}}],["http://localhost:4200/api",{"_index":1000,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":995,"title":{},"body":{"index.html":{}}}],["https://codeburst.io/integrating",{"_index":1009,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/54802832/is",{"_index":1004,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":608,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["id",{"_index":328,"title":{},"body":{"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["identifier",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["if(recdto.tags",{"_index":399,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["if(tag",{"_index":557,"title":{},"body":{"injectables/TagService.html":{}}}],["ignoreexpiration",{"_index":263,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":490,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["impossible",{"_index":779,"title":{},"body":{"classes/Users.html":{}}}],["increment",{"_index":365,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["index",{"_index":73,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index()@manytoone(undefined",{"_index":501,"title":{},"body":{"classes/Tag.html":{}}}],["index([\"company",{"_index":312,"title":{},"body":{"classes/Recognition.html":{}}}],["index([\"employee",{"_index":573,"title":{},"body":{"classes/TagStats.html":{}}}],["index(['companyid",{"_index":762,"title":{},"body":{"classes/Users.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":593,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":218,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(company",{"_index":219,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(login",{"_index":586,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(recognition",{"_index":383,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(tag",{"_index":382,"title":{},"body":{"injectables/RecognitionService.html":{},"injectables/TagService.html":{}}}],["injectrepository(tagstats",{"_index":384,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(users",{"_index":381,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["insert",{"_index":435,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["installation",{"_index":945,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":967,"title":{},"body":{"index.html":{}}}],["instead",{"_index":1021,"title":{},"body":{"index.html":{}}}],["interface",{"_index":576,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":578,"title":{},"body":{"interfaces/UserStats.html":{}}}],["ismanager",{"_index":729,"title":{},"body":{"classes/Users.html":{}}}],["join",{"_index":1036,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":178,"title":{},"body":{"classes/Company.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["joincolumn({name",{"_index":764,"title":{},"body":{"classes/Users.html":{}}}],["jointable",{"_index":308,"title":{},"body":{"classes/Recognition.html":{}}}],["jwt",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":13,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":103,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":772,"title":{},"body":{"classes/Users.html":{}}}],["lastname",{"_index":730,"title":{},"body":{"classes/Users.html":{}}}],["legend",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1039,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1028,"title":{},"body":{"index.html":{}}}],["links",{"_index":1003,"title":{},"body":{"index.html":{}}}],["local",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":16,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localhost:5432",{"_index":1026,"title":{},"body":{"index.html":{}}}],["localstrategy",{"_index":104,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":1063,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["login",{"_index":86,"title":{"classes/Login.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Login.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["login(@request",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["login(req",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.email",{"_index":644,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["login.employee",{"_index":648,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["login.entity",{"_index":761,"title":{},"body":{"classes/Users.html":{}}}],["login.password",{"_index":646,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["loginrepo",{"_index":587,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["loginuser",{"_index":860,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginuser(username",{"_index":595,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["looks",{"_index":765,"title":{},"body":{"classes/Users.html":{}}}],["make",{"_index":770,"title":{},"body":{"classes/Users.html":{}}}],["making",{"_index":778,"title":{},"body":{"classes/Users.html":{}}}],["managed",{"_index":731,"title":{},"body":{"classes/Users.html":{}}}],["manager",{"_index":604,"title":{},"body":{"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["manager.ismanager",{"_index":642,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["managerid",{"_index":617,"title":{},"body":{"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["manytomany",{"_index":310,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{}}}],["manytomany(()=>tag",{"_index":318,"title":{},"body":{"classes/Recognition.html":{}}}],["manytomany(undefined",{"_index":304,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{}}}],["manytoone",{"_index":309,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["manytoone(()=>company",{"_index":763,"title":{},"body":{"classes/Users.html":{}}}],["manytoone(undefined",{"_index":294,"title":{},"body":{"classes/Recognition.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["manytoone(undefined)@joincolumn",{"_index":748,"title":{},"body":{"classes/Users.html":{}}}],["matches",{"_index":483,"title":{},"body":{"guards/RolesGuard.html":{}}}],["matching",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["max(t1.numrecog",{"_index":671,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["maxindex",{"_index":688,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["maxrecog",{"_index":687,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":475,"title":{},"body":{"guards/RolesGuard.html":{}}}],["methods",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":919,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1027,"title":{},"body":{"index.html":{}}}],["mode",{"_index":973,"title":{},"body":{"index.html":{}}}],["module",{"_index":37,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":39,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["months",{"_index":666,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":984,"title":{},"body":{"index.html":{}}}],["msg",{"_index":239,"title":{},"body":{"classes/CreateRecDto.html":{},"classes/Recognition.html":{},"injectables/RecognitionService.html":{}}}],["name",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["necessary",{"_index":769,"title":{},"body":{"classes/Users.html":{}}}],["need",{"_index":227,"title":{},"body":{"injectables/CompanyService.html":{}}}],["nest",{"_index":481,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{}}}],["nestjs",{"_index":996,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":486,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":220,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/LocalStrategy.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["node.js",{"_index":929,"title":{},"body":{"index.html":{}}}],["node:dns",{"_index":380,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["notes",{"_index":1011,"title":{},"body":{"index.html":{}}}],["npm",{"_index":966,"title":{},"body":{"index.html":{}}}],["npx",{"_index":989,"title":{},"body":{"index.html":{}}}],["null",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagService.html":{}}}],["number",{"_index":163,"title":{},"body":{"classes/Company.html":{},"classes/CreateRecDto.html":{},"classes/Recognition.html":{},"injectables/RecognitionService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numrecog",{"_index":675,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["numrecognitions",{"_index":672,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["numrecsreceived",{"_index":422,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["numrecssent",{"_index":413,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":667,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":177,"title":{},"body":{"classes/Company.html":{},"classes/Tag.html":{},"classes/Users.html":{}}}],["onetomany(()=>recognition",{"_index":186,"title":{},"body":{"classes/Company.html":{},"classes/Users.html":{}}}],["onetomany(()=>tag",{"_index":184,"title":{},"body":{"classes/Company.html":{}}}],["onetomany(()=>users",{"_index":188,"title":{},"body":{"classes/Company.html":{},"classes/Users.html":{}}}],["onetomany(undefined",{"_index":169,"title":{},"body":{"classes/Company.html":{},"classes/Tag.html":{},"classes/Users.html":{}}}],["onetoone",{"_index":288,"title":{},"body":{"classes/Login.html":{},"classes/Users.html":{}}}],["onetoone(undefined",{"_index":745,"title":{},"body":{"classes/Users.html":{}}}],["onetoone(undefined)@joincolumn",{"_index":285,"title":{},"body":{"classes/Login.html":{}}}],["open",{"_index":1029,"title":{},"body":{"index.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["optional",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["otherwise",{"_index":485,"title":{},"body":{"guards/RolesGuard.html":{}}}],["out",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1043,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":991,"title":{},"body":{"index.html":{}}}],["package",{"_index":895,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":1054,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{}}],["param",{"_index":198,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/RecognitionController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["param(\"comp_id",{"_index":825,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('companyid",{"_index":831,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":529,"title":{},"body":{"controllers/TagController.html":{}}}],["parameter",{"_index":478,"title":{},"body":{"guards/RolesGuard.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pass",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["passed",{"_index":479,"title":{},"body":{"guards/RolesGuard.html":{}}}],["passport",{"_index":257,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{}}}],["password:string",{"_index":279,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwords",{"_index":590,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["payload",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub.companyid",{"_index":268,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub.employeeid",{"_index":266,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub.role",{"_index":267,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":270,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["peer",{"_index":940,"title":{},"body":{"index.html":{}}}],["persistence",{"_index":1012,"title":{},"body":{"index.html":{}}}],["pg",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":1037,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1070,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["positiontitle",{"_index":732,"title":{},"body":{"classes/Users.html":{}}}],["possible",{"_index":1005,"title":{},"body":{"index.html":{}}}],["post",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["post('auth/login",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["post('create",{"_index":194,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["post('create_multiple",{"_index":794,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["postdate",{"_index":292,"title":{},"body":{"classes/Recognition.html":{}}}],["postgres",{"_index":959,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/RecognitionController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["presets",{"_index":1067,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["prevmonth",{"_index":658,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["primary",{"_index":736,"title":{},"body":{"classes/Users.html":{}}}],["primarycolumn",{"_index":164,"title":{},"body":{"classes/Company.html":{},"classes/Login.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"classes/Users.html":{}}}],["primarygeneratedcolumn",{"_index":307,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{}}}],["primarygeneratedcolumn(\"increment",{"_index":313,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{}}}],["primarygeneratedcolumn('increment",{"_index":302,"title":{},"body":{"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{}}}],["private",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":975,"title":{},"body":{"index.html":{}}}],["profile",{"_index":599,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["profilearray",{"_index":610,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["profiles",{"_index":606,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["progressive",{"_index":928,"title":{},"body":{"index.html":{}}}],["project",{"_index":948,"title":{},"body":{"index.html":{}}}],["promise",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompanyService.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":159,"title":{},"body":{"classes/Company.html":{},"classes/CreateRecDto.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{}}}],["prototype",{"_index":942,"title":{},"body":{"index.html":{}}}],["providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["prvmonth\",{prvmonth:prevmonth}).andwhere(\"extract(year",{"_index":721,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["ps",{"_index":957,"title":{},"body":{"index.html":{}}}],["query",{"_index":583,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder",{"_index":580,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querystring",{"_index":668,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["range",{"_index":605,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar",{"_index":690,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar.companyid",{"_index":694,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar.employeeid",{"_index":696,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar.firstname",{"_index":698,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar.ismanager",{"_index":702,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar.lastname",{"_index":700,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar.manageremployeeid",{"_index":711,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar.positiontitle",{"_index":704,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rawrockstar.role",{"_index":708,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["read",{"_index":1038,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":236,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["reality",{"_index":591,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rec",{"_index":386,"title":{},"body":{"injectables/RecognitionService.html":{},"classes/Tag.html":{}}}],["rec.company",{"_index":390,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec.company.companyid",{"_index":407,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec.dto",{"_index":332,"title":{},"body":{"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{}}}],["rec.dto.ts",{"_index":235,"title":{},"body":{"classes/CreateRecDto.html":{},"coverage.html":{}}}],["rec.dto.ts:2",{"_index":240,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.dto.ts:3",{"_index":241,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.dto.ts:4",{"_index":242,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.dto.ts:5",{"_index":243,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.dto.ts:6",{"_index":244,"title":{},"body":{"classes/CreateRecDto.html":{}}}],["rec.empfrom",{"_index":393,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec.empfrom.employeeid",{"_index":408,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec.empto",{"_index":396,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec.empto.employeeid",{"_index":409,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec.msg",{"_index":387,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec.postdate",{"_index":389,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec.tags",{"_index":398,"title":{},"body":{"injectables/RecognitionService.html":{},"classes/Tag.html":{}}}],["rec.tags.foreach(tag",{"_index":405,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rec=>rec.company",{"_index":187,"title":{},"body":{"classes/Company.html":{}}}],["rec=>rec.empfrom",{"_index":775,"title":{},"body":{"classes/Users.html":{}}}],["rec=>rec.empto",{"_index":776,"title":{},"body":{"classes/Users.html":{}}}],["recdto",{"_index":368,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["recdto.company",{"_index":392,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["recdto.employeefrom",{"_index":395,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["recdto.employeeto",{"_index":397,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["recdto.msg",{"_index":388,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["recdto.tags[i",{"_index":433,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["recid",{"_index":293,"title":{},"body":{"classes/Recognition.html":{},"injectables/RecognitionService.html":{}}}],["recognition",{"_index":168,"title":{"classes/Recognition.html":{}},"body":{"classes/Company.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"classes/Tag.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["recognition.\"emptocompanyid",{"_index":676,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recognition.\"emptoemployeeid",{"_index":673,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recognition.\"postdate",{"_index":678,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recognition.controller",{"_index":347,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["recognition.entity",{"_index":181,"title":{},"body":{"classes/Company.html":{},"classes/Tag.html":{},"classes/Users.html":{}}}],["recognition.postdate",{"_index":720,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recognition.recid\").where(\"recognition.emptocompanyid",{"_index":726,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recognition.service",{"_index":334,"title":{},"body":{"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{}}}],["recognition/recognition.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["recognitioncontroller",{"_index":320,"title":{"controllers/RecognitionController.html":{}},"body":{"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"coverage.html":{}}}],["recognitionmodule",{"_index":51,"title":{"modules/RecognitionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecognitionModule.html":{},"modules.html":{},"overview.html":{}}}],["recognitionrepository",{"_index":588,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recognitions",{"_index":160,"title":{},"body":{"classes/Company.html":{},"controllers/RecognitionController.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recognitionservice",{"_index":333,"title":{"injectables/RecognitionService.html":{}},"body":{"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"coverage.html":{},"overview.html":{}}}],["recognitionsrepository",{"_index":360,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["recogs",{"_index":714,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recs",{"_index":337,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["recsreceived",{"_index":733,"title":{},"body":{"classes/Users.html":{}}}],["recssent",{"_index":734,"title":{},"body":{"classes/Users.html":{}}}],["referencedcolumnname",{"_index":738,"title":{},"body":{"classes/Users.html":{}}}],["reflect",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":470,"title":{},"body":{"guards/RolesGuard.html":{}}}],["region",{"_index":1059,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["related",{"_index":1002,"title":{},"body":{"index.html":{}}}],["relation",{"_index":777,"title":{},"body":{"classes/Users.html":{}}}],["relations",{"_index":403,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["removeuser",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removeuser(@param('employeeid",{"_index":830,"title":{},"body":{"controllers/UsersController.html":{}}}],["removeuser(employeeid",{"_index":613,"title":{},"body":{"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repo",{"_index":1020,"title":{},"body":{"index.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["repository",{"_index":214,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user.companyid",{"_index":467,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["require('fs",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":491,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":496,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":444,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["reset",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responsible",{"_index":452,"title":{},"body":{"guards/RolesGuard.html":{}}}],["restriction",{"_index":484,"title":{},"body":{"guards/RolesGuard.html":{}}}],["result",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["results",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["retquery",{"_index":685,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["retquery.max",{"_index":689,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["retquery[maxindex",{"_index":691,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["retrieves",{"_index":598,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":379,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["rimraf",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["rm",{"_index":955,"title":{},"body":{"index.html":{}}}],["rockstar",{"_index":692,"title":{},"body":{"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rockstar.company",{"_index":693,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.company}).andwhere(\"recognition.emptoemployeeid",{"_index":717,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.employeeid",{"_index":695,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.employeeid}).andwhere(\"extract(month",{"_index":719,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.firstname",{"_index":697,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.ismanager",{"_index":701,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.lastname",{"_index":699,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.manager",{"_index":709,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.positiontitle",{"_index":703,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.role",{"_index":707,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rockstar.startdate",{"_index":705,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"classes/Users.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.employee",{"_index":465,"title":{},"body":{"guards/RolesGuard.html":{},"classes/Users.html":{}}}],["role.enum",{"_index":487,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":451,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/TagController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":464,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/TagController.html":{}}}],["roles.decorator",{"_index":489,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles/role.enum",{"_index":460,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/TagController.html":{},"classes/Users.html":{}}}],["roles/roles.guard",{"_index":461,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/TagController.html":{}}}],["roles_key",{"_index":488,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":447,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["rolesguard)@roles(role.admin)@delete(':id",{"_index":518,"title":{},"body":{"controllers/TagController.html":{}}}],["rolesguard)@roles(role.admin)@post('create",{"_index":515,"title":{},"body":{"controllers/TagController.html":{}}}],["root",{"_index":946,"title":{},"body":{"index.html":{}}}],["rows",{"_index":780,"title":{},"body":{"classes/Users.html":{}}}],["run",{"_index":970,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":768,"title":{},"body":{"classes/Users.html":{}}}],["scalable",{"_index":933,"title":{},"body":{"index.html":{}}}],["sdocumentation",{"_index":993,"title":{},"body":{"index.html":{}}}],["secret",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":265,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":669,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["server",{"_index":934,"title":{},"body":{"index.html":{}}}],["sessions",{"_index":1014,"title":{},"body":{"index.html":{}}}],["set",{"_index":417,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["setmetadata(roles_key",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":950,"title":{},"body":{"index.html":{}}}],["side",{"_index":935,"title":{},"body":{"index.html":{}}}],["sign",{"_index":412,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["signoptions",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["software",{"_index":941,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spec",{"_index":1064,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["spec.json",{"_index":1062,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["specific",{"_index":997,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":1032,"title":{},"body":{"index.html":{}}}],["spring",{"_index":943,"title":{},"body":{"index.html":{}}}],["sql",{"_index":663,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["src/.../constants.ts",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":925,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":921,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:18",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:6",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":880,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":245,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":250,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":254,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":252,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":271,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":273,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":277,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":275,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/company/company.controller.ts",{"_index":191,"title":{},"body":{"controllers/CompanyController.html":{},"coverage.html":{}}}],["src/company/company.controller.ts:10",{"_index":195,"title":{},"body":{"controllers/CompanyController.html":{}}}],["src/company/company.module",{"_index":857,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/company/company.module.ts",{"_index":209,"title":{},"body":{"modules/CompanyModule.html":{}}}],["src/company/company.service.ts",{"_index":212,"title":{},"body":{"injectables/CompanyService.html":{},"coverage.html":{}}}],["src/company/company.service.ts:17",{"_index":217,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/company/company.service.ts:8",{"_index":215,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/entity/company.entity",{"_index":350,"title":{},"body":{"modules/RecognitionModule.html":{},"modules/TagModule.html":{}}}],["src/entity/company.entity.ts",{"_index":158,"title":{},"body":{"classes/Company.html":{},"coverage.html":{}}}],["src/entity/company.entity.ts:12",{"_index":167,"title":{},"body":{"classes/Company.html":{}}}],["src/entity/company.entity.ts:16",{"_index":174,"title":{},"body":{"classes/Company.html":{}}}],["src/entity/company.entity.ts:19",{"_index":171,"title":{},"body":{"classes/Company.html":{}}}],["src/entity/company.entity.ts:22",{"_index":175,"title":{},"body":{"classes/Company.html":{}}}],["src/entity/company.entity.ts:9",{"_index":165,"title":{},"body":{"classes/Company.html":{}}}],["src/entity/login.entity.ts",{"_index":282,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/entity/login.entity.ts:10",{"_index":287,"title":{},"body":{"classes/Login.html":{}}}],["src/entity/login.entity.ts:14",{"_index":286,"title":{},"body":{"classes/Login.html":{}}}],["src/entity/login.entity.ts:7",{"_index":284,"title":{},"body":{"classes/Login.html":{}}}],["src/entity/recognition.entity.ts",{"_index":289,"title":{},"body":{"classes/Recognition.html":{},"coverage.html":{}}}],["src/entity/recognition.entity.ts:10",{"_index":303,"title":{},"body":{"classes/Recognition.html":{}}}],["src/entity/recognition.entity.ts:13",{"_index":295,"title":{},"body":{"classes/Recognition.html":{}}}],["src/entity/recognition.entity.ts:16",{"_index":301,"title":{},"body":{"classes/Recognition.html":{}}}],["src/entity/recognition.entity.ts:20",{"_index":296,"title":{},"body":{"classes/Recognition.html":{}}}],["src/entity/recognition.entity.ts:24",{"_index":297,"title":{},"body":{"classes/Recognition.html":{}}}],["src/entity/recognition.entity.ts:28",{"_index":306,"title":{},"body":{"classes/Recognition.html":{}}}],["src/entity/recognition.entity.ts:31",{"_index":298,"title":{},"body":{"classes/Recognition.html":{}}}],["src/entity/tag.entity",{"_index":349,"title":{},"body":{"modules/RecognitionModule.html":{},"modules/TagModule.html":{}}}],["src/entity/tag.entity.ts",{"_index":498,"title":{},"body":{"classes/Tag.html":{},"coverage.html":{}}}],["src/entity/tag.entity.ts:12",{"_index":506,"title":{},"body":{"classes/Tag.html":{}}}],["src/entity/tag.entity.ts:16",{"_index":502,"title":{},"body":{"classes/Tag.html":{}}}],["src/entity/tag.entity.ts:19",{"_index":503,"title":{},"body":{"classes/Tag.html":{}}}],["src/entity/tag.entity.ts:22",{"_index":505,"title":{},"body":{"classes/Tag.html":{}}}],["src/entity/tag.entity.ts:9",{"_index":504,"title":{},"body":{"classes/Tag.html":{}}}],["src/entity/tagstats.entity",{"_index":352,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["src/entity/tagstats.entity.ts",{"_index":565,"title":{},"body":{"classes/TagStats.html":{},"coverage.html":{}}}],["src/entity/tagstats.entity.ts:12",{"_index":570,"title":{},"body":{"classes/TagStats.html":{}}}],["src/entity/tagstats.entity.ts:15",{"_index":571,"title":{},"body":{"classes/TagStats.html":{}}}],["src/entity/tagstats.entity.ts:18",{"_index":568,"title":{},"body":{"classes/TagStats.html":{}}}],["src/entity/tagstats.entity.ts:21",{"_index":569,"title":{},"body":{"classes/TagStats.html":{}}}],["src/entity/tagstats.entity.ts:9",{"_index":572,"title":{},"body":{"classes/TagStats.html":{}}}],["src/entity/users.entity",{"_index":348,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["src/entity/users.entity.ts",{"_index":727,"title":{},"body":{"classes/Users.html":{},"coverage.html":{}}}],["src/entity/users.entity.ts:14",{"_index":739,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:19",{"_index":740,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:22",{"_index":741,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:25",{"_index":742,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:28",{"_index":744,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:31",{"_index":752,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:34",{"_index":743,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:40",{"_index":758,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:43",{"_index":759,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:47",{"_index":749,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:50",{"_index":747,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:53",{"_index":754,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:56",{"_index":753,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:59",{"_index":750,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:62",{"_index":751,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:66",{"_index":746,"title":{},"body":{"classes/Users.html":{}}}],["src/entity/users.entity.ts:69",{"_index":760,"title":{},"body":{"classes/Users.html":{}}}],["src/main.ts",{"_index":886,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/recognition/dto/create",{"_index":234,"title":{},"body":{"classes/CreateRecDto.html":{},"coverage.html":{}}}],["src/recognition/recognition.controller.ts",{"_index":321,"title":{},"body":{"controllers/RecognitionController.html":{},"coverage.html":{}}}],["src/recognition/recognition.controller.ts:10",{"_index":330,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["src/recognition/recognition.controller.ts:14",{"_index":324,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["src/recognition/recognition.controller.ts:18",{"_index":327,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["src/recognition/recognition.module.ts",{"_index":346,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["src/recognition/recognition.service.ts",{"_index":354,"title":{},"body":{"injectables/RecognitionService.html":{},"coverage.html":{}}}],["src/recognition/recognition.service.ts:14",{"_index":362,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["src/recognition/recognition.service.ts:29",{"_index":373,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["src/recognition/recognition.service.ts:33",{"_index":370,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["src/recognition/recognition.service.ts:56",{"_index":372,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["src/recognition/recognition.service.ts:74",{"_index":367,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["src/roles/role.enum.ts",{"_index":922,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/roles/roles.decorator",{"_index":458,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/TagController.html":{}}}],["src/roles/roles.decorator.ts",{"_index":888,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/roles.guard.ts",{"_index":449,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/roles/roles.guard.ts:27",{"_index":471,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles/roles.guard.ts:35",{"_index":474,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/tag/tag.controller.ts",{"_index":511,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["src/tag/tag.controller.ts:17",{"_index":522,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.controller.ts:24",{"_index":519,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.controller.ts:31",{"_index":516,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.module.ts",{"_index":537,"title":{},"body":{"modules/TagModule.html":{}}}],["src/tag/tag.service.ts",{"_index":540,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["src/tag/tag.service.ts:16",{"_index":550,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:20",{"_index":546,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:28",{"_index":548,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:8",{"_index":544,"title":{},"body":{"injectables/TagService.html":{}}}],["src/users/users.controller.ts",{"_index":782,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:13",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:19",{"_index":816,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:25",{"_index":820,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:30",{"_index":822,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:35",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":812,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":795,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:52",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":809,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:65",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":855,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":579,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:118",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:133",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:141",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:188",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:205",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:49",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:62",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":971,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":974,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":976,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":735,"title":{},"body":{"classes/Users.html":{}}}],["started",{"_index":927,"title":{"index.html":{}},"body":{}}],["stat",{"_index":414,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["statements",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["stats",{"_index":438,"title":{},"body":{"injectables/RecognitionService.html":{},"classes/Tag.html":{}}}],["stats.tag",{"_index":509,"title":{},"body":{"classes/Tag.html":{}}}],["status",{"_index":641,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["stop",{"_index":951,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":256,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"classes/CreateRecDto.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/Tag.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1019,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":561,"title":{},"body":{"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["svg",{"_index":1041,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":915,"title":{"additional-documentation/swagger-api-docs.html":{}},"body":{"dependencies.html":{},"index.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["swaggeruibundle",{"_index":1060,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["swaggeruibundle.plugins.downloadurl",{"_index":1071,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["swaggeruibundle.presets.apis",{"_index":1068,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["swaggeruibundle.swaggeruistandalonepreset",{"_index":1069,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["t1",{"_index":681,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["t1.\"emptoemployeeid",{"_index":670,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["t2",{"_index":682,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["t2.\"emptoemployeeid",{"_index":683,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["table",{"_index":229,"title":{},"body":{"injectables/CompanyService.html":{},"classes/Users.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":172,"title":{"classes/Tag.html":{}},"body":{"classes/Company.html":{},"injectables/CompanyService.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"coverage.html":{}}}],["tag.company",{"_index":553,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.company.companyid",{"_index":558,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.controller",{"_index":538,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.entity",{"_index":180,"title":{},"body":{"classes/Company.html":{},"classes/Recognition.html":{},"classes/TagStats.html":{}}}],["tag.service",{"_index":524,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag.tagid",{"_index":560,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.value",{"_index":554,"title":{},"body":{"injectables/TagService.html":{}}}],["tag/tag.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["tag=>tag.company",{"_index":185,"title":{},"body":{"classes/Company.html":{}}}],["tag=>tag.rec",{"_index":319,"title":{},"body":{"classes/Recognition.html":{}}}],["tagarr",{"_index":404,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["tagarr.push(tag.tagid",{"_index":406,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["tagcontroller",{"_index":510,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagdata",{"_index":514,"title":{},"body":{"controllers/TagController.html":{}}}],["tagdata.value",{"_index":533,"title":{},"body":{"controllers/TagController.html":{}}}],["tagid",{"_index":499,"title":{},"body":{"classes/Tag.html":{},"injectables/TagService.html":{}}}],["tagmodule",{"_index":52,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":359,"title":{},"body":{"injectables/RecognitionService.html":{},"injectables/TagService.html":{}}}],["tags",{"_index":161,"title":{},"body":{"classes/Company.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"classes/Recognition.html":{},"injectables/RecognitionService.html":{},"controllers/TagController.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["tagservice",{"_index":523,"title":{"injectables/TagService.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["tagstatid",{"_index":566,"title":{},"body":{"classes/TagStats.html":{}}}],["tagstats",{"_index":351,"title":{"classes/TagStats.html":{}},"body":{"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"classes/Tag.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tagstats.employee",{"_index":781,"title":{},"body":{"classes/Users.html":{}}}],["tagstats.entity",{"_index":507,"title":{},"body":{"classes/Tag.html":{},"classes/Users.html":{}}}],["tagstats.tag",{"_index":652,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["tagstatsrepo",{"_index":361,"title":{},"body":{"injectables/RecognitionService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["takes",{"_index":664,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["test",{"_index":979,"title":{},"body":{"index.html":{}}}],["test:covautomated",{"_index":982,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":981,"title":{},"body":{"index.html":{}}}],["tests",{"_index":978,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1031,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":280,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.changeuserstats(recdto",{"_index":410,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.companyrepository.findone({where:{companyid",{"_index":391,"title":{},"body":{"injectables/RecognitionService.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.companyrepository.save(company",{"_index":232,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companyservice.createcompany",{"_index":621,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.companyservice.createcompany(createcompanydto",{"_index":205,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.getrockstar(comp_id",{"_index":846,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.jwtservice.sign(payload",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loginrepo.delete({employee",{"_index":614,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.loginrepo.findone",{"_index":596,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.loginrepo.save(login",{"_index":650,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.recognitionrepository.createquerybuilder().select(\"*\").innerjoin(\"recognition_tags_tag\",\"test\",\"test.recognitionrecid",{"_index":725,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.recognitionrepository.createquerybuilder().select(\"*\").where(\"recognition.emptocompanyid",{"_index":715,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.recognitionrepository.query(querystring",{"_index":686,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.recognitionsrepository.delete({recid:id",{"_index":411,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.recognitionsrepository.find",{"_index":385,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.recognitionsrepository.findone",{"_index":402,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.recs.createrec(createrecdto",{"_index":340,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["this.recs.deleterec(id",{"_index":342,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["this.recs.findall",{"_index":338,"title":{},"body":{"controllers/RecognitionController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":492,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.tagrepository.delete({tagid",{"_index":559,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.find({where:{company",{"_index":552,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.findoneorfail({relations",{"_index":556,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(tag",{"_index":555,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tags.createtag(req.user.companyid",{"_index":532,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tags.deletetag(req.user.companyid",{"_index":530,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tags.getcompanytags(req.user.companyid",{"_index":527,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagstatsrepo.createquerybuilder",{"_index":434,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.userrepository.createquerybuilder",{"_index":415,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.userrepository.findone",{"_index":424,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.userrepository.findone({where",{"_index":426,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.userrepository.findone({where:{employeeid",{"_index":394,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["this.usersrepository.delete(user",{"_index":615,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.find({companyid",{"_index":611,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":603,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone({where:{companyid",{"_index":640,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone({where:{employeeid",{"_index":710,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(manager",{"_index":643,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":649,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":835,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createusermultiple(employeemultiple",{"_index":840,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getarrayofusers(company_id",{"_index":829,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getprofile(employee_id",{"_index":826,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getprofile(req.user.employeeid",{"_index":466,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getrockstar(companyid",{"_index":843,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getrockstarrecogs(rockstar",{"_index":850,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getrockstarstats(rockstar",{"_index":847,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.loginuser(username",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.removeuser(employeeid",{"_index":832,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.userstats(employeeid",{"_index":838,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":281,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["true",{"_index":482,"title":{},"body":{"guards/RolesGuard.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["true})@joincolumn({name",{"_index":737,"title":{},"body":{"classes/Users.html":{}}}],["tsconfig.json",{"_index":992,"title":{},"body":{"index.html":{}}}],["type",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateRecDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"controllers/RecognitionController.html":{},"injectables/RecognitionService.html":{},"guards/RolesGuard.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":179,"title":{},"body":{"classes/Company.html":{},"injectables/CompanyService.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"injectables/RecognitionService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeorm/driver/query",{"_index":584,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["typeormmodule",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":353,"title":{},"body":{"modules/RecognitionModule.html":{}}}],["typeormmodule.forfeature([company",{"_index":211,"title":{},"body":{"modules/CompanyModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":539,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":858,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":916,"title":{},"body":{"dependencies.html":{},"additional-documentation/swagger-api-docs.html":{}}}],["unauthorizedexception",{"_index":278,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/TagController.html":{}}}],["undefined",{"_index":170,"title":{},"body":{"classes/Company.html":{},"classes/Recognition.html":{},"injectables/RecognitionService.html":{},"classes/Tag.html":{},"injectables/TagService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["undefined)@joincolumn",{"_index":173,"title":{},"body":{"classes/Company.html":{},"classes/Recognition.html":{}}}],["undefined)@jointable",{"_index":305,"title":{},"body":{"classes/Recognition.html":{}}}],["unique",{"_index":574,"title":{},"body":{"classes/TagStats.html":{},"classes/Users.html":{}}}],["unit",{"_index":977,"title":{},"body":{"index.html":{}}}],["update",{"_index":416,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["upinstall",{"_index":965,"title":{},"body":{"index.html":{}}}],["url",{"_index":1061,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["used",{"_index":1024,"title":{},"body":{"index.html":{}}}],["useful",{"_index":1001,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":521,"title":{},"body":{"controllers/TagController.html":{}}}],["useguards(jwtauthguard)@get(':employ_id/company/:comp_id",{"_index":815,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('company/:comp_id",{"_index":819,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('company/rockstar/:comp_id",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('company/rockstar/recognitions/:comp_id",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('company/rockstar/stats/:comp_id",{"_index":808,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('stats/:employeeid/company/:companyid",{"_index":811,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"classes/Company.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TagService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.company",{"_index":189,"title":{},"body":{"classes/Company.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.companyid",{"_index":626,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.employee.companyid",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.employee.employeeid",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.employee.role",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.employeeid",{"_index":624,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":627,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.ismanager",{"_index":631,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.lastname",{"_index":629,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.manager",{"_index":638,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.numrecsreceived",{"_index":654,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.numrecssent",{"_index":653,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.positiontitle",{"_index":633,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.role",{"_index":497,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.startdate",{"_index":635,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.tagstats",{"_index":655,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["userfrom",{"_index":423,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["userid",{"_index":601,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["userrepository",{"_index":363,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["users",{"_index":162,"title":{"classes/Users.html":{}},"body":{"classes/Company.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"modules/RecognitionModule.html":{},"injectables/RecognitionService.html":{},"classes/TagStats.html":{},"interfaces/UserStats.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.\"employeeid",{"_index":684,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":856,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":182,"title":{},"body":{"classes/Company.html":{},"classes/Login.html":{},"classes/Recognition.html":{},"classes/TagStats.html":{}}}],["users.service",{"_index":459,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["users=>users.recsreceived",{"_index":317,"title":{},"body":{"classes/Recognition.html":{}}}],["users=>users.recssent",{"_index":316,"title":{},"body":{"classes/Recognition.html":{}}}],["users=>users.tagstats",{"_index":575,"title":{},"body":{"classes/TagStats.html":{}}}],["userscontroller",{"_index":463,"title":{"controllers/UsersController.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":53,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":585,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":125,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":577,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstats(employeeid",{"_index":651,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["userto",{"_index":425,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["using",{"_index":600,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["validate",{"_index":251,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":253,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":276,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":500,"title":{},"body":{"classes/Tag.html":{},"injectables/TagService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":436,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["variable",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1047,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifies",{"_index":476,"title":{},"body":{"guards/RolesGuard.html":{}}}],["verifying",{"_index":453,"title":{},"body":{"guards/RolesGuard.html":{}}}],["volume",{"_index":962,"title":{},"body":{"index.html":{}}}],["watch",{"_index":972,"title":{},"body":{"index.html":{}}}],["where(\"companyid",{"_index":419,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["where(\"employeecompanyid",{"_index":428,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["where('\"employeecompanyid",{"_index":440,"title":{},"body":{"injectables/RecognitionService.html":{}}}],["window.onload",{"_index":1056,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["window.ui",{"_index":1072,"title":{},"body":{"additional-documentation/swagger-api-docs.html":{}}}],["work",{"_index":609,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["world",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":563,"title":{},"body":{"injectables/TagService.html":{}}}],["year",{"_index":659,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["you'd",{"_index":1035,"title":{},"body":{"index.html":{}}}],["yr\",{yr:year}).getrawmany",{"_index":722,"title":{},"body":{"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["zoom",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/RecognitionModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get} from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  // constructor(private authService: AuthService) {}\n\n  // @UseGuards(LocalAuthGuard)\n  // @Post('auth/login')\n  // async login(@Request() req) {\n  //   return this.authService.login(req.user);\n  //   // return req.user;\n  // }\n\n  // @UseGuards(JwtAuthGuard)\n  // @Get('profile')\n  // getProfile(@Request() req) {\n  //   return req.user;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCompanyModule\n\nCompanyModule\n\nAppModule -->\n\nCompanyModule->AppModule\n\n\n\n\n\nRecognitionModule\n\nRecognitionModule\n\nAppModule -->\n\nRecognitionModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CompanyModule\n                        \n                        \n                            RecognitionModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CompanyModule } from './company/company.module';\nimport { RecognitionModule } from './recognition/recognition.module';\nimport { TagModule } from './tag/tag.module';\n\n@Module({\n  imports: [AuthModule, UsersModule, RecognitionModule, CompanyModule, TagModule, TypeOrmModule.forRoot()],\n  controllers: [AppController],\n  providers: [AppService],\n\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get} from '@nestjs/common';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport { AuthService } from './auth.service';\n\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n    @UseGuards(LocalAuthGuard)\n    @Post('login')\n    async login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './jwt.strategy';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    UsersModule, \n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '3600s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n    constructor(private usersService: UsersService, private jwtService: JwtService) {}\n\n    async validateUser(username: string, pass: string): Promise {\n        const user = await this.usersService.loginUser(username);\n        if (user && user.password === pass) {\n            const { password, ...result} = user;\n            return result;\n        }\n        return null;\n    }\n\n    async login(user: any) {\n        const payload = { username: user.email, sub: { employeeId: user.employee.employeeId, companyId: user.employee.companyId, role: user.employee.role } };\n        return {\n            access_token: this.jwtService.sign(payload),\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Company.html":{"url":"classes/Company.html","title":"class - Company","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Company\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/company.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                companyId\n                            \n                            \n                                name\n                            \n                            \n                                recognitions\n                            \n                            \n                                tags\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            companyId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/company.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/company.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recognitions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/company.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tag[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/company.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/company.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, OneToMany, JoinColumn } from 'typeorm';\nimport { Tag } from \"./tag.entity\";\nimport { Recognition } from \"./recognition.entity\";\nimport { Users } from './users.entity';\n\n@Entity({name: \"company\"})\nexport class Company {\n    @PrimaryColumn()\n    companyId: number;\n\n    @Column()\n    name: string;\n\n    @OneToMany(()=>Tag, tag=>tag.company)\n    @JoinColumn()\n    tags: Tag[];\n\n    @OneToMany(()=>Recognition, rec=>rec.company)\n    recognitions: Recognition[];\n\n    @OneToMany(()=>Users, user => user.company)\n    users: Users[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CompanyController.html":{"url":"controllers/CompanyController.html","title":"controller - CompanyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CompanyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/company/company.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                company\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCompany(createcompanyDto: Company)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/company/company.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createcompanyDto\n                                    \n                                                Company\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, Get, Delete, Param, Body } from '@nestjs/common';\nimport { Company } from '../entity/company.entity';\nimport { CompanyService } from './company.service';\n\n@Controller('company')\nexport class CompanyController {\n    constructor (private companyService: CompanyService) {}\n\n    @Post('create')\n    async createCompany(@Body() createcompanyDto: Company) {\n        return await this.companyService.createCompany(createcompanyDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CompanyModule.html":{"url":"modules/CompanyModule.html","title":"module - CompanyModule","body":"\n                   \n\n\n\n\n    Modules\n    CompanyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CompanyModule\n\n\n\ncluster_CompanyModule_exports\n\n\n\ncluster_CompanyModule_providers\n\n\n\n\nCompanyService \n\nCompanyService \n\n\n\nCompanyModule\n\nCompanyModule\n\nCompanyService  -->\n\nCompanyModule->CompanyService \n\n\n\n\n\nCompanyService\n\nCompanyService\n\nCompanyModule -->\n\nCompanyService->CompanyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/company/company.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CompanyService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CompanyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CompanyService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CompanyService } from './company.service';\nimport { CompanyController } from './company.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Company } from '../entity/company.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Company])],\n  providers: [CompanyService],\n  controllers: [CompanyController],\n  exports: [CompanyService],\n})\nexport class CompanyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CompanyService.html":{"url":"injectables/CompanyService.html","title":"injectable - CompanyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CompanyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/company/company.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(companyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/company/company.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCompany(createcompanyDto: Company)\n                \n            \n\n\n            \n                \n                    Defined in src/company/company.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createcompanyDto\n                                    \n                                                Company\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Company } from '../entity/company.entity';\n\n\n@Injectable()\nexport class CompanyService {\n\n    constructor(\n        @InjectRepository(Company)\n        private companyRepository: Repository,\n\n        \n    ){}\n    \n    async createCompany(createcompanyDto: Company): Promise {\n        const company = new Company();\n\n        company.companyId = createcompanyDto.companyId;\n        company.name = createcompanyDto.name;\n        \n        company.recognitions = createcompanyDto.recognitions;\n        //Will need to create tags in the tag table.\n        company.tags = createcompanyDto.tags;\n\n        await this.companyRepository.save(company);\n        return company;\n    }\n} \n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRecDto.html":{"url":"classes/CreateRecDto.html","title":"class - CreateRecDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRecDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recognition/dto/create-rec.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                company\n                            \n                            \n                                    Readonly\n                                employeeFrom\n                            \n                            \n                                    Readonly\n                                employeeTo\n                            \n                            \n                                    Readonly\n                                msg\n                            \n                            \n                                    Readonly\n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            company\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/recognition/dto/create-rec.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            employeeFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/recognition/dto/create-rec.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            employeeTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/recognition/dto/create-rec.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            msg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/recognition/dto/create-rec.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/recognition/dto/create-rec.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateRecDto{\n    readonly company: number;\n    readonly employeeFrom: number;\n    readonly employeeTo: number;\n    readonly msg: string;\n    readonly tags: number[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.secret,\n        });\n    }\n\n    async validate(payload: any) {\n        return { employeeId: payload.sub.employeeId, role: payload.sub.role, companyId: payload.sub.companyId, email: payload.username };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthService) {\n        super();\n    }\n\n    async validate(username: string, password:string): Promise {\n        const user = await this.authService.validateUser(username, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/login.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                employee\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/login.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/login.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/login.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { Users } from \"./users.entity\";\n\n@Entity({name: \"login\"})\nexport class Login {\n    @PrimaryColumn()\n    email: string;\n\n    @Column()\n    password: string;\n\n    @OneToOne(() => Users)\n    @JoinColumn()\n    employee: Users;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Recognition.html":{"url":"classes/Recognition.html","title":"class - Recognition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Recognition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/recognition.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                company\n                            \n                            \n                                empFrom\n                            \n                            \n                                empTo\n                            \n                            \n                                msg\n                            \n                            \n                                postDate\n                            \n                            \n                                recId\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            company\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Company\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/recognition.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            empFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/recognition.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            empTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/recognition.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            msg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/recognition.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            postDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('timestamp')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/recognition.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/recognition.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tag[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/recognition.entity.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, JoinColumn, JoinTable, ManyToOne, Index, ManyToMany } from 'typeorm';\nimport { Company } from \"./company.entity\";\nimport { Users } from \"./users.entity\";\nimport { Tag } from \"./tag.entity\";\n\n@Entity({name: \"recognition\"})\n@Index([\"company\", \"postDate\"])\nexport class Recognition {\n    @PrimaryGeneratedColumn(\"increment\")\n    recId: number;\n\n    @ManyToOne(()=> Company, company=>company.recognitions)\n    company: Company;\n\n    @Column(\"timestamp\")\n    postDate: Date;\n\n    @ManyToOne(()=> Users, users=>users.recsSent)\n    @JoinColumn()\n    empFrom: Users;\n\n    @ManyToOne(()=> Users, users=>users.recsReceived)\n    @JoinColumn()\n    empTo: Users;\n\n    @ManyToMany(()=>Tag, tag=>tag.rec)\n    @JoinTable()\n    tags: Tag[];\n\n    @Column()\n    msg: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecognitionController.html":{"url":"controllers/RecognitionController.html","title":"controller - RecognitionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecognitionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recognition/recognition.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                recognitions\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createRecDto: CreateRecDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/recognition/recognition.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRecDto\n                                    \n                                                CreateRecDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/recognition/recognition.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')\n                \n            \n\n            \n                \n                    Defined in src/recognition/recognition.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Delete, Body, Param} from '@nestjs/common';\nimport {CreateRecDto} from './dto/create-rec.dto'\nimport {RecognitionService} from './recognition.service'\nimport {Recognition} from '../entity/recognition.entity';\n\n@Controller('recognitions')\nexport class RecognitionController {\n    constructor(private recs: RecognitionService){}\n    @Get('all')\n    findAll(): Promise{\n        return this.recs.findAll();\n    }\n    @Post('create')\n        create(@Body() createRecDto: CreateRecDto): Promise{\n            return this.recs.createRec(createRecDto);\n        }\n    @Delete(':id')\n        delete(@Param('id') id){\n            return this.recs.deleteRec(id);\n        }\n\n\n\n\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecognitionModule.html":{"url":"modules/RecognitionModule.html","title":"module - RecognitionModule","body":"\n                   \n\n\n\n\n    Modules\n    RecognitionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecognitionModule\n\n\n\ncluster_RecognitionModule_providers\n\n\n\ncluster_RecognitionModule_exports\n\n\n\n\nRecognitionService \n\nRecognitionService \n\n\n\nRecognitionModule\n\nRecognitionModule\n\nRecognitionService  -->\n\nRecognitionModule->RecognitionService \n\n\n\n\n\nRecognitionService\n\nRecognitionService\n\nRecognitionModule -->\n\nRecognitionService->RecognitionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recognition/recognition.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecognitionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecognitionController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecognitionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RecognitionController } from './recognition.controller';\nimport { RecognitionService } from './recognition.service';\nimport {Recognition} from '../entity/recognition.entity'\nimport { Users } from 'src/entity/users.entity';\nimport { Tag } from 'src/entity/tag.entity';\nimport { Company } from 'src/entity/company.entity';\nimport { TagStats } from 'src/entity/tagstats.entity';\n@Module({\n  imports: [ TypeOrmModule.forFeature([ Recognition, Users, Tag, Company, TagStats])],\n  providers: [RecognitionService],\n  controllers: [ RecognitionController],\n  exports: [RecognitionService]\n})\nexport class RecognitionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecognitionService.html":{"url":"injectables/RecognitionService.html","title":"injectable - RecognitionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RecognitionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recognition/recognition.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                changeUserStats\n                            \n                            \n                                    Async\n                                createRec\n                            \n                            \n                                    Async\n                                deleteRec\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, companyRepository: Repository, tagRepository: Repository, recognitionsRepository: Repository, tagStatsRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/recognition/recognition.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recognitionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagStatsRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            changeUserStats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUserStats(recDto: CreateRecDto, increment: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/recognition/recognition.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recDto\n                                    \n                                                CreateRecDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    increment\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createRec\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createRec(recDto: CreateRecDto)\n                \n            \n\n\n            \n                \n                    Defined in src/recognition/recognition.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recDto\n                                    \n                                                CreateRecDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteRec\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteRec(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/recognition/recognition.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/recognition/recognition.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DeleteResult, getConnection, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Recognition } from '../entity/recognition.entity';\nimport { Company } from '../entity/company.entity';\nimport { Users } from '../entity/users.entity';\nimport { Tag } from '../entity/tag.entity';\nimport { TagStats } from '../entity/tagstats.entity';\nimport { CreateRecDto } from './dto/create-rec.dto';\nimport { reverse } from 'node:dns';\n\n\n@Injectable()\nexport class RecognitionService {\n    constructor(\n        @InjectRepository(Users)\n        private userRepository: Repository,\n        @InjectRepository(Company)\n        private companyRepository: Repository,\n        @InjectRepository(Tag)\n        private tagRepository: Repository, \n        @InjectRepository(Recognition)\n        private recognitionsRepository: Repository,\n        @InjectRepository(TagStats)\n        private tagStatsRepo: Repository\n    ){}\n\n    \n    async findAll(): Promise{\n        return this.recognitionsRepository.find();\n     }\n\n    async createRec(recDto: CreateRecDto): Promise {\n        const rec = new Recognition();\n        rec.msg = recDto.msg;\n        rec.postDate = new Date();\n        rec.company = await this.companyRepository.findOne({where:{companyId: recDto.company}});\n        rec.empFrom = await this.userRepository.findOne({where:{employeeId: recDto.employeeFrom, companyId: recDto.company}});\n        rec.empTo = await this.userRepository.findOne({where:{employeeId: recDto.employeeTo, companyId: recDto.company}});\n        rec.tags = [];\n        if(recDto.tags != undefined){\n            for(let i = 0; i  {\n        let rec = await this.recognitionsRepository.findOne({ relations: [\"empFrom\", \"empTo\", \"company\", \"tags\"], where: { recId: id } });\n        \n        let tagArr = [];\n        rec.tags.forEach(tag => {tagArr.push(tag.tagId)})\n        let recDto: CreateRecDto = {\n            company: rec.company.companyId,\n            employeeFrom: rec.empFrom.employeeId,\n            employeeTo: rec.empTo.employeeId,\n            msg: rec.msg,\n            tags: tagArr\n        }\n\n        await this.changeUserStats(recDto, false);\n\n        return await this.recognitionsRepository.delete({recId:id});\n    }\n\n    private async changeUserStats(recDto: CreateRecDto, increment: boolean) { \n        let sign = '-';\n        if (increment)\n            sign = '+';\n\n        //Increment numRecsSent stat\n        await this.userRepository.createQueryBuilder()\n            .update()\n            .set({\n                numRecsSent: () => `\"numRecsSent\" ${sign} 1`\n            })\n            .where(\"companyId = :company\", {company: recDto.company})\n            .andWhere(\"employeeId = :employee\", {employee: recDto.employeeFrom})\n            .execute();\n\n        //Increment numRecsReceived stat\n        await this.userRepository.createQueryBuilder()\n            .update()\n            .set({\n                numRecsReceived: () => `\"numRecsReceived\" ${sign} 1`\n            })\n            .where(\"companyId = :company\", {company: recDto.company})\n            .andWhere(\"employeeId = :employee\", {employee: recDto.employeeTo})\n            .execute();\n\n        \n        let userFrom = await this.userRepository.findOne({ where: {employeeId: recDto.employeeFrom, companyId: recDto.company}});\n        let userTo = await this.userRepository.findOne({where: {employeeId: recDto.employeeTo, companyId: recDto.company}})\n        for(let i = 0; i  `\"countSent\" ${sign} 1`,\n                        })\n                        .where(\"employeeCompanyId = :comp\", {comp: recDto.company})\n                        .andWhere(\"employeeEmployeeId = :emp\", { emp: recDto.employeeFrom })\n                        .andWhere(\"tagTagId = :tag\", {tag: recDto.tags[i]})\n                        .execute();\n                }\n                else if (increment){\n                    await this.tagStatsRepo.createQueryBuilder()\n                        .insert()\n                        .values([{\n                            countSent: 1,\n                            employee: userFrom,\n                            tag: currTag\n                        }])\n                        .execute();\n                }\n\n                //Employee to tag stats.\n                let findTo = await this.tagStatsRepo.createQueryBuilder()\n                        .where('\"employeeCompanyId\" = :comp', {comp: recDto.company})\n                        .andWhere('\"employeeEmployeeId\" = :emp', { emp: recDto.employeeTo })\n                        .andWhere('\"tagTagId\" = :tag', {tag: recDto.tags[i]})\n                        .getOne();\n                if (findTo != undefined) {\n                    let res = await this.tagStatsRepo.createQueryBuilder()\n                        .update()\n                        .set({\n                            countReceived: () => `\"countReceived\" ${sign} 1`,\n                        })\n                        .where(\"employeeCompanyId = :comp\", {comp: recDto.company})\n                        .andWhere(\"employeeEmployeeId = :emp\", { emp: recDto.employeeTo })\n                        .andWhere(\"tagTagId = :tag\", {tag: recDto.tags[i]})\n                        .execute();\n                }\n                else if (increment) {\n                    await this.tagStatsRepo.createQueryBuilder()\n                        .insert()\n                        .values([{\n                            countReceived: 1,\n                            employee: userTo,\n                            tag: currTag\n                        }])\n                        .execute();\n                }\n                \n            }\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/roles/roles.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Roles guard is responsible for verifying if a user should be allowed to access the endpoint.\n\n                \n\n\n\n                \n                Example\n                \n                \n                            \n                                ```\n  import { Roles } from 'src/roles/roles.decorator';\n  import { JwtAuthGuard } from '../auth/jwt-auth.guard';\n  import { UsersService } from './users.service';\n  import { Role } from '../roles/role.enum';\n  import { RolesGuard } from '../roles/roles.guard';\n  @Controller('users')\n  export class UsersController {\n      constructor (private usersService: UsersService) {}\n      @UseGuards(JwtAuthGuard, RolesGuard)\n      @Roles(Role.Admin, Role.Employee)\n      @Get('profile')\n      getProfile(@Request() req) {\n          return this.usersService.getProfile(req.user.employeeId, req.user.companyId);\n      }\n  }```\n                            \n                \n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.guard.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.guard.ts:35\n                \n            \n\n\n            \n                \n                    This method verifies the user role.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        This parameter is passed automatically by nest.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if user role matches the restriction, false otherwise.\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from './role.enum';\nimport { ROLES_KEY } from './roles.decorator';\n\n/**\n * Roles guard is responsible for verifying if a user should be allowed to access the endpoint.\n * \n * @example```\n  import { Roles } from 'src/roles/roles.decorator';\n  import { JwtAuthGuard } from '../auth/jwt-auth.guard';\n  import { UsersService } from './users.service';\n  import { Role } from '../roles/role.enum';\n  import { RolesGuard } from '../roles/roles.guard';\n  @Controller('users')\n  export class UsersController {\n      constructor (private usersService: UsersService) {}\n      @UseGuards(JwtAuthGuard, RolesGuard)\n      @Roles(Role.Admin, Role.Employee)\n      @Get('profile')\n      getProfile(@Request() req) {\n          return this.usersService.getProfile(req.user.employeeId, req.user.companyId);\n      }\n  }```\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor (private reflector: Reflector) {}\n\n    /**\n     * This method verifies the user role.\n     * @param context This parameter is passed automatically by nest.\n     * @returns True if user role matches the restriction, false otherwise.\n     */\n    canActivate(context: ExecutionContext): boolean {\n        const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n            context.getHandler(), \n            context.getClass(),\n        ]);\n\n        if (!requiredRoles) {\n            return true;\n        }\n\n        const { user } = context.switchToHttp().getRequest();\n        return requiredRoles.some((role) => user.role === role);\n    }\n}\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/tag.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                company\n                            \n                            \n                                rec\n                            \n                            \n                                tagId\n                            \n                            \n                                tagstats\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            company\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Company\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index()@ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tag.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rec\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tag.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tagId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tag.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tagstats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TagStats[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tag.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tag.entity.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, ManyToMany, Index, PrimaryColumn, OneToMany } from 'typeorm';\nimport { Company } from './company.entity';\nimport { Recognition } from './recognition.entity';\nimport { TagStats } from './tagstats.entity';\n\n@Entity({name: \"tag\"})\nexport class Tag {\n    @PrimaryGeneratedColumn(\"increment\")\n    tagId: number;\n\n    @Column()\n    value: string\n\n    @Index()\n    @ManyToOne(()=> Company, company=>company.tags)\n    company: Company;\n\n    @ManyToMany(()=> Recognition, rec=> rec.tags)\n    rec: Recognition;\n\n    @OneToMany(() => TagStats, stats => stats.tag)\n    tagstats: TagStats[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tag\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getCompanyTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(req, tagData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/tag/tag.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tagData\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(req, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Admin)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tag/tag.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCompanyTags\n                        \n                        \n                    \n                \n            \n            \n                \ngetCompanyTags(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/tag/tag.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Delete, Body, Param, UseGuards, Request, UnauthorizedException} from '@nestjs/common';\nimport {TagService} from './tag.service'\nimport {Tag} from '../entity/tag.entity';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { Role } from '../roles/role.enum';\nimport { RolesGuard } from '../roles/roles.guard';\nimport { Roles } from 'src/roles/roles.decorator';\nimport { DeleteResult } from 'typeorm';\n\n\n@Controller('tag')\nexport class TagController {\n    constructor(private tags: TagService){}\n\n    @UseGuards(JwtAuthGuard)\n    @Get()\n    getCompanyTags(@Request() req): Promise{\n        return this.tags.getCompanyTags(req.user.companyId);\n    }\n\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.Admin)\n    @Delete(':id')\n    delete(@Request() req, @Param('id') id: number): Promise{\n        return this.tags.deleteTag(req.user.companyId, id);\n    }\n\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.Admin)\n    @Post('create')\n    create(@Request() req, @Body() tagData): Promise{\n        return this.tags.createTag(req.user.companyId, tagData.value);\n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagModule\n\n\n\ncluster_TagModule_exports\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService \n\nTagService \n\n\n\nTagModule\n\nTagModule\n\nTagService  -->\n\nTagModule->TagService \n\n\n\n\n\nTagService\n\nTagService\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tag/tag.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagController } from './tag.controller';\nimport { TagService } from './tag.service';\nimport { Tag } from 'src/entity/tag.entity';\nimport { Company } from 'src/entity/company.entity';\n@Module({\n  imports: [ TypeOrmModule.forFeature([Tag, Company])],\n  providers: [TagService],\n  controllers: [ TagController],\n  exports: [TagService]\n})\nexport class TagModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                deleteTag\n                            \n                            \n                                    Async\n                                getCompanyTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, companyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tag/tag.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(companyId: number, value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tag/tag.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTag(companyId: number, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tag/tag.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCompanyTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompanyTags(companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tag/tag.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DeleteResult, getRepository, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {Tag} from '../entity/tag.entity'\nimport {Company} from '../entity/company.entity'\n\n@Injectable()\nexport class TagService {\n    constructor(\n        @InjectRepository(Tag)\n        private tagRepository: Repository, \n        @InjectRepository(Company)\n        private companyRepository: Repository\n    ){}\n\n    async getCompanyTags(companyId: number): Promise{\n        return this.tagRepository.find({where:{company: companyId}})\n    }\n\n    async createTag(companyId: number, value: string): Promise {\n        const tag = new Tag();\n        tag.company = await this.companyRepository.findOne({where:{companyId : companyId}});\n        tag.value = value;\n        this.tagRepository.save(tag);\n        return tag\n     }\n\n    async deleteTag(companyId: number, id: number): Promise {\n        const tag = await this.tagRepository.findOneOrFail({relations: [\"company\"], where: {tagId: id}});\n\n        if(tag != undefined && tag.company.companyId == companyId) {\n            return this.tagRepository.delete({tagId: tag.tagId});\n        }\n        return null;    //not sure what to return for failure, either this user is in the wrong company or the tag does not exist\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagStats.html":{"url":"classes/TagStats.html","title":"class - TagStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/tagstats.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                countReceived\n                            \n                            \n                                countSent\n                            \n                            \n                                employee\n                            \n                            \n                                tag\n                            \n                            \n                                tagstatId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countReceived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tagstats.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countSent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tagstats.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tagstats.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tag\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tag\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tagstats.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tagstatId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/tagstats.entity.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, PrimaryGeneratedColumn, PrimaryColumn, Index } from 'typeorm';\nimport { Users } from './users.entity';\nimport { Tag } from './tag.entity';\n\n@Entity({name: \"tagstats\"})\n@Index([\"employee\", \"tag\"], {unique: true})\nexport class TagStats {\n    @PrimaryGeneratedColumn('increment')\n    tagstatId: number;\n    \n    @ManyToOne(() => Users, users=>users.tagStats)\n    employee: Users;\n\n    @ManyToOne(() => Tag)\n    tag: Tag;\n\n    @Column({default: 0})\n    countReceived: number;\n\n    @Column({default: 0})\n    countSent: number;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        numRecsReceived\n                                \n                                \n                                        numRecsSent\n                                \n                                \n                                        tagStats\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        numRecsReceived\n                                    \n                                \n                                \n                                    \n                                        numRecsReceived:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numRecsSent\n                                    \n                                \n                                \n                                    \n                                        numRecsSent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagStats\n                                    \n                                \n                                \n                                    \n                                        tagStats:     TagStats[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TagStats[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, QueryBuilder, Repository } from 'typeorm';\nimport { Users } from '../entity/users.entity';\nimport { Login } from '../entity/login.entity';\nimport { Company } from '../entity/company.entity';\nimport { TagStats } from '../entity/tagstats.entity';\nimport { CompanyService } from '../company/company.service';\nimport { Recognition } from '../entity/recognition.entity';\nimport { Query } from 'typeorm/driver/Query';\n\n\nexport interface UserStats {\n    numRecsReceived: number,\n    numRecsSent: number,\n    tagStats: TagStats[]\n}\n\n@Injectable()\nexport class UsersService {\n\n    constructor(\n        @InjectRepository(Users)\n        private usersRepository: Repository,\n        @InjectRepository(Login)\n        private loginRepo: Repository,\n        @InjectRepository(Company)\n        private companyRepository: Repository,\n        @InjectRepository(TagStats)\n        private tagStatsRepo: Repository,\n        @InjectRepository(Recognition)\n        private recognitionRepository: Repository,\n        private companyservice: CompanyService,\n    ){}\n\n    //Must hash passwords\n    //In reality will grab user information from the database.\n\n    async loginUser(username: string): Promise {\n        return this.loginRepo.findOne( { relations: [\"employee\"], where: { email: username } });\n    }\n\n    //Function retrieves user profile using their userId.\n    async getProfile(userId: number, companyId: number): Promise {\n        return this.usersRepository.findOne( { relations: [\"manager\"], where: { employeeId: userId, companyId: companyId } } );\n    }\n\n    //Function retrieves range of user profiles using companyID\n    async getArrayOfUsers(companyId: number){\n\t    // I'm not sure this will work\n\t    let profileArray = await this.usersRepository.find({companyId: companyId});\n\t    console.log(profileArray);\n\t    return profileArray;\n    }\n\n    async removeUser(employeeId: number, companyId: number): Promise {\n        const user = await this.usersRepository.findOne({ employeeId: employeeId, companyId: companyId })\n        await this.loginRepo.delete({employee: user});\n        return await this.usersRepository.delete(user);\n    }\n    \n    async createUser(createuserDto: Users & Login & {managerId: number} & {companyName: string}): Promise {    \n        const user = new Users();\n        if (createuserDto.company != undefined) {\n            user.company = createuserDto.company;\n        }\n        else{\n            if (createuserDto.companyId != undefined) {\n                let company = await this.companyRepository.findOne({where:{companyId: createuserDto.companyId}})\n                if (!company ) {\n                    company = await this.companyservice.createCompany({\n                        companyId: createuserDto.companyId, \n                        name: createuserDto.companyName, \n                        tags: undefined, recognitions: undefined,\n                        users: [createuserDto]\n                    });\n                }\n                user.company = company\n            }\n        }\n\n        user.employeeId = createuserDto.employeeId;\n        user.companyId = createuserDto.companyId;\n\n        user.firstName = createuserDto.firstName;\n        user.lastName = createuserDto.lastName;\n\n        user.isManager = Boolean(createuserDto.isManager);\n        user.positionTitle = createuserDto.positionTitle;\n        user.startDate = new Date(createuserDto.startDate);\n        \n        if (createuserDto.manager != undefined) {\n            user.manager = createuserDto.manager;\n        }\n        else {\n            if (createuserDto.managerId != undefined) {\n                let Manager = await this.usersRepository.findOne({where:{companyId: createuserDto.companyId , \n                    employeeId : createuserDto.managerId}});\n                // If manager status of managerId is false, then set it to true\n                if (Manager != undefined && Manager.isManager == false) {\n                    Manager.isManager = true;\n                    await this.usersRepository.save(Manager);\n                }\n                user.manager = Manager;\n            }\n        }\n\n        const login = new Login();\n        login.email = createuserDto.email;\n        login.password = createuserDto.password;\n        login.employee = await this.usersRepository.save(user);\n        await this.loginRepo.save(login);\n        \n        return user;\n    }\n\n\n    async userStats(employeeId: number, companyId: number): Promise {\n        let user = await this.usersRepository.findOne({\n            relations: [\"tagStats\", \"tagStats.tag\"],\n            where: { employeeId: employeeId, companyId: companyId } \n        });\n\n        let userStats: UserStats = {\n            numRecsSent: user.numRecsSent,\n            numRecsReceived: user.numRecsReceived,\n            tagStats: user.tagStats\n        }\n        \n        return userStats;\n    }\n    \n    async createUserMultiple(employeeMultiple: []): Promise {\n        let arr_employee = [];\n        for (let i = 0; i  {\n        let date: Date = new Date();\n        let prevMonth: number = -1;\n        let year = date.getFullYear()\n        if (date.getMonth() == 0)\n        {\n            prevMonth = 12;\n            year = date.getFullYear() - 1;\n        }\n        else\n        {\n            //SQL takes 1 based months but the date object has 0 based months.\n            prevMonth = date.getMonth();\n        }\n        let queryString :string = `SELECT * FROM (SELECT t1.\"empToEmployeeId\", MAX(t1.numRecog) as numRecognitions FROM (select recognition.\"empToEmployeeId\", count(recognition.\"empToEmployeeId\") as numRecog from Recognition where recognition.\"empToCompanyId\" = ${companyId} and extract(Month from recognition.\"postDate\") = ${ prevMonth } and extract(Year from recognition.\"postDate\") = ${ year } group by recognition.\"empToEmployeeId\" ) t1 group by t1.\"empToEmployeeId\") t2, users where t2.\"empToEmployeeId\" = users.\"employeeId\";`\n        let retQuery= await this.recognitionRepository.query(queryString);\n        let maxRecog: number = 0;\n        let maxIndex: number = 0;\n        for (let i = 0; i  maxRecog)\n            {\n                maxRecog = retQuery.max;\n                maxIndex = i;\n            }\n        }\n        let rawRockstar = retQuery[maxIndex];\n        let rockstar: Users = new Users();\n        rockstar.company = rawRockstar.companyId;\n        rockstar.employeeId = rawRockstar.employeeId;\n\n        rockstar.firstName = rawRockstar.firstName;\n        rockstar.lastName = rawRockstar.lastName;\n\n        rockstar.isManager = rawRockstar.isManager;\n        rockstar.positionTitle = rawRockstar.positionTitle;\n        rockstar.startDate = new Date(rawRockstar.startDate);\n        rockstar.role = rawRockstar.role;\n\n        rockstar.manager = await this.usersRepository.findOne({where:{employeeId : rawRockstar.managerEmployeeId}})\n\n\n        return rockstar;\n\n        //calculate and return rockstar\n        //recognition module\n    }\n    async getRockstarRecogs(rockstar: Users): Promise{\n        let date: Date = new Date();\n        let prevMonth: number = -1;\n        let year = date.getFullYear()\n        if (date.getMonth() == 1)\n        {\n            prevMonth = 12;\n            year = date.getFullYear() - 1;\n        }\n        else\n        {\n            prevMonth = date.getMonth()\n        }\n        let recogs = await this.recognitionRepository.createQueryBuilder().select(\"*\").where(\"Recognition.empToCompanyId = :compID\", {compID : rockstar.company}).andWhere(\"Recognition.empToEmployeeId = :empID\", {empID: rockstar.employeeId}).andWhere(\"extract(Month from Recognition.postDate) = :prvMonth\",{prvMonth:prevMonth}).andWhere(\"extract(Year from Recognition.postDate) = :yr\",{yr:year}).getRawMany();\n        console.log(recogs);\n        return recogs;\n    }\n    async getRockstarStats(rockstar: Users): Promise {\n        let date: Date = new Date();\n        let prevMonth: number = -1;\n        let year = date.getFullYear()\n        if (date.getMonth() == 1)\n        {\n            prevMonth = 12;\n            year = date.getFullYear() - 1;\n        }\n        else\n        {\n            prevMonth = date.getMonth()\n        }\n        let results = {};\n        let recogs = await this.recognitionRepository.createQueryBuilder().select(\"*\").innerJoin(\"recognition_tags_tag\",\"test\",\"test.recognitionRecId = Recognition.recId\").where(\"Recognition.empToCompanyId = :compID\", {compID : rockstar.company}).andWhere(\"Recognition.empToEmployeeId = :empID\", {empID: rockstar.employeeId}).andWhere(\"extract(Month from Recognition.postDate) = :prvMonth\",{prvMonth:prevMonth}).andWhere(\"extract(Year from Recognition.postDate) = :yr\",{yr:year}).getRawMany();\n        for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users.html":{"url":"classes/Users.html","title":"class - Users","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                company\n                            \n                            \n                                companyId\n                            \n                            \n                                employeeId\n                            \n                            \n                                firstName\n                            \n                            \n                                isManager\n                            \n                            \n                                lastName\n                            \n                            \n                                login\n                            \n                            \n                                managed\n                            \n                            \n                                manager\n                            \n                            \n                                numRecsReceived\n                            \n                            \n                                numRecsSent\n                            \n                            \n                                positionTitle\n                            \n                            \n                                recsReceived\n                            \n                            \n                                recsSent\n                            \n                            \n                                role\n                            \n                            \n                                startDate\n                            \n                            \n                                tagStats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            company\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Company\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, {primary: true})@JoinColumn({name: 'companyId', referencedColumnName: 'companyId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            companyId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employeeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Login\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            managed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            manager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numRecsReceived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numRecsSent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            positionTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recsReceived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recsSent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Recognition[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: Role, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('timestamp')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tagStats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TagStats[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/users.entity.ts:69\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, JoinColumn, OneToMany, ManyToOne, OneToOne, Index } from 'typeorm';\nimport { Company } from \"./company.entity\";\nimport { Login } from './login.entity';\nimport { Recognition } from \"./recognition.entity\";\nimport { Role } from \"../roles/role.enum\";\nimport { TagStats} from './tagstats.entity';\n\n@Entity({name: \"users\"})\n@Index(['companyId', 'employeeId'], {unique: true})\nexport class Users {\n    \n    @ManyToOne(()=>Company, {primary: true} )\n    @JoinColumn({name: \"companyId\", referencedColumnName: \"companyId\"})\n    company: Company;\n    \n    // This looks duplicated, but don't delete it. It is just the same as the JoinColumn. \n    // This is necessary to make the foreign key also act as a primary key for Users.\n    @PrimaryColumn()\n    companyId: number;\n\n    @PrimaryColumn()\n    employeeId: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    positionTitle: string;\n\n    @Column()\n    isManager: boolean;\n\n    @Column({ \n        type: \"enum\", \n        enum: Role, \n        default: Role.Employee})\n    role: Role;\n\n    @Column(\"timestamp\")\n    startDate: Date;\n\n    @ManyToOne(()=> Users)\n    @JoinColumn()\n    manager: Users;\n\n    @OneToMany(()=>Users, emp=>emp.manager)\n    managed: Users[];\n\n    @OneToMany(()=>Recognition, rec=>rec.empFrom)\n    recsSent: Recognition[];\n\n    @OneToMany(()=>Recognition, rec=>rec.empTo)\n    recsReceived: Recognition[];\n\n    @Column({default: 0})\n    numRecsReceived: number;\n\n    @Column({default: 0})\n    numRecsSent: number;\n\n    // This relation was making it impossible to create rows in the table.\n    @OneToOne(() => Login)\n    login: Login;\n\n    @OneToMany(() => TagStats, tagstats => tagstats.employee)\n    tagStats: TagStats[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                createUserMultiple\n                            \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                getRockstar\n                            \n                            \n                                    Async\n                                getRockstarRecogs\n                            \n                            \n                                    Async\n                                getRockstarStats\n                            \n                            \n                                getStats\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUsersByCompany\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createuserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createuserDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUserMultiple\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserMultiple(employeeMultiple)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create_multiple')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeMultiple\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstar(companyId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('company/rockstar/:comp_id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstarRecogs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstarRecogs(comp_ID: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('company/rockstar/recognitions/:comp_ID')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comp_ID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstarStats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstarStats(comp_ID: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('company/rockstar/stats/:comp_ID')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comp_ID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStats\n                        \n                        \n                    \n                \n            \n            \n                \ngetStats(employeeId: number, companyId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('stats/:employeeId/company/:companyId')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(employee_id: number, company_id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':employ_id/company/:comp_id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employee_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    company_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsersByCompany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByCompany(company_id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('company/:comp_id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    company_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUser(employeeId: number, companyId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':employeeId/company/:companyId')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get, Delete, Param, Body } from '@nestjs/common';\nimport { Login } from '../entity/login.entity';\nimport { Users } from '../entity/users.entity';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n    constructor (private usersService: UsersService) {}\n\n    @UseGuards(JwtAuthGuard)\n    @Get('profile')\n    getProfile(@Request() req) {\n        return this.usersService.getProfile(req.user.employeeId, req.user.companyId);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get(':employ_id/company/:comp_id')\n    async getUser(@Param(\"employ_id\") employee_id: number, @Param(\"comp_id\") company_id: number) {\n        return await this.usersService.getProfile(employee_id, company_id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('company/:comp_id')\n    async getUsersByCompany(@Param(\"comp_id\") company_id: number) {\n\t    return await this.usersService.getArrayOfUsers(company_id);\n    }\n\n    @Delete(':employeeId/company/:companyId')\n    async removeUser(@Param('employeeId') employeeId: number, @Param('companyId') companyId: number) {\n        return await this.usersService.removeUser(employeeId, companyId);\n    }\n    //This endpoint should be guarded\n    @Post('create')\n    async createUser(@Body() createuserDto: Users & Login & {managerId: number} & {companyName: string}) {\n        return await this.usersService.createUser(createuserDto);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('stats/:employeeId/company/:companyId')\n    getStats(@Param('employeeId') employeeId: number, @Param('companyId') companyId: number) {\n        return this.usersService.userStats(employeeId, companyId);\n    }\n  \n    @Post('create_multiple')\n    async createUserMultiple(@Body() employeeMultiple: []) {\n        return await this.usersService.createUserMultiple(employeeMultiple);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('company/rockstar/:comp_id')\n    async getRockstar(@Param('comp_id') companyId: number) {\n        return await this.usersService.getRockstar(companyId);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('company/rockstar/stats/:comp_ID')\n    async getRockstarStats(@Param('comp_ID') comp_ID: number)\n    {\n        let rockstar: Users = await this.getRockstar(comp_ID)\n        return await this.usersService.getRockstarStats(rockstar);\n    }\n    @UseGuards(JwtAuthGuard)\n    @Get('company/rockstar/recognitions/:comp_ID')\n    async getRockstarRecogs(@Param('comp_ID') comp_ID: number)\n    {\n        let rockstar: Users = await this.getRockstar(comp_ID)\n        return await this.usersService.getRockstarRecogs(rockstar);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCompanyModule\n\nCompanyModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCompanyModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CompanyModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersController } from './users.controller';\nimport { Users } from '../entity/users.entity';\nimport { Login } from '../entity/login.entity';\nimport { Company } from '../entity/company.entity';\nimport { TagStats } from '../entity/tagstats.entity';\nimport { CompanyModule } from 'src/company/company.module';\nimport { Recognition} from '../entity/recognition.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, Login, Company, Recognition, TagStats]), CompanyModule],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                createUserMultiple\n                            \n                            \n                                    Async\n                                getArrayOfUsers\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                getRockstar\n                            \n                            \n                                    Async\n                                getRockstarRecogs\n                            \n                            \n                                    Async\n                                getRockstarStats\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                userStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, loginRepo: Repository, companyRepository: Repository, tagStatsRepo: Repository, recognitionRepository: Repository, companyservice: CompanyService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagStatsRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recognitionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyservice\n                                                  \n                                                        \n                                                                        CompanyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createuserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createuserDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUserMultiple\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserMultiple(employeeMultiple)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeMultiple\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getArrayOfUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getArrayOfUsers(companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(userId: number, companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstar(companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstarRecogs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstarRecogs(rockstar: Users)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rockstar\n                                    \n                                                Users\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRockstarStats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRockstarStats(rockstar: Users)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rockstar\n                                    \n                                                Users\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUser(employeeId: number, companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            userStats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userStats(employeeId: number, companyId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, QueryBuilder, Repository } from 'typeorm';\nimport { Users } from '../entity/users.entity';\nimport { Login } from '../entity/login.entity';\nimport { Company } from '../entity/company.entity';\nimport { TagStats } from '../entity/tagstats.entity';\nimport { CompanyService } from '../company/company.service';\nimport { Recognition } from '../entity/recognition.entity';\nimport { Query } from 'typeorm/driver/Query';\n\n\nexport interface UserStats {\n    numRecsReceived: number,\n    numRecsSent: number,\n    tagStats: TagStats[]\n}\n\n@Injectable()\nexport class UsersService {\n\n    constructor(\n        @InjectRepository(Users)\n        private usersRepository: Repository,\n        @InjectRepository(Login)\n        private loginRepo: Repository,\n        @InjectRepository(Company)\n        private companyRepository: Repository,\n        @InjectRepository(TagStats)\n        private tagStatsRepo: Repository,\n        @InjectRepository(Recognition)\n        private recognitionRepository: Repository,\n        private companyservice: CompanyService,\n    ){}\n\n    //Must hash passwords\n    //In reality will grab user information from the database.\n\n    async loginUser(username: string): Promise {\n        return this.loginRepo.findOne( { relations: [\"employee\"], where: { email: username } });\n    }\n\n    //Function retrieves user profile using their userId.\n    async getProfile(userId: number, companyId: number): Promise {\n        return this.usersRepository.findOne( { relations: [\"manager\"], where: { employeeId: userId, companyId: companyId } } );\n    }\n\n    //Function retrieves range of user profiles using companyID\n    async getArrayOfUsers(companyId: number){\n\t    // I'm not sure this will work\n\t    let profileArray = await this.usersRepository.find({companyId: companyId});\n\t    console.log(profileArray);\n\t    return profileArray;\n    }\n\n    async removeUser(employeeId: number, companyId: number): Promise {\n        const user = await this.usersRepository.findOne({ employeeId: employeeId, companyId: companyId })\n        await this.loginRepo.delete({employee: user});\n        return await this.usersRepository.delete(user);\n    }\n    \n    async createUser(createuserDto: Users & Login & {managerId: number} & {companyName: string}): Promise {    \n        const user = new Users();\n        if (createuserDto.company != undefined) {\n            user.company = createuserDto.company;\n        }\n        else{\n            if (createuserDto.companyId != undefined) {\n                let company = await this.companyRepository.findOne({where:{companyId: createuserDto.companyId}})\n                if (!company ) {\n                    company = await this.companyservice.createCompany({\n                        companyId: createuserDto.companyId, \n                        name: createuserDto.companyName, \n                        tags: undefined, recognitions: undefined,\n                        users: [createuserDto]\n                    });\n                }\n                user.company = company\n            }\n        }\n\n        user.employeeId = createuserDto.employeeId;\n        user.companyId = createuserDto.companyId;\n\n        user.firstName = createuserDto.firstName;\n        user.lastName = createuserDto.lastName;\n\n        user.isManager = Boolean(createuserDto.isManager);\n        user.positionTitle = createuserDto.positionTitle;\n        user.startDate = new Date(createuserDto.startDate);\n        \n        if (createuserDto.manager != undefined) {\n            user.manager = createuserDto.manager;\n        }\n        else {\n            if (createuserDto.managerId != undefined) {\n                let Manager = await this.usersRepository.findOne({where:{companyId: createuserDto.companyId , \n                    employeeId : createuserDto.managerId}});\n                // If manager status of managerId is false, then set it to true\n                if (Manager != undefined && Manager.isManager == false) {\n                    Manager.isManager = true;\n                    await this.usersRepository.save(Manager);\n                }\n                user.manager = Manager;\n            }\n        }\n\n        const login = new Login();\n        login.email = createuserDto.email;\n        login.password = createuserDto.password;\n        login.employee = await this.usersRepository.save(user);\n        await this.loginRepo.save(login);\n        \n        return user;\n    }\n\n\n    async userStats(employeeId: number, companyId: number): Promise {\n        let user = await this.usersRepository.findOne({\n            relations: [\"tagStats\", \"tagStats.tag\"],\n            where: { employeeId: employeeId, companyId: companyId } \n        });\n\n        let userStats: UserStats = {\n            numRecsSent: user.numRecsSent,\n            numRecsReceived: user.numRecsReceived,\n            tagStats: user.tagStats\n        }\n        \n        return userStats;\n    }\n    \n    async createUserMultiple(employeeMultiple: []): Promise {\n        let arr_employee = [];\n        for (let i = 0; i  {\n        let date: Date = new Date();\n        let prevMonth: number = -1;\n        let year = date.getFullYear()\n        if (date.getMonth() == 0)\n        {\n            prevMonth = 12;\n            year = date.getFullYear() - 1;\n        }\n        else\n        {\n            //SQL takes 1 based months but the date object has 0 based months.\n            prevMonth = date.getMonth();\n        }\n        let queryString :string = `SELECT * FROM (SELECT t1.\"empToEmployeeId\", MAX(t1.numRecog) as numRecognitions FROM (select recognition.\"empToEmployeeId\", count(recognition.\"empToEmployeeId\") as numRecog from Recognition where recognition.\"empToCompanyId\" = ${companyId} and extract(Month from recognition.\"postDate\") = ${ prevMonth } and extract(Year from recognition.\"postDate\") = ${ year } group by recognition.\"empToEmployeeId\" ) t1 group by t1.\"empToEmployeeId\") t2, users where t2.\"empToEmployeeId\" = users.\"employeeId\";`\n        let retQuery= await this.recognitionRepository.query(queryString);\n        let maxRecog: number = 0;\n        let maxIndex: number = 0;\n        for (let i = 0; i  maxRecog)\n            {\n                maxRecog = retQuery.max;\n                maxIndex = i;\n            }\n        }\n        let rawRockstar = retQuery[maxIndex];\n        let rockstar: Users = new Users();\n        rockstar.company = rawRockstar.companyId;\n        rockstar.employeeId = rawRockstar.employeeId;\n\n        rockstar.firstName = rawRockstar.firstName;\n        rockstar.lastName = rawRockstar.lastName;\n\n        rockstar.isManager = rawRockstar.isManager;\n        rockstar.positionTitle = rawRockstar.positionTitle;\n        rockstar.startDate = new Date(rawRockstar.startDate);\n        rockstar.role = rawRockstar.role;\n\n        rockstar.manager = await this.usersRepository.findOne({where:{employeeId : rawRockstar.managerEmployeeId}})\n\n\n        return rockstar;\n\n        //calculate and return rockstar\n        //recognition module\n    }\n    async getRockstarRecogs(rockstar: Users): Promise{\n        let date: Date = new Date();\n        let prevMonth: number = -1;\n        let year = date.getFullYear()\n        if (date.getMonth() == 1)\n        {\n            prevMonth = 12;\n            year = date.getFullYear() - 1;\n        }\n        else\n        {\n            prevMonth = date.getMonth()\n        }\n        let recogs = await this.recognitionRepository.createQueryBuilder().select(\"*\").where(\"Recognition.empToCompanyId = :compID\", {compID : rockstar.company}).andWhere(\"Recognition.empToEmployeeId = :empID\", {empID: rockstar.employeeId}).andWhere(\"extract(Month from Recognition.postDate) = :prvMonth\",{prvMonth:prevMonth}).andWhere(\"extract(Year from Recognition.postDate) = :yr\",{yr:year}).getRawMany();\n        console.log(recogs);\n        return recogs;\n    }\n    async getRockstarStats(rockstar: Users): Promise {\n        let date: Date = new Date();\n        let prevMonth: number = -1;\n        let year = date.getFullYear()\n        if (date.getMonth() == 1)\n        {\n            prevMonth = 12;\n            year = date.getFullYear() - 1;\n        }\n        else\n        {\n            prevMonth = date.getMonth()\n        }\n        let results = {};\n        let recogs = await this.recognitionRepository.createQueryBuilder().select(\"*\").innerJoin(\"recognition_tags_tag\",\"test\",\"test.recognitionRecId = Recognition.recId\").where(\"Recognition.empToCompanyId = :compID\", {compID : rockstar.company}).andWhere(\"Recognition.empToEmployeeId = :empID\", {empID: rockstar.employeeId}).andWhere(\"extract(Month from Recognition.postDate) = :prvMonth\",{prvMonth:prevMonth}).andWhere(\"extract(Year from Recognition.postDate) = :yr\",{yr:year}).getRawMany();\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/company/company.controller.ts\n            \n            controller\n            CompanyController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/company/company.service.ts\n            \n            injectable\n            CompanyService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/company.entity.ts\n            \n            class\n            Company\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entity/login.entity.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/recognition.entity.ts\n            \n            class\n            Recognition\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entity/tag.entity.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entity/tagstats.entity.ts\n            \n            class\n            TagStats\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entity/users.entity.ts\n            \n            class\n            Users\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recognition/dto/create-rec.dto.ts\n            \n            class\n            CreateRecDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/recognition/recognition.controller.ts\n            \n            controller\n            RecognitionController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recognition/recognition.service.ts\n            \n            injectable\n            RecognitionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.31\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Employee\n                            \n                        \n                        \n                            \n                                Value : employee\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nBackend code for CS320 Peer Recognition Software Prototype (Spring 2021) using the Nest framework.\nInstallation\nFrom the root directory of the project\nDocker setup\nstop current database\n$ docker-compose down; docker rm -fr (docker ps | grep postgres | cut -c1-12);\\\ndocker volume rm peer-recognition-backend_database-databuild the new database\n$ docker-compose upinstall the dependencies\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covAutomated Documentation\ncompodoc\nMore detailed information on using compodoc can be found here.\n# generate documentation\n$ npx @compodoc/compodoc -p tsconfig.json -sDocumentation will be generated at http://localhost:8080\nSwagger\nNestjs specific docs can be found here.  \nSwagger docs auto generate at http://localhost:4200/api/\nUseful swagger related links:\n\nhttps://stackoverflow.com/questions/54802832/is-it-possible-to-add-authentication-to-access-to-nestjs-swagger-explorer\nhttps://codeburst.io/integrating-swagger-with-nestjs-9650594ab728\n\nDocker Notes\nPersistence\nThe database has persistence of information between sessions.  It however does not currently have any form of environmental persistence, nor does it have direct file support in the repo, instead it has a volume holding the information.\nConnection\nThe database is currently used by connecting to localhost:5432.\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompanyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecognitionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CompanyModule\n\n\n\ncluster_CompanyModule_exports\n\n\n\ncluster_CompanyModule_providers\n\n\n\ncluster_RecognitionModule\n\n\n\ncluster_RecognitionModule_exports\n\n\n\ncluster_RecognitionModule_providers\n\n\n\ncluster_TagModule\n\n\n\ncluster_TagModule_exports\n\n\n\ncluster_TagModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCompanyModule\n\nCompanyModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCompanyModule->UsersModule\n\n\n\nAppModule -->\n\nCompanyModule->AppModule\n\n\n\n\n\nCompanyService \n\nCompanyService \n\nCompanyService  -->\n\nCompanyModule->CompanyService \n\n\n\n\n\nRecognitionModule\n\nRecognitionModule\n\nAppModule -->\n\nRecognitionModule->AppModule\n\n\n\n\n\nRecognitionService \n\nRecognitionService \n\nRecognitionService  -->\n\nRecognitionModule->RecognitionService \n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nTagService \n\nTagService \n\nTagService  -->\n\nTagModule->TagService \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCompanyService\n\nCompanyService\n\nCompanyModule -->\n\nCompanyService->CompanyModule\n\n\n\n\n\nRecognitionService\n\nRecognitionService\n\nRecognitionModule -->\n\nRecognitionService->RecognitionModule\n\n\n\n\n\nTagService\n\nTagService\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            fs   (src/.../main.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('fs')\n                        \n                    \n\n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n}\n                        \n                    \n\n\n            \n        \n\n    src/roles/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'roles'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/swagger-api-docs.html":{"url":"additional-documentation/swagger-api-docs.html","title":"additional-page - Swagger API Docs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n    \n        \n        \n        \n        My New API\n    \n    \n         \n        \n            window.onload = function () {\n                // Begin Swagger UI call region\n                const ui = SwaggerUIBundle({\n                    url: \"swagger-spec.json\", //Location of Open API spec in the repo\n                    dom_id: '#swagger-ui',\n                    deepLinking: true,\n                    presets: [\n                        SwaggerUIBundle.presets.apis,\n                        SwaggerUIBundle.SwaggerUIStandalonePreset\n                    ],\n                    plugins: [\n                        SwaggerUIBundle.plugins.DownloadUrl\n                    ],\n                })\n                window.ui = ui\n            }\n        \n    \n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
